[
  {
    "predictSQL": "SELECT COUNT( * ) FROM singer",
    "goldSQL": "SELECT count(*) FROM singer",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM singer",
    "goldSQL": "SELECT count(*) FROM singer",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name , singer.country , singer.age FROM singer ORDER BY singer.age ASC",
    "goldSQL": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT singer.name , singer.country , singer.age FROM singer ORDER BY singer.age DESC",
    "goldSQL": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( singer.age ) , MIN( singer.age ) , MAX( singer.age ) FROM singer WHERE singer.country = 'France'",
    "goldSQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( singer.age ) , MIN( singer.age ) , MAX( singer.age ) FROM singer WHERE singer.country = 'French'",
    "goldSQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT singer.song_name , singer.song_release_year FROM singer ORDER BY singer.age ASC LIMIT 1",
    "goldSQL": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.song_name , singer.song_release_year FROM singer ORDER BY singer.age ASC LIMIT 1",
    "goldSQL": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT singer.country FROM singer WHERE singer.age > 20",
    "goldSQL": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT singer.country FROM singer WHERE singer.age > 20",
    "goldSQL": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.country , COUNT( * ) FROM singer GROUP BY singer.country",
    "goldSQL": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.country , COUNT( * ) FROM singer GROUP BY singer.country",
    "goldSQL": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.song_name FROM singer WHERE singer.age > (SELECT AVG( singer.age ) FROM singer)",
    "goldSQL": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.song_name FROM singer WHERE singer.age > (SELECT AVG( singer.age ) FROM singer)",
    "goldSQL": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT stadium.location , stadium.name FROM stadium WHERE stadium.capacity BETWEEN 5000 and 10000",
    "goldSQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT stadium.location , stadium.name FROM stadium WHERE stadium.capacity BETWEEN 5000 and 10000",
    "goldSQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( stadium.capacity ) , AVG( stadium.average ) FROM stadium",
    "goldSQL": "select max(capacity), average from stadium",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT MAX( stadium.capacity ) , AVG( stadium.average ) FROM stadium",
    "goldSQL": "select avg(capacity) ,  max(capacity) from stadium",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT stadium.name , stadium.capacity FROM stadium ORDER BY stadium.average DESC LIMIT 1",
    "goldSQL": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT stadium.name , stadium.capacity FROM stadium ORDER BY stadium.average DESC LIMIT 1",
    "goldSQL": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM concert WHERE concert.year = 2014 OR concert.year = 2015",
    "goldSQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM concert WHERE concert.year = 2014 OR concert.year = 2015",
    "goldSQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT stadium.name , COUNT( * ) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id GROUP BY concert.stadium_id",
    "goldSQL": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , concert.stadium_id FROM concert GROUP BY concert.stadium_id",
    "goldSQL": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT stadium.name , stadium.capacity FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY concert.stadium_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT stadium.name , stadium.capacity FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year > 2013 GROUP BY concert.stadium_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT concert.year FROM concert GROUP BY concert.year ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT concert.year FROM concert GROUP BY concert.year ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN (SELECT concert.stadium_id FROM concert)",
    "goldSQL": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN (SELECT concert.stadium_id FROM concert)",
    "goldSQL": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.country FROM singer WHERE singer.age > 40 INTERSECT SELECT singer.country FROM singer WHERE singer.age<30",
    "goldSQL": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT stadium.name FROM stadium EXCEPT SELECT stadium.name FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014",
    "goldSQL": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT stadium.name FROM stadium EXCEPT SELECT stadium.name FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014",
    "goldSQL": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT concert.concert_name , concert.theme , COUNT( * ) FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer_in_concert.concert_id",
    "goldSQL": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT concert.concert_name , concert.theme , COUNT( * ) FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer_in_concert.concert_id",
    "goldSQL": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name , COUNT( * ) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY singer_in_concert.singer_id",
    "goldSQL": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT singer.name , COUNT( * ) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY singer_in_concert.singer_id",
    "goldSQL": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT singer.name FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE concert.year = 2014",
    "goldSQL": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE concert.year = 2014",
    "goldSQL": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name , singer.country FROM singer WHERE singer.song_name LIKE '%Hey%'",
    "goldSQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name , singer.country FROM singer WHERE singer.song_name LIKE '%Hey%'",
    "goldSQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT stadium.name , stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name , stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2015",
    "goldSQL": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT stadium.name , stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name , stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2015",
    "goldSQL": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id GROUP BY concert.stadium_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = (SELECT MAX( stadium.capacity ) FROM stadium)",
    "goldSQL": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM pets WHERE pets.weight > 10",
    "goldSQL": "SELECT count(*) FROM pets WHERE weight  >  10",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM pets WHERE pets.weight > 10",
    "goldSQL": "SELECT count(*) FROM pets WHERE weight  >  10",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT pets.weight FROM pets WHERE pets.pet_age = (SELECT MIN( pets.pet_age ) FROM pets)",
    "goldSQL": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT pets.weight FROM pets WHERE pets.pet_age = (SELECT MIN( pets.pet_age ) FROM pets)",
    "goldSQL": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT pets.pettype , MAX( pets.weight ) FROM pets GROUP BY pets.pettype",
    "goldSQL": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT pets.pettype , MAX( pets.weight ) FROM pets GROUP BY pets.pettype",
    "goldSQL": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT has_pet.petid ) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "goldSQL": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT has_pet.petid ) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20",
    "goldSQL": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.sex = 'F' AND pets.pettype = 'dog'",
    "goldSQL": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.sex = 'f' AND pets.pettype = 'dog'",
    "goldSQL": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT pets.pettype ) FROM pets",
    "goldSQL": "SELECT count(DISTINCT pettype) FROM pets",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT pets.pettype ) FROM pets",
    "goldSQL": "SELECT count(DISTINCT pettype) FROM pets",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT student.fname FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    "goldSQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT student.fname FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'",
    "goldSQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT student.fname FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'cat' INTERSECT SELECT student.fname FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog'",
    "goldSQL": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT student.fname FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'cats' INTERSECT SELECT student.fname FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dogs'",
    "goldSQL": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT student.major , student.age FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "goldSQL": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT student.major , student.age FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "goldSQL": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT student.stuid FROM student EXCEPT SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'",
    "goldSQL": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT student.stuid FROM student EXCEPT SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cats'",
    "goldSQL": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT student.fname , student.age FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' EXCEPT SELECT student.fname , student.age FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'cat'",
    "goldSQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT student.fname FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')",
    "goldSQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT pets.pettype , pets.weight FROM pets ORDER BY pets.pet_age ASC LIMIT 1",
    "goldSQL": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT pets.pettype , pets.weight FROM pets ORDER BY pets.pet_age ASC LIMIT 1",
    "goldSQL": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT pets.petid , pets.weight FROM pets WHERE pets.pet_age > 1",
    "goldSQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT pets.petid , pets.weight FROM pets WHERE pets.pet_age > 1",
    "goldSQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT pets.pettype , AVG( student.age ) , MAX( student.age ) FROM pets GROUP BY pets.pettype",
    "goldSQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT pets.pettype , AVG( student.age ) , MAX( student.age ) FROM pets GROUP BY pets.pettype",
    "goldSQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT pets.pettype , AVG( pets.weight ) FROM pets GROUP BY pets.pettype",
    "goldSQL": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT pets.pettype , AVG( pets.weight ) FROM pets GROUP BY pets.pettype",
    "goldSQL": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT student.fname , student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid",
    "goldSQL": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT student.fname , student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid",
    "goldSQL": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT has_pet.petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'",
    "goldSQL": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT has_pet.petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'",
    "goldSQL": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , has_pet.stuid FROM has_pet GROUP BY has_pet.stuid",
    "goldSQL": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT student.fname , student.lname , COUNT( * ) FROM has_pet JOIN student ON has_pet.stuid = student.stuid GROUP BY has_pet.stuid",
    "goldSQL": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT student.fname , student.sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY has_pet.stuid HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT student.fname , student.sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY has_pet.stuid HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT student.lname FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'cat' AND student.age = 3",
    "goldSQL": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "has_pet , pets",
    "goldSQL": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT AVG( student.age ) FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet)",
    "goldSQL": "select avg(age) from student where stuid not in (select stuid from has_pet)",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( student.age ) FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet)",
    "goldSQL": "select avg(age) from student where stuid not in (select stuid from has_pet)",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM continents",
    "goldSQL": "SELECT count(*) FROM CONTINENTS;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM continents",
    "goldSQL": "SELECT count(*) FROM CONTINENTS;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT continents.contid , continents.continent , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY countries.continent",
    "goldSQL": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT continents.contid , countries.countryname , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid",
    "goldSQL": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM countries",
    "goldSQL": "SELECT count(*) FROM COUNTRIES;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM countries",
    "goldSQL": "SELECT count(*) FROM COUNTRIES;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_makers.fullname , car_makers.id , COUNT( * ) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id",
    "goldSQL": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_makers.fullname , car_makers.id , COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.id",
    "goldSQL": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.horsepower ASC LIMIT 1",
    "goldSQL": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.horsepower ASC LIMIT 1",
    "goldSQL": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.weight<(SELECT AVG( cars_data.weight ) FROM cars_data)",
    "goldSQL": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.weight<(SELECT AVG( cars_data.weight ) FROM cars_data)",
    "goldSQL": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE cars_data.year = 1970",
    "goldSQL": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE cars_data.year = 1970",
    "goldSQL": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT car_names.make , cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 1",
    "goldSQL": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT car_makers.maker , cars_data.year FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 1",
    "goldSQL": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980",
    "goldSQL": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980",
    "goldSQL": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT continents.continent , COUNT( * ) FROM car_makers JOIN countries ON car_makers.id = countries.countryid JOIN continents ON countries.continent = continents.contid GROUP BY continents.continent",
    "goldSQL": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT continents.continent , COUNT( * ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid GROUP BY continents.continent",
    "goldSQL": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY car_makers.country ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY car_makers.country ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname",
    "goldSQL": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT car_makers.id , car_makers.fullname , COUNT( * ) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id",
    "goldSQL": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'sw'",
    "goldSQL": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'sw'",
    "goldSQL": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM car_makers WHERE car_makers.country = 'france'",
    "goldSQL": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France'",
    "goldSQL": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'",
    "goldSQL": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "car_makers , model_list",
    "goldSQL": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT AVG( cars_data.mpg ) FROM cars_data WHERE cars_data.cylinders = 4",
    "goldSQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( cars_data.mpg ) FROM cars_data WHERE cars_data.cylinders = 4",
    "goldSQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT MIN( cars_data.weight ) FROM cars_data WHERE cars_data.cylinders = 8 AND cars_data.year = 1974",
    "goldSQL": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MIN( cars_data.weight ) FROM cars_data WHERE cars_data.year = 1974 AND cars_data.cylinders = 8",
    "goldSQL": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_makers.maker , model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker",
    "goldSQL": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT car_makers.maker , model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker",
    "goldSQL": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT countries.countryname , car_makers.id FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT( * ) >= 1",
    "goldSQL": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT countries.countryname , countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT( * ) >= 1",
    "goldSQL": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cars_data WHERE cars_data.horsepower > 150",
    "goldSQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cars_data WHERE cars_data.horsepower > 150",
    "goldSQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( cars_data.weight ) , cars_data.year FROM cars_data GROUP BY cars_data.year",
    "goldSQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( cars_data.weight ) , cars_data.year FROM cars_data GROUP BY cars_data.year",
    "goldSQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY car_makers.country HAVING COUNT( * ) >= 3",
    "goldSQL": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY car_makers.country HAVING COUNT( * ) >= 3",
    "goldSQL": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT MAX( cars_data.horsepower ) , car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 3",
    "goldSQL": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT MAX( cars_data.horsepower ) , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 3",
    "goldSQL": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.mpg DESC LIMIT 1",
    "goldSQL": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.mpg DESC LIMIT 1",
    "goldSQL": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( cars_data.horsepower ) FROM cars_data WHERE cars_data.year<1980",
    "goldSQL": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( cars_data.horsepower ) FROM cars_data WHERE cars_data.year<1980",
    "goldSQL": "select avg(horsepower) from cars_data where year  <  1980;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( cars_data.edispl ) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'volvo'",
    "goldSQL": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( cars_data.edispl ) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'volvos'",
    "goldSQL": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT cars_data.cylinders , MAX( cars_data.accelerate ) FROM cars_data GROUP BY cars_data.cylinders",
    "goldSQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT cars_data.cylinders , MAX( cars_data.accelerate ) FROM cars_data GROUP BY cars_data.cylinders",
    "goldSQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_names.model FROM car_names GROUP BY car_names.model ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_names.model FROM car_names GROUP BY car_names.model ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders > 4",
    "goldSQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders > 4",
    "goldSQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cars_data WHERE cars_data.year = 1980",
    "goldSQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cars_data WHERE cars_data.year = 1980",
    "goldSQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.fullname = 'American Motor Company'",
    "goldSQL": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.fullname = 'American Motor Company'",
    "goldSQL": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_makers.fullname , car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT( * ) > 3",
    "goldSQL": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_makers.fullname , car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY model_list.maker HAVING COUNT( * ) > 3",
    "goldSQL": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT car_names.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON cars_data.id = car_names.makeid WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500",
    "goldSQL": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT car_names.model FROM model_list JOIN car_names ON model_list.maker = car_names.makeid JOIN car_makers ON cars_data.id = car_makers.id WHERE car_makers.maker = 'General Motors' OR cars_data.weight > 3500",
    "goldSQL": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT cars_data.year FROM cars_data WHERE cars_data.weight BETWEEN 3000 and 4000",
    "goldSQL": "select distinct year from cars_data where weight between 3000 and 4000;",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT cars_data.year FROM cars_data WHERE cars_data.weight<4000 INTERSECT SELECT cars_data.year FROM cars_data WHERE cars_data.weight > 3000",
    "goldSQL": "select distinct year from cars_data where weight between 3000 and 4000;",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT cars_data.horsepower FROM cars_data ORDER BY cars_data.accelerate DESC LIMIT 1",
    "goldSQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT cars_data.horsepower FROM cars_data ORDER BY cars_data.accelerate DESC LIMIT 1",
    "goldSQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT cars_data.cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'volvo' ORDER BY cars_data.accelerate ASC LIMIT 1",
    "goldSQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT cars_data.cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'volvo' ORDER BY cars_data.accelerate ASC LIMIT 1",
    "goldSQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cars_data WHERE cars_data.accelerate > (SELECT MAX( cars_data.horsepower ) FROM cars_data)",
    "goldSQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cars_data WHERE cars_data.accelerate > (SELECT MAX( cars_data.horsepower ) FROM cars_data)",
    "goldSQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM car_makers HAVING COUNT( * ) > 2",
    "goldSQL": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM car_makers HAVING COUNT( * ) > 2",
    "goldSQL": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders > 6",
    "goldSQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cars_data WHERE cars_data.cylinders > 6",
    "goldSQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1",
    "goldSQL": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1",
    "goldSQL": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT car_names.makeid , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN( cars_data.horsepower ) FROM cars_data WHERE cars_data.cylinders > 3)",
    "goldSQL": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT car_names.makeid , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders<(SELECT MIN( cars_data.horsepower ) FROM cars_data WHERE cars_data.cylinders<4)",
    "goldSQL": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT MAX( cars_data.mpg ) FROM cars_data WHERE cars_data.cylinders = '8' OR cars_data.year<1980",
    "goldSQL": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( cars_data.mpg ) FROM cars_data WHERE cars_data.cylinders = '8' OR cars_data.year<1980",
    "goldSQL": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT model_list.model FROM car_names WHERE cars_data.weight<3500 AND car_names.make != 'Ford Motor Company'",
    "goldSQL": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "car_makers , car_names",
    "goldSQL": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers)",
    "goldSQL": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers)",
    "goldSQL": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT car_makers.id , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT( * ) >= 2 INTERSECT SELECT car_makers.id , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT( * ) >= 3",
    "goldSQL": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT car_makers.id , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT( * ) > 3",
    "goldSQL": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "car_makers.id = car_makers.country",
    "goldSQL": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "car_makers.id = car_makers.country",
    "goldSQL": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.country FROM airlines WHERE airlines.airline = 'JetBlue Airways'",
    "goldSQL": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT airlines.country FROM airlines WHERE airlines.airline = 'Jetblue Airways'",
    "goldSQL": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.abbreviation FROM airlines WHERE airlines.airline = 'JetBlue Airways'",
    "goldSQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT airlines.abbreviation FROM airlines WHERE airlines.airline = 'Jetblue Airways'",
    "goldSQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.airline , airlines.abbreviation FROM airlines WHERE airlines.country = 'USA'",
    "goldSQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT airlines.airline , airlines.abbreviation FROM airlines WHERE airlines.country = 'USA'",
    "goldSQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.airportcode , airports.airportname FROM airports WHERE airports.city = 'Anthony'",
    "goldSQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.airportcode , airports.airportname FROM airports WHERE airports.city = 'Anthony'",
    "goldSQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM airlines",
    "goldSQL": "SELECT count(*) FROM AIRLINES",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM airlines",
    "goldSQL": "SELECT count(*) FROM AIRLINES",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM airports",
    "goldSQL": "SELECT count(*) FROM AIRPORTS",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM airports",
    "goldSQL": "SELECT count(*) FROM AIRPORTS",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights",
    "goldSQL": "SELECT count(*) FROM FLIGHTS",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights",
    "goldSQL": "SELECT count(*) FROM FLIGHTS",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT airlines.airline FROM airlines WHERE airlines.abbreviation = 'UAL'",
    "goldSQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT airlines.airline FROM airlines WHERE airlines.abbreviation = 'UAL'",
    "goldSQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM airlines WHERE airlines.country = 'USA'",
    "goldSQL": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM airlines WHERE airlines.country = 'USA'",
    "goldSQL": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.city , airports.country FROM airports WHERE airports.airportname = 'Alton'",
    "goldSQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.city , airports.country FROM airports WHERE airports.airportname = 'Alton'",
    "goldSQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.airportname FROM airports WHERE airports.airportname = 'AKO'",
    "goldSQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT airports.airportname FROM airports WHERE airports.airportcode = 'AKO'",
    "goldSQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.airportname FROM airports WHERE airports.city = 'Aberdeen'",
    "goldSQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.airportname FROM airports WHERE airports.city = 'Aberdeen'",
    "goldSQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights WHERE flights.destairport = 'ATO'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'ATO'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen' AND flights.destairport = 'Ashley'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen' AND airports.airportname = 'Ashley'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'JetBlue Airways'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'Jetblue Airways'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'ASY' AND airlines.airline = 'United Airlines'",
    "goldSQL": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.destairport = airlines.uid WHERE airports.airportname = 'ASY Airport' AND airlines.airline = 'United Airlines'",
    "goldSQL": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON airlines.uid = flights.airline WHERE airports.airportname = 'AHD' AND airlines.airline = 'United Airlines'",
    "goldSQL": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON flights.airline = flights.airline JOIN airlines ON flights.sourceairport = airlines.uid WHERE airports.airportname = 'AHD Airport' AND airlines.airline = 'United Airlines'",
    "goldSQL": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.destairport = airlines.uid WHERE airports.city = 'Aberdeen' AND airlines.airline = 'United Airlines'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen' AND airlines.airline = 'United Airlines'",
    "goldSQL": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT airports.city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY flights.sourceairport ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT airports.airportcode FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.airportcode ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.airportcode ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.airportcode FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.airportcode ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY flights.sourceairport ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY flights.airline ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY flights.airline ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.abbreviation , airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY flights.airline ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.abbreviation , airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY flights.airline ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'AHD'",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'AHD'",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'AHD'",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = 'AHD'",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG' INTERSECT SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG' INTERSECT SELECT flights.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'CVO' EXCEPT SELECT airlines.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "airlines , airports",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY flights.airline HAVING COUNT( * ) >= 10",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY flights.airline HAVING COUNT( * ) >= 10",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.flightno<200",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.flightno<200",
    "goldSQL": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT flights.flightno FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'United Airlines'",
    "goldSQL": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT flights.flightno FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'United Airlines'",
    "goldSQL": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "goldSQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'APG'",
    "goldSQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "goldSQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG'",
    "goldSQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "goldSQL": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "goldSQL": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "goldSQL": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'",
    "goldSQL": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen' OR airports.city = 'Abilene'",
    "goldSQL": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen' OR airports.city = 'Abilene'",
    "goldSQL": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT airports.airportname FROM airports WHERE airports.airportcode NOT IN (SELECT flights.sourceairport FROM flights)",
    "goldSQL": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT airports.airportname FROM airports WHERE airports.airportcode NOT IN (SELECT flights.sourceairport FROM flights)",
    "goldSQL": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM employee",
    "goldSQL": "SELECT count(*) FROM employee",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM employee",
    "goldSQL": "SELECT count(*) FROM employee",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT employee.name FROM employee ORDER BY employee.age ASC",
    "goldSQL": "SELECT name FROM employee ORDER BY age",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT employee.name FROM employee ORDER BY employee.age ASC",
    "goldSQL": "SELECT name FROM employee ORDER BY age",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , employee.city FROM employee GROUP BY employee.city",
    "goldSQL": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , employee.city FROM employee GROUP BY employee.city",
    "goldSQL": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT employee.city FROM employee WHERE employee.age<30 GROUP BY employee.city HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT employee.city FROM employee WHERE employee.age<30 GROUP BY employee.city HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , shop.location FROM shop GROUP BY shop.location",
    "goldSQL": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , shop.location FROM shop GROUP BY shop.location",
    "goldSQL": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.manager_name , shop.district FROM shop ORDER BY shop.number_products DESC LIMIT 1",
    "goldSQL": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.manager_name , shop.district FROM shop ORDER BY shop.number_products DESC LIMIT 1",
    "goldSQL": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MIN( shop.number_products ) , MAX( shop.number_products ) FROM shop",
    "goldSQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MIN( shop.number_products ) , MAX( shop.number_products ) FROM shop",
    "goldSQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.name , shop.location , shop.district FROM shop ORDER BY shop.number_products DESC",
    "goldSQL": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.name , shop.location , shop.district FROM shop ORDER BY shop.number_products DESC",
    "goldSQL": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG( shop.number_products ) FROM shop)",
    "goldSQL": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG( shop.number_products ) FROM shop)",
    "goldSQL": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY evaluation.employee_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY evaluation.employee_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY evaluation.employee_id ORDER BY SUM( evaluation.bonus ) DESC LIMIT 1",
    "goldSQL": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1",
    "goldSQL": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "goldSQL": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)",
    "goldSQL": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY hiring.shop_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY hiring.shop_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.name FROM shop WHERE shop.shop_id NOT IN (SELECT hiring.shop_id FROM hiring)",
    "goldSQL": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.name FROM shop WHERE shop.shop_id NOT IN (SELECT hiring.shop_id FROM hiring)",
    "goldSQL": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.name , COUNT( * ) FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY hiring.shop_id",
    "goldSQL": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) , shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.name",
    "goldSQL": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT SUM( evaluation.bonus ) FROM evaluation",
    "goldSQL": "SELECT sum(bonus) FROM evaluation",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT SUM( evaluation.bonus ) FROM evaluation",
    "goldSQL": "SELECT sum(bonus) FROM evaluation",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT * FROM hiring",
    "goldSQL": "SELECT * FROM hiring",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT * FROM hiring",
    "goldSQL": "SELECT * FROM hiring",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.district FROM shop WHERE shop.number_products<3000 INTERSECT SELECT shop.district FROM shop WHERE shop.number_products > 10000",
    "goldSQL": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT shop.district FROM shop WHERE shop.number_products<3000 INTERSECT SELECT shop.district FROM shop WHERE shop.number_products > 10000",
    "goldSQL": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT shop.location ) FROM shop",
    "goldSQL": "SELECT count(DISTINCT LOCATION) FROM shop",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT shop.location ) FROM shop",
    "goldSQL": "SELECT count(DISTINCT LOCATION) FROM shop",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM documents",
    "goldSQL": "SELECT count(*) FROM Documents",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM documents",
    "goldSQL": "SELECT count(*) FROM Documents",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_id , documents.document_name , documents.document_description FROM documents",
    "goldSQL": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_id , documents.document_name , documents.document_description FROM documents",
    "goldSQL": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_name , documents.template_id FROM documents WHERE documents.document_description LIKE '%w%'",
    "goldSQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_name , documents.template_id FROM documents WHERE documents.document_description LIKE '%w%'",
    "goldSQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_id , documents.template_id , documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV'",
    "goldSQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_id , documents.template_id , documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV'",
    "goldSQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT documents.template_id ) FROM documents",
    "goldSQL": "SELECT count(DISTINCT template_id) FROM Documents",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT documents.template_id ) FROM documents",
    "goldSQL": "SELECT count(DISTINCT template_id) FROM Documents",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'",
    "goldSQL": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'",
    "goldSQL": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.template_id , COUNT( * ) FROM documents GROUP BY documents.template_id",
    "goldSQL": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.template_id , COUNT( * ) FROM documents GROUP BY documents.template_id",
    "goldSQL": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_id , templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY documents.template_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_id , templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY documents.template_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.template_id FROM documents GROUP BY documents.template_id HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.template_id FROM documents GROUP BY documents.template_id HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_id FROM templates EXCEPT SELECT documents.template_id FROM documents",
    "goldSQL": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_id FROM templates EXCEPT SELECT documents.template_id FROM documents",
    "goldSQL": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM templates",
    "goldSQL": "SELECT count(*) FROM Templates",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM templates",
    "goldSQL": "SELECT count(*) FROM Templates",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_id , templates.version_number , templates.template_type_code FROM templates",
    "goldSQL": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_id , templates.version_number , templates.template_type_code FROM templates",
    "goldSQL": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT templates.template_type_code FROM templates",
    "goldSQL": "SELECT DISTINCT template_type_code FROM Templates",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT templates.template_type_code FROM templates",
    "goldSQL": "SELECT DISTINCT template_type_code FROM Templates",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_id FROM templates WHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT'",
    "goldSQL": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_id FROM templates WHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT'",
    "goldSQL": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM templates WHERE templates.template_type_code = 'CV'",
    "goldSQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM templates WHERE templates.template_type_code = 'CV'",
    "goldSQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.version_number , templates.template_type_code FROM templates WHERE templates.version_number > 5",
    "goldSQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.version_number , templates.template_type_code FROM templates WHERE templates.version_number > 5",
    "goldSQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code , COUNT( * ) FROM templates GROUP BY templates.template_type_code",
    "goldSQL": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code , COUNT( * ) FROM templates GROUP BY templates.template_type_code",
    "goldSQL": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code FROM templates GROUP BY templates.template_type_code ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code FROM templates GROUP BY templates.template_type_code ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code FROM templates GROUP BY templates.template_type_code HAVING COUNT( * )<3",
    "goldSQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code FROM templates GROUP BY templates.template_type_code HAVING COUNT( * )<3",
    "goldSQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.version_number , templates.template_type_code FROM templates ORDER BY templates.version_number ASC LIMIT 1",
    "goldSQL": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT templates.version_number , templates.template_type_code FROM templates ORDER BY templates.version_number ASC LIMIT 1",
    "goldSQL": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base'",
    "goldSQL": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base'",
    "goldSQL": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "goldSQL": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'",
    "goldSQL": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code , COUNT( * ) FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_type_code",
    "goldSQL": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code , COUNT( * ) FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_type_code",
    "goldSQL": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_type_code ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_type_code ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code FROM templates EXCEPT SELECT templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id",
    "goldSQL": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_type_code FROM templates EXCEPT SELECT templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id",
    "goldSQL": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT ref_template_types.template_type_code , ref_template_types.template_type_description FROM ref_template_types",
    "goldSQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT ref_template_types.template_type_code , ref_template_types.template_type_description FROM ref_template_types",
    "goldSQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code = 'AD'",
    "goldSQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code = 'AD'",
    "goldSQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_description = 'Book'",
    "goldSQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_description = 'Book'",
    "goldSQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id",
    "goldSQL": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN documents ON ref_template_types.template_type_code = documents.template_id",
    "goldSQL": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'Presentation'",
    "goldSQL": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT templates.template_id FROM templates WHERE ref_template_types.template_type_description = 'Presentation'",
    "goldSQL": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM paragraphs",
    "goldSQL": "SELECT count(*) FROM Paragraphs",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM paragraphs",
    "goldSQL": "SELECT count(*) FROM Paragraphs",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Summer Show'",
    "goldSQL": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Summer Show'",
    "goldSQL": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.other_details FROM paragraphs WHERE paragraphs.paragraph_text = 'Korea'",
    "goldSQL": "select other_details from paragraphs where paragraph_text like 'korea'",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT paragraphs.other_details FROM paragraphs WHERE paragraphs.paragraph_text LIKE '%Korea%'",
    "goldSQL": "select other_details from paragraphs where paragraph_text like 'korea'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.paragraph_id , paragraphs.paragraph_text FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Welcome to NY'",
    "goldSQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.paragraph_id , paragraphs.paragraph_text FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Welcome to NY'",
    "goldSQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.paragraph_text FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Customer reviews'",
    "goldSQL": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.paragraph_text FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Customer reviews'",
    "goldSQL": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.document_id , COUNT( * ) FROM paragraphs GROUP BY paragraphs.document_id ORDER BY paragraphs.document_id ASC",
    "goldSQL": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.document_id , COUNT( * ) FROM paragraphs GROUP BY paragraphs.document_id ORDER BY paragraphs.document_id ASC",
    "goldSQL": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_id , documents.document_name , COUNT( * ) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id",
    "goldSQL": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_id , documents.document_name , COUNT( * ) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id",
    "goldSQL": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_id , documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY paragraphs.document_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT documents.document_id , documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id HAVING COUNT( * ) BETWEEN 1 and 2",
    "goldSQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id HAVING COUNT( * ) BETWEEN 1 and 2",
    "goldSQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.document_id FROM paragraphs WHERE paragraphs.paragraph_text = 'Brazil' INTERSECT SELECT paragraphs.document_id FROM paragraphs WHERE paragraphs.paragraph_text = 'Ireland'",
    "goldSQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT paragraphs.document_id FROM paragraphs WHERE paragraphs.paragraph_text = 'Brazil' INTERSECT SELECT paragraphs.document_id FROM paragraphs WHERE paragraphs.paragraph_text LIKE '%Ireland%'",
    "goldSQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM teacher",
    "goldSQL": "SELECT count(*) FROM teacher",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM teacher",
    "goldSQL": "SELECT count(*) FROM teacher",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name FROM teacher ORDER BY teacher.age ASC",
    "goldSQL": "SELECT Name FROM teacher ORDER BY Age ASC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name FROM teacher ORDER BY teacher.age ASC",
    "goldSQL": "SELECT Name FROM teacher ORDER BY Age ASC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.age , teacher.hometown FROM teacher",
    "goldSQL": "SELECT Age ,  Hometown FROM teacher",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.age , teacher.hometown FROM teacher",
    "goldSQL": "SELECT Age ,  Hometown FROM teacher",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name FROM teacher WHERE teacher.hometown != 'Little Lever Urban District'",
    "goldSQL": "select name from teacher where hometown != \"little lever urban district\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT teacher.name FROM teacher WHERE teacher.hometown != 'Little Lever Urban District'",
    "goldSQL": "select name from teacher where hometown != \"little lever urban district\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT teacher.name FROM teacher WHERE teacher.age = 32 OR teacher.age = 33",
    "goldSQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name FROM teacher WHERE teacher.age = 32 OR teacher.age = 33",
    "goldSQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.hometown FROM teacher ORDER BY teacher.age ASC LIMIT 1",
    "goldSQL": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name , teacher.hometown FROM teacher ORDER BY teacher.age ASC LIMIT 1",
    "goldSQL": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT teacher.hometown , COUNT( * ) FROM teacher GROUP BY teacher.hometown",
    "goldSQL": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.hometown , COUNT( * ) FROM teacher GROUP BY teacher.hometown",
    "goldSQL": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name , course.course FROM course_arrange JOIN course ON course_arrange.course_id = course.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id",
    "goldSQL": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name , course.course FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id",
    "goldSQL": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id ORDER BY teacher.name ASC",
    "goldSQL": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT teacher.name , course.course FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id ORDER BY teacher.name ASC",
    "goldSQL": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course.course = 'math'",
    "goldSQL": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT teacher.name FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course.course = 'math'",
    "goldSQL": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT teacher.name , COUNT( * ) FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.name",
    "goldSQL": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT teacher.name , COUNT( * ) FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.name",
    "goldSQL": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT teacher.name FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.name HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.name HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)",
    "goldSQL": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT teacher.name FROM teacher WHERE teacher.teacher_id NOT IN (SELECT course_arrange.teacher_id FROM course_arrange)",
    "goldSQL": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM visitor WHERE visitor.age<30",
    "goldSQL": "SELECT count(*) FROM visitor WHERE age  <  30",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT visitor.name FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.level_of_membership DESC",
    "goldSQL": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( visitor.age ) FROM visitor WHERE visitor.level_of_membership <= 4",
    "goldSQL": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT visitor.name , visitor.level_of_membership FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.age DESC",
    "goldSQL": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT museum.museum_id , museum.name FROM museum ORDER BY museum.num_of_staff DESC LIMIT 1",
    "goldSQL": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( museum.num_of_staff ) FROM museum WHERE museum.open_year<2009",
    "goldSQL": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT museum.open_year , museum.num_of_staff FROM museum WHERE museum.name = 'Plaza Museum'",
    "goldSQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT museum.name FROM museum WHERE museum.num_of_staff > (SELECT MIN( museum.num_of_staff ) FROM museum WHERE museum.open_year > 2010)",
    "goldSQL": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT visitor.id , visitor.name , visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT visitor.id , visitor.name , visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visit.visitor_id ORDER BY SUM( visit.total_spent ) DESC LIMIT 1",
    "goldSQL": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT visit.museum_id , museum.name FROM visit JOIN museum ON visit.museum_id = museum.museum_id GROUP BY visit.museum_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT museum.name FROM museum WHERE museum.museum_id NOT IN (SELECT visit.museum_id FROM visit)",
    "goldSQL": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT visitor.name , visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id ORDER BY SUM( visit.num_of_ticket ) DESC LIMIT 1",
    "goldSQL": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT AVG( visit.num_of_ticket ) , MAX( visit.num_of_ticket ) FROM visit",
    "goldSQL": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT SUM( visit.total_spent ) FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visitor.level_of_membership = 1",
    "goldSQL": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year<2009 INTERSECT SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2011",
    "goldSQL": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM visit WHERE visit.museum_id NOT IN (SELECT museum.museum_id FROM museum WHERE museum.open_year > 2010)",
    "goldSQL": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM museum WHERE museum.open_year > 2013 OR museum.open_year<2008",
    "goldSQL": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM players",
    "goldSQL": "SELECT count(*) FROM players",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM players",
    "goldSQL": "SELECT count(*) FROM players",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM matches",
    "goldSQL": "SELECT count(*) FROM matches",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM matches",
    "goldSQL": "SELECT count(*) FROM matches",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , players.birth_date FROM players WHERE players.country_code = 'USA'",
    "goldSQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , players.birth_date FROM players WHERE players.country_code = 'USA'",
    "goldSQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( matches.loser_age ) , AVG( matches.winner_age ) FROM matches",
    "goldSQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( matches.loser_age ) , AVG( matches.winner_age ) FROM matches",
    "goldSQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( matches.winner_rank ) FROM matches",
    "goldSQL": "SELECT avg(winner_rank) FROM matches",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( matches.winner_rank ) FROM matches",
    "goldSQL": "SELECT avg(winner_rank) FROM matches",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT MIN( matches.loser_rank ) FROM matches",
    "goldSQL": "SELECT min(loser_rank) FROM matches",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT MIN( matches.loser_rank ) FROM matches",
    "goldSQL": "SELECT min(loser_rank) FROM matches",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT players.country_code ) FROM players",
    "goldSQL": "SELECT count(DISTINCT country_code) FROM players",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT players.country_code ) FROM players",
    "goldSQL": "SELECT count(DISTINCT country_code) FROM players",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT matches.loser_name ) FROM matches",
    "goldSQL": "SELECT count(DISTINCT loser_name) FROM matches",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT matches.loser_name ) FROM matches",
    "goldSQL": "SELECT count(DISTINCT loser_name) FROM matches",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING COUNT( * ) > 10",
    "goldSQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING COUNT( * ) > 10",
    "goldSQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT matches.winner_name FROM matches WHERE matches.year = 2013 INTERSECT SELECT matches.winner_name FROM matches WHERE matches.year = 2016",
    "goldSQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2013 INTERSECT SELECT players.first_name , players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2016",
    "goldSQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM matches WHERE matches.year = 2013 OR matches.year = 2016",
    "goldSQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM matches WHERE matches.year = 2013 OR matches.year = 2016",
    "goldSQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.country_code , players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' INTERSECT SELECT players.country_code , players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open'",
    "goldSQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' INTERSECT SELECT players.first_name , players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open'",
    "goldSQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1",
    "goldSQL": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT players.first_name , players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1",
    "goldSQL": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT players.first_name , players.last_name FROM players ORDER BY players.birth_date ASC",
    "goldSQL": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , players.last_name FROM players ORDER BY players.birth_date ASC",
    "goldSQL": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date ASC",
    "goldSQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , players.last_name FROM players WHERE players.hand = 'left' ORDER BY players.birth_date ASC",
    "goldSQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT players.first_name , players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT players.first_name , players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1",
    "goldSQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT matches.winner_name , matches.winner_rank_points FROM matches GROUP BY matches.winner_name ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT matches.winner_name , matches.winner_rank_points FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY matches.winner_name ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT matches.winner_name FROM matches WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1",
    "goldSQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT matches.winner_name FROM matches WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1",
    "goldSQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT matches.loser_name , matches.winner_name FROM matches ORDER BY matches.minutes DESC LIMIT 1",
    "goldSQL": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT matches.winner_name , matches.loser_name FROM matches ORDER BY matches.minutes DESC LIMIT 1",
    "goldSQL": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , AVG( rankings.ranking ) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name",
    "goldSQL": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , AVG( rankings.ranking ) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id",
    "goldSQL": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT SUM( rankings.ranking_points ) , players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "goldSQL": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , SUM( rankings.ranking_points ) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
    "goldSQL": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , players.country_code FROM players GROUP BY players.country_code",
    "goldSQL": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , players.country_code FROM players GROUP BY players.country_code",
    "goldSQL": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT( * ) > 50",
    "goldSQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT( * ) > 50",
    "goldSQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT rankings.ranking_date , SUM( rankings.tours ) FROM rankings GROUP BY rankings.ranking_date",
    "goldSQL": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT rankings.ranking_date , SUM( rankings.tours ) FROM rankings GROUP BY rankings.ranking_date",
    "goldSQL": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , matches.year FROM matches GROUP BY matches.year",
    "goldSQL": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , matches.year FROM matches GROUP BY matches.year",
    "goldSQL": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT matches.winner_name , matches.winner_rank FROM matches ORDER BY matches.winner_seed ASC LIMIT 3",
    "goldSQL": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT matches.winner_name , matches.winner_rank FROM matches ORDER BY players.birth_date DESC LIMIT 3",
    "goldSQL": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT matches.winner_id ) FROM matches WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_level = 'left'",
    "goldSQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM matches WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'left'",
    "goldSQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT players.first_name , players.country_code , players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1",
    "goldSQL": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.first_name , players.country_code , players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1",
    "goldSQL": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.hand , COUNT( * ) FROM players GROUP BY players.hand",
    "goldSQL": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT players.hand , COUNT( * ) FROM players GROUP BY players.hand",
    "goldSQL": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE battle.result = 'Captured'",
    "goldSQL": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT ship.name , ship.tonnage FROM ship ORDER BY ship.name DESC",
    "goldSQL": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT battle.name , battle.date , battle.result FROM battle",
    "goldSQL": "SELECT name ,  date FROM battle",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT MAX( death.killed ) , MIN( death.killed ) FROM death",
    "goldSQL": "SELECT max(killed) ,  min(killed) FROM death",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( death.injured ) FROM death",
    "goldSQL": "SELECT avg(injured) FROM death",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT death.id , death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'",
    "goldSQL": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT battle.name , battle.result FROM battle WHERE battle.bulgarian_commander != 'Boril'",
    "goldSQL": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT battle.id , battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'",
    "goldSQL": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT battle.id , battle.name FROM battle JOIN death ON battle.id = death.id GROUP BY battle.id HAVING SUM( death.killed ) > 10",
    "goldSQL": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT ship.id , ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id ORDER BY SUM( death.injured ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I'",
    "goldSQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT battle.result ) FROM battle",
    "goldSQL": "SELECT count(DISTINCT RESULT) FROM battle",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = 225)",
    "goldSQL": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT battle.name , battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'Lettice' INTERSECT SELECT battle.name , battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'HMS Atalanta'",
    "goldSQL": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT battle.name , battle.result , battle.bulgarian_commander FROM battle EXCEPT SELECT battle.name , battle.result , battle.bulgarian_commander FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location = 'English Channel'",
    "goldSQL": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT death.note FROM death WHERE death.note LIKE '%East%'",
    "goldSQL": "SELECT note FROM death WHERE note LIKE '%East%'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT addresses.line_1 , addresses.line_2 FROM addresses",
    "goldSQL": "SELECT line_1 ,  line_2 FROM addresses",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT addresses.line_1 , addresses.line_2 FROM addresses",
    "goldSQL": "SELECT line_1 ,  line_2 FROM addresses",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM courses",
    "goldSQL": "SELECT count(*) FROM Courses",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM courses",
    "goldSQL": "SELECT count(*) FROM Courses",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT courses.course_description FROM courses WHERE courses.course_name = 'math'",
    "goldSQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT courses.course_description FROM courses WHERE courses.course_name = 'math'",
    "goldSQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT addresses.zip_postcode FROM addresses WHERE addresses.city = 'Port Chelsea'",
    "goldSQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT addresses.zip_postcode FROM addresses WHERE addresses.city = 'Port Chelsea'",
    "goldSQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT departments.department_name , degree_programs.department_id FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id GROUP BY degree_programs.department_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT departments.department_name , degree_programs.department_id FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id GROUP BY degree_programs.department_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT degree_programs.department_id ) FROM degree_programs",
    "goldSQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT degree_programs.department_id ) FROM degree_programs",
    "goldSQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT degree_programs.degree_summary_name ) FROM degree_programs",
    "goldSQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT degree_programs.department_id ) FROM degree_programs",
    "goldSQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering'",
    "goldSQL": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering'",
    "goldSQL": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT sections.section_name , sections.section_description FROM sections",
    "goldSQL": "SELECT section_name ,  section_description FROM Sections",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT sections.section_name , sections.section_description FROM sections",
    "goldSQL": "SELECT section_name ,  section_description FROM Sections",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT courses.course_name , courses.course_id FROM courses JOIN sections ON courses.course_id = sections.course_id GROUP BY sections.course_id HAVING COUNT( * ) <= 2",
    "goldSQL": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT courses.course_name , courses.course_id FROM courses JOIN sections ON courses.course_id = sections.course_id GROUP BY sections.course_id HAVING COUNT( * )<2",
    "goldSQL": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT sections.section_name FROM sections ORDER BY sections.section_name ASC",
    "goldSQL": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT sections.section_name FROM sections ORDER BY sections.section_name ASC",
    "goldSQL": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT semesters.semester_name , semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT semesters.semester_name , semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT departments.department_description FROM departments WHERE departments.department_name LIKE '%computer%'",
    "goldSQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT departments.department_description FROM departments WHERE departments.department_name LIKE '%computer%'",
    "goldSQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT students.first_name , students.middle_name , students.last_name , students.student_id FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY students.student_id HAVING COUNT( * ) = 2",
    "goldSQL": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT students.first_name , students.last_name , student_enrolment.student_id FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id HAVING COUNT( * ) = 2",
    "goldSQL": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.first_name , students.middle_name , students.last_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id JOIN students ON student_enrolment.student_id = students.student_id WHERE degree_programs.degree_summary_name = 'Bachelor'",
    "goldSQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.first_name , students.middle_name , students.last_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id JOIN students ON student_enrolment.student_id = students.student_id WHERE degree_programs.degree_summary_name = 'Bachelors'",
    "goldSQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT courses.course_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_name ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT degree_programs.degree_program_id , degree_programs.degree_summary_description FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT degree_programs.degree_program_id , degree_programs.degree_summary_description FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.student_id , students.first_name , students.last_name , COUNT( * ) FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY students.student_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.first_name , students.last_name , COUNT( * ) FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT semesters.semester_name FROM semesters WHERE semesters.semester_id NOT IN (SELECT student_enrolment.semester_id FROM student_enrolment)",
    "goldSQL": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT semesters.semester_name FROM semesters WHERE semesters.semester_id NOT IN (SELECT student_enrolment.semester_id FROM student_enrolment)",
    "goldSQL": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "goldSQL": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id",
    "goldSQL": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.last_name FROM students WHERE students.permanent_address_id NOT IN (SELECT addresses.address_id FROM addresses WHERE addresses.state_province_county = 'North Carolina')",
    "goldSQL": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.last_name FROM addresses WHERE addresses.state_province_county = 'North Carolina' EXCEPT SELECT students.last_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina'",
    "goldSQL": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT transcripts.transcript_id , transcripts.transcript_date FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT semesters.semester_name , transcripts.transcript_date FROM transcript_contents JOIN transcripts ON transcript_contents.transcript_id = transcripts.transcript_id GROUP BY transcript_contents.transcript_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward'",
    "goldSQL": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward'",
    "goldSQL": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.first_name , students.middle_name , students.last_name FROM students ORDER BY students.date_first_registered ASC LIMIT 1",
    "goldSQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT students.first_name , students.middle_name , students.last_name FROM students ORDER BY students.date_first_registered ASC LIMIT 1",
    "goldSQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT students.first_name , students.middle_name , students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY students.date_first_registered DESC LIMIT 1",
    "goldSQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.first_name , students.middle_name , students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY students.ssn ASC LIMIT 1",
    "goldSQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.first_name FROM students WHERE students.permanent_address_id NOT IN (SELECT DISTINCT students.current_address_id FROM students)",
    "goldSQL": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.first_name FROM students WHERE students.permanent_address_id != (SELECT students.current_address_id FROM students GROUP BY students.permanent_address_id)",
    "goldSQL": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.current_address_id , addresses.line_1 FROM addresses JOIN students ON addresses.address_id = students.permanent_address_id GROUP BY students.current_address_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT addresses.address_id , addresses.line_1 , addresses.line_2 FROM addresses JOIN students ON addresses.address_id = students.permanent_address_id GROUP BY addresses.address_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( transcripts.transcript_date ) FROM transcripts WHERE transcripts.transcript_date > (SELECT AVG( transcripts.other_details ) FROM transcripts)",
    "goldSQL": "SELECT avg(transcript_date) FROM Transcripts",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT AVG( transcripts.transcript_date ) FROM transcripts",
    "goldSQL": "SELECT avg(transcript_date) FROM Transcripts",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT transcripts.other_details , transcripts.other_details , transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY transcripts.other_details ASC LIMIT 1",
    "goldSQL": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT transcripts.other_details , transcripts.transcript_date FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id ORDER BY transcripts.transcript_date ASC LIMIT 1",
    "goldSQL": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM transcripts",
    "goldSQL": "SELECT count(*) FROM Transcripts",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM transcripts",
    "goldSQL": "SELECT count(*) FROM Transcripts",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT transcripts.transcript_date FROM transcripts ORDER BY transcripts.transcript_date DESC LIMIT 1",
    "goldSQL": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT transcripts.transcript_date FROM transcripts ORDER BY transcripts.transcript_date DESC LIMIT 1",
    "goldSQL": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT student_enrolment_courses.course_id , COUNT( * ) FROM student_enrolment_courses JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT student_enrolment_courses.course_id , COUNT( * ) FROM student_enrolment_courses JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY student_enrolment_courses.student_enrolment_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT transcripts.transcript_id , transcripts.transcript_date FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT transcripts.transcript_id , transcripts.transcript_date FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Master students' INTERSECT SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor'",
    "goldSQL": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Masters' INTERSECT SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelors'",
    "goldSQL": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT students.current_address_id ) FROM students",
    "goldSQL": "SELECT count(DISTINCT current_address_id) FROM Students",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT students.current_address_id ) FROM students",
    "goldSQL": "SELECT count(DISTINCT current_address_id) FROM Students",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT students.other_student_details FROM students ORDER BY students.other_student_details ASC",
    "goldSQL": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT student_enrolment.other_details FROM student_enrolment ORDER BY student_enrolment.other_details ASC",
    "goldSQL": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT sections.section_description FROM sections WHERE sections.section_name = 'h'",
    "goldSQL": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT sections.section_description FROM sections WHERE sections.section_name = 'h'",
    "goldSQL": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT students.first_name FROM addresses JOIN students ON addresses.address_id = students.permanent_address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'",
    "goldSQL": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT students.first_name FROM addresses JOIN students ON addresses.address_id = students.permanent_address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'",
    "goldSQL": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT cartoon.title FROM cartoon ORDER BY cartoon.title ASC",
    "goldSQL": "SELECT Title FROM Cartoon ORDER BY title",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT cartoon.title FROM cartoon ORDER BY cartoon.title ASC",
    "goldSQL": "SELECT Title FROM Cartoon ORDER BY title",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT * FROM cartoon WHERE cartoon.directed_by = 'Ben Jones'",
    "goldSQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones'",
    "goldSQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cartoon WHERE cartoon.written_by = 'Joseph Kuhr'",
    "goldSQL": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM cartoon WHERE cartoon.written_by = 'Joseph Kuhr'",
    "goldSQL": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT cartoon.title , cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date ASC",
    "goldSQL": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT cartoon.title , cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date ASC",
    "goldSQL": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti'",
    "goldSQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti'",
    "goldSQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.country , COUNT( * ) FROM tv_channel GROUP BY tv_channel.country ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.country , COUNT( * ) FROM tv_channel GROUP BY tv_channel.country ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT tv_channel.series_name ) , COUNT( DISTINCT tv_channel.content ) FROM tv_channel",
    "goldSQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT tv_series.channel ) FROM tv_channel",
    "goldSQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT tv_channel.content FROM tv_channel WHERE tv_channel.series_name = 'Sky Radio'",
    "goldSQL": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.content FROM tv_channel WHERE tv_channel.series_name = 'Sky Radio'",
    "goldSQL": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.series_name = 'Sky Radio'",
    "goldSQL": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.series_name = 'Sky Radio'",
    "goldSQL": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM tv_channel WHERE tv_channel.language = 'English'",
    "goldSQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM tv_channel WHERE tv_channel.language = 'English'",
    "goldSQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.language , COUNT( * ) FROM tv_channel GROUP BY tv_channel.language ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.language , COUNT( * ) FROM tv_channel GROUP BY tv_channel.language ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.language , COUNT( * ) FROM tv_channel GROUP BY tv_channel.language",
    "goldSQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.language , COUNT( * ) FROM tv_channel GROUP BY tv_channel.language",
    "goldSQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = 'The Rise of the Blue Beetle'",
    "goldSQL": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = 'The Rise of the Blue Beetle'",
    "goldSQL": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT cartoon.title FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE tv_channel.series_name = 'Sky Radio'",
    "goldSQL": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT cartoon.title FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE tv_channel.series_name = 'Sky Radio'",
    "goldSQL": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_series.episode FROM tv_series ORDER BY tv_series.rating ASC",
    "goldSQL": "SELECT Episode FROM TV_series ORDER BY rating",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_series.episode FROM tv_series ORDER BY tv_series.rating ASC",
    "goldSQL": "SELECT Episode FROM TV_series ORDER BY rating",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_series.episode , tv_series.rating FROM tv_series ORDER BY tv_series.rating DESC LIMIT 3",
    "goldSQL": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_series.episode , tv_series.rating FROM tv_series ORDER BY tv_series.rating DESC LIMIT 3",
    "goldSQL": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MIN( tv_series.share ) , MAX( tv_series.share ) FROM tv_series",
    "goldSQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT MAX( tv_series.share ) , MIN( tv_series.share ) FROM tv_series",
    "goldSQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_series.air_date FROM tv_series WHERE tv_series.episode = 'A Love of a Lifetime'",
    "goldSQL": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_series.air_date FROM tv_series WHERE tv_series.episode = 'A Love of a Lifetime'",
    "goldSQL": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_series.weekly_rank FROM tv_series WHERE tv_series.episode = 'A Love of a Lifetime'",
    "goldSQL": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_series.weekly_rank FROM tv_series WHERE tv_series.episode = 'A Love of a Lifetime'",
    "goldSQL": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = 'A Love of a Lifetime'",
    "goldSQL": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_series.episode = 'A Love of a Lifetime'",
    "goldSQL": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_series.episode FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_channel.series_name = 'Sky Radio'",
    "goldSQL": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_series.episode FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_channel.series_name = 'Sky Radio'",
    "goldSQL": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , cartoon.directed_by FROM cartoon GROUP BY cartoon.directed_by",
    "goldSQL": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , cartoon.directed_by FROM cartoon GROUP BY cartoon.directed_by",
    "goldSQL": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT cartoon.production_code , cartoon.channel FROM cartoon ORDER BY cartoon.original_air_date DESC LIMIT 1",
    "goldSQL": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT cartoon.production_code , cartoon.channel FROM cartoon ORDER BY cartoon.original_air_date DESC LIMIT 1",
    "goldSQL": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.package_option , tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv LIKE '%high%'",
    "goldSQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT tv_channel.package_option , tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_channel.hight_definition_tv = 'high definition TV'",
    "goldSQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'",
    "goldSQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'",
    "goldSQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.country FROM tv_channel EXCEPT SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'",
    "goldSQL": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.country FROM tv_channel EXCEPT SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'",
    "goldSQL": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.series_name , tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' INTERSECT SELECT tv_channel.series_name , tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Michael Chang'",
    "goldSQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.series_name , tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' INTERSECT SELECT tv_channel.series_name , tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Michael Chang'",
    "goldSQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.pixel_aspect_ratio_par , tv_channel.country FROM tv_channel WHERE tv_channel.language != 'English'",
    "goldSQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.pixel_aspect_ratio_par , tv_channel.country FROM tv_channel WHERE tv_channel.language != 'English'",
    "goldSQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.id FROM tv_channel GROUP BY tv_channel.id HAVING COUNT( * ) > 2",
    "goldSQL": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT tv_channel.id FROM tv_channel GROUP BY tv_series.channel HAVING COUNT( * ) > 2",
    "goldSQL": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT tv_channel.id FROM tv_channel EXCEPT SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones'",
    "goldSQL": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.id FROM tv_channel EXCEPT SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones'",
    "goldSQL": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT tv_channel.package_option FROM tv_channel EXCEPT SELECT tv_channel.package_option FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones'",
    "goldSQL": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT tv_channel.package_option FROM tv_channel EXCEPT SELECT tv_channel.package_option FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones'",
    "goldSQL": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM poker_player",
    "goldSQL": "SELECT count(*) FROM poker_player",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM poker_player",
    "goldSQL": "SELECT count(*) FROM poker_player",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT poker_player.earnings FROM poker_player ORDER BY poker_player.earnings DESC",
    "goldSQL": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT poker_player.earnings FROM poker_player ORDER BY poker_player.earnings DESC",
    "goldSQL": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT poker_player.final_table_made , poker_player.best_finish FROM poker_player",
    "goldSQL": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT poker_player.final_table_made , poker_player.best_finish FROM poker_player",
    "goldSQL": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( poker_player.earnings ) FROM poker_player",
    "goldSQL": "SELECT avg(Earnings) FROM poker_player",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( poker_player.earnings ) FROM poker_player",
    "goldSQL": "SELECT avg(Earnings) FROM poker_player",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT poker_player.money_rank FROM poker_player ORDER BY poker_player.earnings DESC LIMIT 1",
    "goldSQL": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT poker_player.money_rank FROM poker_player ORDER BY poker_player.earnings DESC LIMIT 1",
    "goldSQL": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( poker_player.final_table_made ) FROM poker_player WHERE poker_player.earnings<200000",
    "goldSQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( poker_player.final_table_made ) FROM poker_player WHERE poker_player.earnings<200000",
    "goldSQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "goldSQL": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id",
    "goldSQL": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.earnings > 300000",
    "goldSQL": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.earnings > 300000",
    "goldSQL": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC",
    "goldSQL": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.final_table_made ASC",
    "goldSQL": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings ASC LIMIT 1",
    "goldSQL": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings ASC LIMIT 1",
    "goldSQL": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT poker_player.money_rank FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY people.height DESC LIMIT 1",
    "goldSQL": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT poker_player.money_rank FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY people.height DESC LIMIT 1",
    "goldSQL": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( poker_player.earnings ) FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE people.height > 200",
    "goldSQL": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( poker_player.earnings ) FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE people.height > 200",
    "goldSQL": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings DESC",
    "goldSQL": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings DESC",
    "goldSQL": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.nationality , COUNT( * ) FROM people GROUP BY people.nationality",
    "goldSQL": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.nationality , COUNT( * ) FROM people GROUP BY people.nationality",
    "goldSQL": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.nationality FROM people GROUP BY people.nationality ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.nationality FROM people GROUP BY people.nationality ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.nationality FROM people GROUP BY people.nationality HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.nationality FROM people GROUP BY people.nationality HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name , people.birth_date FROM people ORDER BY people.name ASC",
    "goldSQL": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name , people.birth_date FROM people ORDER BY people.name ASC",
    "goldSQL": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM people WHERE people.nationality != 'Russia'",
    "goldSQL": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM people WHERE people.nationality != 'Russia'",
    "goldSQL": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM people WHERE people.people_id NOT IN (SELECT poker_player.people_id FROM poker_player)",
    "goldSQL": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT people.name FROM people WHERE people.people_id NOT IN (SELECT poker_player.people_id FROM poker_player)",
    "goldSQL": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT people.nationality ) FROM people",
    "goldSQL": "SELECT count(DISTINCT Nationality) FROM people",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT people.nationality ) FROM people",
    "goldSQL": "SELECT count(DISTINCT Nationality) FROM people",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM area_code_state",
    "goldSQL": "SELECT count(*) FROM area_code_state",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT contestants.contestant_number , contestants.contestant_name FROM contestants ORDER BY contestants.contestant_name DESC",
    "goldSQL": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT votes.vote_id , votes.phone_number , votes.state FROM votes",
    "goldSQL": "SELECT vote_id ,  phone_number ,  state FROM votes",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( area_code_state.area_code ) , MIN( area_code_state.area_code ) FROM area_code_state",
    "goldSQL": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( votes.created ) FROM votes WHERE votes.state = 'CA'",
    "goldSQL": "SELECT max(created) FROM votes WHERE state  =  'CA'",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT contestants.contestant_name FROM contestants WHERE contestants.contestant_name != 'Jessie Alloway'",
    "goldSQL": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT votes.state , votes.created FROM votes",
    "goldSQL": "SELECT DISTINCT state ,  created FROM votes",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT contestants.contestant_number , contestants.contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT contestants.contestant_number , contestants.contestant_name FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number GROUP BY contestants.contestant_number ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM votes WHERE votes.state = 'NY' OR votes.state = 'CA'",
    "goldSQL": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM contestants WHERE contestants.contestant_number NOT IN (SELECT votes.contestant_number FROM votes)",
    "goldSQL": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY votes.state ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT votes.created , votes.state , votes.phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha'",
    "goldSQL": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT area_code_state.area_code FROM votes JOIN area_code_state ON votes.state = area_code_state.state JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha' INTERSECT SELECT area_code_state.area_code FROM votes JOIN area_code_state ON votes.state = area_code_state.state JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Kelly Clauss'",
    "goldSQL": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT contestants.contestant_name FROM contestants WHERE contestants.contestant_name LIKE '%Al%'",
    "goldSQL": "select contestant_name from contestants where contestant_name like \"%al%\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name FROM country WHERE country.indepyear > 1950",
    "goldSQL": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name FROM country WHERE country.indepyear > 1950",
    "goldSQL": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM country WHERE country.governmentform = 'republic'",
    "goldSQL": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM country WHERE country.governmentform = 'republic'",
    "goldSQL": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT SUM( country.surfacearea ) FROM country WHERE country.region = 'Caribbean'",
    "goldSQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT SUM( country.surfacearea ) FROM country WHERE country.continent = 'Carribean'",
    "goldSQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.continent FROM country WHERE country.name = 'Anguilla'",
    "goldSQL": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.continent FROM country WHERE country.name = 'Anguilla'",
    "goldSQL": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul'",
    "goldSQL": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul'",
    "goldSQL": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = 'Aruba' GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.language FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = 'Aruba' GROUP BY countrylanguage.language",
    "goldSQL": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.population , country.lifeexpectancy FROM country WHERE country.name = 'Brazil'",
    "goldSQL": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.population , country.lifeexpectancy FROM country WHERE country.name = 'Brazil'",
    "goldSQL": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.region , country.population FROM country WHERE country.name = 'Angola'",
    "goldSQL": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.region , country.population FROM country WHERE country.name = 'Angola'",
    "goldSQL": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( country.lifeexpectancy ) FROM country WHERE country.region = 'Central Africa'",
    "goldSQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( country.lifeexpectancy ) FROM country WHERE country.region = 'Central Africa'",
    "goldSQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name FROM country WHERE country.region = 'Asia' ORDER BY country.lifeexpectancy ASC LIMIT 1",
    "goldSQL": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name FROM country WHERE country.continent = 'Asia' ORDER BY country.lifeexpectancy ASC LIMIT 1",
    "goldSQL": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT SUM( country.population ) , MAX( country.gnp ) FROM country WHERE country.continent = 'Asia'",
    "goldSQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( country.gnp ) FROM country WHERE country.continent = 'Asia' AND country.region = 'Asia,'",
    "goldSQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT AVG( country.lifeexpectancy ) FROM country WHERE country.name = 'African' AND country.governmentform = 'republics'",
    "goldSQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT AVG( country.lifeexpectancy ) FROM country WHERE country.continent = 'republics' AND country.region = 'Africa'",
    "goldSQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT SUM( country.surfacearea ) FROM country WHERE country.continent = 'Asia' OR country.region = 'Europe'",
    "goldSQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT SUM( country.surfacearea ) FROM country WHERE country.continent = 'Asia' OR country.region = 'Europe'",
    "goldSQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT SUM( city.population ) FROM city WHERE city.district = 'Gelderland'",
    "goldSQL": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT SUM( city.population ) FROM city WHERE city.district = 'Gelderland'",
    "goldSQL": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( country.gnp ) , SUM( country.population ) FROM country WHERE country.governmentform = 'US territory'",
    "goldSQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT AVG( country.gnp ) , SUM( country.population ) FROM country WHERE country.region = 'US territory'",
    "goldSQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage",
    "goldSQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage",
    "goldSQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT country.governmentform ) FROM country WHERE country.continent = 'Africa'",
    "goldSQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT country.governmentform ) FROM country WHERE country.continent = 'Africa'",
    "goldSQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT SUM( countrylanguage.language ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba'",
    "goldSQL": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT countrylanguage.language ) FROM city JOIN country ON city.countrycode = country.code WHERE country.name = 'Aruba'",
    "goldSQL": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT countrylanguage.isofficial ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = 'Afghanistan'",
    "goldSQL": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT countrylanguage.isofficial ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Afghanistan'",
    "goldSQL": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY countrylanguage.countrycode ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.continent ORDER BY countrylanguage.language DESC LIMIT 1",
    "goldSQL": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.continent ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM countrylanguage WHERE countrylanguage.language = 'Dutch'",
    "goldSQL": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM countrylanguage WHERE countrylanguage.language = 'English' INTERSECT SELECT COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'Dutch'",
    "goldSQL": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'English' INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'French'",
    "goldSQL": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'English' INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'French'",
    "goldSQL": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'French'",
    "goldSQL": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'French'",
    "goldSQL": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT country.continent ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese'",
    "goldSQL": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT country.continent ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'Chinese'",
    "goldSQL": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.region FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch'",
    "goldSQL": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.region FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'Dutch' OR countrylanguage.language = 'English'",
    "goldSQL": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch'",
    "goldSQL": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.language FROM countrylanguage WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch'",
    "goldSQL": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.continent = 'Asian' GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.continent = 'Asian' GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'republic' GROUP BY countrylanguage.language HAVING COUNT( * ) = 1",
    "goldSQL": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.governmentform = 'republic'",
    "goldSQL": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT city.name FROM city JOIN countrylanguage ON city.id = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1",
    "goldSQL": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT city.name FROM city JOIN countrylanguage ON city.id = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1",
    "goldSQL": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name , country.population , country.lifeexpectancy FROM country WHERE country.region = 'asian' ORDER BY country.surfacearea DESC LIMIT 1",
    "goldSQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name , country.population , country.lifeexpectancy FROM country ORDER BY country.surfacearea DESC LIMIT 1",
    "goldSQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT AVG( country.lifeexpectancy ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English'",
    "goldSQL": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT AVG( country.lifeexpectancy ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English'",
    "goldSQL": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT SUM( country.population ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language != 'English'",
    "goldSQL": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT SUM( country.population ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language != 'English'",
    "goldSQL": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix'",
    "goldSQL": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.isofficial FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix'",
    "goldSQL": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT countrylanguage.isofficial ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear<1930",
    "goldSQL": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT countrylanguage.language ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.indepyear<1930",
    "goldSQL": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name FROM country WHERE country.surfacearea > (SELECT MAX( country.surfacearea ) FROM country WHERE country.region = 'Europe')",
    "goldSQL": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name FROM country WHERE country.surfacearea > (SELECT MAX( country.surfacearea ) FROM country WHERE country.region = 'Europe')",
    "goldSQL": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name FROM country WHERE country.population<(SELECT MIN( country.population ) FROM country WHERE country.region = 'Asia')",
    "goldSQL": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name FROM country WHERE country.population<(SELECT MIN( country.population ) FROM country WHERE country.region = 'Asia')",
    "goldSQL": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "city , country",
    "goldSQL": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "city , country",
    "goldSQL": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language != 'English'",
    "goldSQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language != 'English'",
    "goldSQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language != 'English'",
    "goldSQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language != 'English'",
    "goldSQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND country.governmentform != 'Republic'",
    "goldSQL": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.countrycode FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial != 'Republics'",
    "goldSQL": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT city.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.region = 'European' AND countrylanguage.language != 'English'",
    "goldSQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT city.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.region = 'Europe' AND countrylanguage.isofficial != 'English'",
    "goldSQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.region = 'Asian' AND countrylanguage.language = 'Chinese'",
    "goldSQL": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese'",
    "goldSQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name , country.indepyear , country.surfacearea FROM country ORDER BY country.population ASC LIMIT 1",
    "goldSQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name , country.indepyear , country.surfacearea FROM country ORDER BY country.population ASC LIMIT 1",
    "goldSQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.population , country.name , country.headofstate FROM country ORDER BY country.surfacearea DESC LIMIT 1",
    "goldSQL": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name , country.population , country.headofstate FROM country ORDER BY country.surfacearea DESC LIMIT 1",
    "goldSQL": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name , COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY countrylanguage.countrycode HAVING COUNT( * ) >= 3",
    "goldSQL": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name , COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY countrylanguage.countrycode HAVING COUNT( * ) > 2",
    "goldSQL": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) , city.district FROM city WHERE city.population > (SELECT AVG( city.population ) FROM city) GROUP BY city.district",
    "goldSQL": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , city.district FROM city WHERE city.population > (SELECT AVG( city.population ) FROM city) GROUP BY city.district",
    "goldSQL": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.governmentform , SUM( country.population ) FROM country GROUP BY country.governmentform HAVING AVG( country.lifeexpectancy ) > 72",
    "goldSQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT SUM( country.population ) , country.governmentform FROM country GROUP BY country.governmentform HAVING AVG( country.lifeexpectancy ) > 72",
    "goldSQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( country.lifeexpectancy ) , SUM( country.population ) , country.continent FROM country GROUP BY country.continent HAVING AVG( country.lifeexpectancy )<72",
    "goldSQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.continent , SUM( country.population ) FROM country GROUP BY country.continent HAVING AVG( country.lifeexpectancy )<72",
    "goldSQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT country.name , country.surfacearea FROM country ORDER BY country.surfacearea DESC LIMIT 5",
    "goldSQL": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name , country.surfacearea FROM country ORDER BY country.surfacearea DESC LIMIT 5",
    "goldSQL": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name FROM country ORDER BY country.population DESC LIMIT 3",
    "goldSQL": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name FROM country ORDER BY country.population DESC LIMIT 3",
    "goldSQL": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name FROM country ORDER BY country.population ASC LIMIT 3",
    "goldSQL": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name FROM country ORDER BY country.population ASC LIMIT 3",
    "goldSQL": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM country WHERE country.continent = 'Asia'",
    "goldSQL": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM country WHERE country.continent = 'Asia'",
    "goldSQL": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name FROM country WHERE country.continent = 'Europe' AND country.population = 80000",
    "goldSQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT country.name FROM country WHERE country.region = 'Europe' AND country.population >= 80000",
    "goldSQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT SUM( country.population ) , AVG( country.surfacearea ) FROM country WHERE country.continent = 'North America' HAVING AVG( country.surfacearea ) > 3000",
    "goldSQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT SUM( country.population ) , AVG( country.surfacearea ) FROM country WHERE country.continent = 'North America' HAVING AVG( country.surfacearea ) > 3000",
    "goldSQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT city.name FROM city WHERE city.population BETWEEN 160000 and 900000",
    "goldSQL": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT city.name FROM city WHERE city.population BETWEEN 160000 and 900000",
    "goldSQL": "select name from city where population between 160000 and 900000",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT countrylanguage.language FROM countrylanguage GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT countrylanguage.language FROM countrylanguage GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT countrylanguage.language FROM countrylanguage ORDER BY countrylanguage.percentage DESC LIMIT 1",
    "goldSQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.countrycode , MAX( countrylanguage.percentage ) FROM countrylanguage GROUP BY countrylanguage.countrycode",
    "goldSQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM countrylanguage WHERE countrylanguage.language = 'Spanish' ORDER BY countrylanguage.percentage DESC LIMIT 1",
    "goldSQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM countrylanguage WHERE countrylanguage.language = 'Spanish'",
    "goldSQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'Spanish' ORDER BY countrylanguage.percentage DESC LIMIT 1",
    "goldSQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'Spanish'",
    "goldSQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM conductor",
    "goldSQL": "SELECT count(*) FROM conductor",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM conductor",
    "goldSQL": "SELECT count(*) FROM conductor",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor ORDER BY conductor.age ASC",
    "goldSQL": "SELECT Name FROM conductor ORDER BY Age ASC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor ORDER BY conductor.age ASC",
    "goldSQL": "SELECT Name FROM conductor ORDER BY Age ASC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor WHERE conductor.nationality != 'USA'",
    "goldSQL": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor WHERE conductor.nationality != 'USA'",
    "goldSQL": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.record_company FROM orchestra ORDER BY orchestra.year_of_founded DESC",
    "goldSQL": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.record_company FROM orchestra ORDER BY orchestra.year_of_founded DESC",
    "goldSQL": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( show.attendance ) FROM show",
    "goldSQL": "SELECT avg(Attendance) FROM SHOW",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( show.attendance ) FROM show",
    "goldSQL": "SELECT avg(Attendance) FROM SHOW",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( performance.share ) , MIN( performance.share ) FROM performance WHERE performance.type != 'Live final'",
    "goldSQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( performance.share ) , MIN( performance.share ) FROM performance WHERE performance.type != 'Live final'",
    "goldSQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT conductor.nationality ) FROM conductor",
    "goldSQL": "SELECT count(DISTINCT Nationality) FROM conductor",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT conductor.nationality ) FROM conductor",
    "goldSQL": "SELECT count(DISTINCT Nationality) FROM conductor",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC",
    "goldSQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC",
    "goldSQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC LIMIT 1",
    "goldSQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC LIMIT 1",
    "goldSQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name , orchestra.orchestra FROM orchestra JOIN conductor ON orchestra.conductor_id = conductor.conductor_id",
    "goldSQL": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name , orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
    "goldSQL": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY orchestra.conductor_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY orchestra.conductor_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "goldSQL": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008",
    "goldSQL": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.record_company , COUNT( * ) FROM orchestra GROUP BY orchestra.record_company",
    "goldSQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.record_company , COUNT( * ) FROM orchestra GROUP BY orchestra.record_company",
    "goldSQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.major_record_format FROM orchestra GROUP BY orchestra.major_record_format ORDER BY COUNT( * ) ASC",
    "goldSQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.major_record_format FROM orchestra GROUP BY orchestra.major_record_format ORDER BY COUNT( * ) ASC",
    "goldSQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.record_company FROM orchestra GROUP BY orchestra.record_company ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.record_company FROM orchestra GROUP BY orchestra.record_company ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.orchestra FROM orchestra WHERE orchestra.orchestra_id NOT IN (SELECT performance.orchestra_id FROM performance)",
    "goldSQL": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.orchestra FROM orchestra WHERE orchestra.orchestra_id NOT IN (SELECT performance.orchestra_id FROM performance)",
    "goldSQL": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded<2003 INTERSECT SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded > 2003",
    "goldSQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded<2003 INTERSECT SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded > 2003",
    "goldSQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM orchestra WHERE orchestra.major_record_format = 'CD' OR orchestra.major_record_format = 'DVD'",
    "goldSQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM orchestra WHERE orchestra.major_record_format = 'CD' OR orchestra.major_record_format = 'DVD'",
    "goldSQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.year_of_founded FROM performance JOIN orchestra ON performance.orchestra_id = orchestra.orchestra_id GROUP BY performance.orchestra_id HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT orchestra.year_of_founded FROM performance JOIN orchestra ON performance.orchestra_id = orchestra.orchestra_id GROUP BY performance.orchestra_id HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM highschooler",
    "goldSQL": "SELECT count(*) FROM Highschooler",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM highschooler",
    "goldSQL": "SELECT count(*) FROM Highschooler",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name , highschooler.grade FROM highschooler",
    "goldSQL": "SELECT name ,  grade FROM Highschooler",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name , highschooler.grade FROM highschooler",
    "goldSQL": "SELECT name ,  grade FROM Highschooler",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT highschooler.grade FROM highschooler",
    "goldSQL": "SELECT grade FROM Highschooler",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT highschooler.grade FROM highschooler",
    "goldSQL": "SELECT grade FROM Highschooler",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.grade FROM highschooler WHERE highschooler.name = 'Kyle'",
    "goldSQL": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.grade FROM highschooler WHERE highschooler.name = 'Kyle'",
    "goldSQL": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler WHERE highschooler.grade = 10",
    "goldSQL": "SELECT name FROM Highschooler WHERE grade  =  10",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler WHERE highschooler.grade = 10",
    "goldSQL": "SELECT name FROM Highschooler WHERE grade  =  10",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.id FROM highschooler WHERE highschooler.name = 'Kyle'",
    "goldSQL": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.id FROM highschooler WHERE highschooler.name = 'Kyle'",
    "goldSQL": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM highschooler WHERE highschooler.grade = 9 OR highschooler.grade = 10",
    "goldSQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM highschooler WHERE highschooler.grade = 9 OR highschooler.grade = 10",
    "goldSQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.grade , COUNT( * ) FROM highschooler GROUP BY highschooler.grade",
    "goldSQL": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.grade , COUNT( * ) FROM highschooler GROUP BY highschooler.grade",
    "goldSQL": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.grade FROM highschooler GROUP BY highschooler.grade ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.grade FROM highschooler GROUP BY highschooler.grade ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.grade FROM highschooler GROUP BY highschooler.grade HAVING COUNT( * ) >= 4",
    "goldSQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.grade FROM highschooler GROUP BY highschooler.grade HAVING COUNT( * ) >= 4",
    "goldSQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT friend.student_id , COUNT( * ) FROM friend GROUP BY friend.student_id",
    "goldSQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) , friend.student_id FROM friend GROUP BY friend.student_id",
    "goldSQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name , COUNT( * ) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY friend.student_id",
    "goldSQL": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name , COUNT( * ) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY friend.student_id",
    "goldSQL": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY friend.student_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY friend.student_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id HAVING COUNT( * ) >= 3",
    "goldSQL": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id HAVING COUNT( * ) >= 3",
    "goldSQL": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE highschooler.name = 'Kyle'",
    "goldSQL": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT friend.friend_id FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = 'Kyle'",
    "goldSQL": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT friend.friend_id ) FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.name = 'Kyle'",
    "goldSQL": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE highschooler.name = 'Kyle'",
    "goldSQL": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT highschooler.id FROM highschooler EXCEPT SELECT friend.student_id FROM friend",
    "goldSQL": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.id FROM highschooler EXCEPT SELECT friend.student_id FROM friend",
    "goldSQL": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)",
    "goldSQL": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)",
    "goldSQL": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT likes.liked_id FROM likes INTERSECT SELECT friend.student_id FROM friend",
    "goldSQL": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT likes.student_id FROM likes INTERSECT SELECT friend.student_id FROM friend",
    "goldSQL": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id",
    "goldSQL": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id INTERSECT SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.liked_id",
    "goldSQL": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT likes.student_id , COUNT( * ) FROM likes GROUP BY likes.student_id",
    "goldSQL": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT likes.student_id , COUNT( * ) FROM likes GROUP BY likes.student_id",
    "goldSQL": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name , COUNT( * ) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id",
    "goldSQL": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name , COUNT( * ) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id",
    "goldSQL": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.grade > 5 GROUP BY friend.student_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.grade > 5 GROUP BY friend.student_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = 'Kyle'",
    "goldSQL": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM highschooler JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.name = 'Kyle'",
    "goldSQL": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( highschooler.grade ) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM friend)",
    "goldSQL": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT AVG( highschooler.grade ) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM friend)",
    "goldSQL": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT MIN( highschooler.grade ) FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)",
    "goldSQL": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT MIN( highschooler.grade ) FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)",
    "goldSQL": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT owners.state FROM owners INTERSECT SELECT professionals.state FROM professionals",
    "goldSQL": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT owners.state FROM owners INTERSECT SELECT professionals.state FROM professionals",
    "goldSQL": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( dogs.age ) FROM dogs WHERE dogs.dog_id IN (SELECT treatments.dog_id FROM treatments)",
    "goldSQL": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( dogs.age ) FROM dogs WHERE dogs.dog_id IN (SELECT treatments.dog_id FROM treatments)",
    "goldSQL": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT professionals.professional_id , professionals.last_name , professionals.cell_number FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT( * ) > 2",
    "goldSQL": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT professionals.professional_id , professionals.last_name , professionals.cell_number FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE professionals.state = 'Indiana' GROUP BY professionals.professional_id HAVING COUNT( * ) > 2",
    "goldSQL": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "charges , dogs",
    "goldSQL": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT dogs.name FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id WHERE charges.charge_amount > (SELECT MAX( charges.charge_amount ) FROM charges)",
    "goldSQL": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT professionals.first_name FROM professionals",
    "goldSQL": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT professionals.first_name FROM professionals",
    "goldSQL": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "hardness": "hard",
    "label": 0
  },
  {
    "predictSQL": "SELECT professionals.professional_id , professionals.role_code , professionals.email_address FROM professionals EXCEPT SELECT professionals.professional_id , professionals.role_code , professionals.email_address FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "goldSQL": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT professionals.professional_id , professionals.role_code , professionals.email_address FROM professionals EXCEPT SELECT professionals.professional_id , professionals.role_code , professionals.email_address FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id",
    "goldSQL": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT owners.owner_id , owners.first_name , owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT owners.owner_id , owners.first_name , owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT professionals.professional_id , professionals.role_code , professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT professionals.professional_id , professionals.role_code , professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT breeds.breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY dogs.breed_code ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT breeds.breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY dogs.breed_code ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT owners.owner_id , owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT owners.owner_id , owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY SUM( charges.charge_amount ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM( treatments.cost_of_treatment ) ASC LIMIT 1",
    "goldSQL": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM( treatments.cost_of_treatment ) ASC LIMIT 1",
    "goldSQL": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT owners.owner_id , owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY SUM( charges.charge_amount ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT owners.owner_id , owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY SUM( charges.charge_amount ) DESC LIMIT 1",
    "goldSQL": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT professionals.professional_id , professionals.cell_number FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT professionals.professional_id , professionals.cell_number FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT( * ) >= 2",
    "goldSQL": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT professionals.first_name , professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment<(SELECT AVG( treatments.cost_of_treatment ) FROM treatments)",
    "goldSQL": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT professionals.first_name , professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment<(SELECT AVG( treatments.cost_of_treatment ) FROM treatments)",
    "goldSQL": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT treatments.date_of_treatment , professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "goldSQL": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT treatments.date_of_treatment , professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "goldSQL": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT treatments.cost_of_treatment , treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "goldSQL": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT treatments.cost_of_treatment , treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "goldSQL": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT owners.first_name , owners.last_name , dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code",
    "goldSQL": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT owners.first_name , owners.last_name , dogs.size_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "goldSQL": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT owners.first_name , dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "goldSQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT owners.first_name , dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id",
    "goldSQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT dogs.name , treatments.date_of_treatment FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id ORDER BY dogs.breed_code ASC LIMIT 1",
    "goldSQL": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT dogs.name , treatments.date_of_treatment FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id GROUP BY treatments.dog_id ORDER BY COUNT( * ) ASC LIMIT 1",
    "goldSQL": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT owners.first_name , dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'",
    "goldSQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT owners.first_name , dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'",
    "goldSQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT dogs.date_arrived , dogs.date_departed FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id",
    "goldSQL": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT dogs.date_arrived , dogs.date_departed FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id",
    "goldSQL": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age ASC LIMIT 1",
    "goldSQL": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN( dogs.age ) FROM dogs)",
    "goldSQL": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "hardness": "extra",
    "label": 0
  },
  {
    "predictSQL": "SELECT professionals.email_address FROM professionals WHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'",
    "goldSQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT professionals.email_address FROM professionals WHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'",
    "goldSQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT dogs.date_arrived , dogs.date_departed FROM dogs",
    "goldSQL": "SELECT date_arrived ,  date_departed FROM Dogs",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT dogs.date_arrived , dogs.date_departed FROM dogs",
    "goldSQL": "SELECT date_arrived ,  date_departed FROM Dogs",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT treatments.dog_id ) FROM treatments",
    "goldSQL": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT treatments.dog_id ) FROM treatments",
    "goldSQL": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( DISTINCT treatments.professional_id ) FROM treatments",
    "goldSQL": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id",
    "goldSQL": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT professionals.role_code , professionals.city , professionals.street , professionals.state FROM professionals WHERE professionals.city LIKE '%West%'",
    "goldSQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT professionals.role_code , professionals.street , professionals.city , professionals.state FROM professionals WHERE professionals.city LIKE '%West%'",
    "goldSQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT owners.first_name , owners.last_name , owners.email_address FROM owners WHERE owners.state LIKE '%North%'",
    "goldSQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT owners.first_name , owners.last_name , owners.email_address FROM owners WHERE owners.state LIKE '%North%'",
    "goldSQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM dogs WHERE dogs.age<(SELECT AVG( dogs.age ) FROM dogs)",
    "goldSQL": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM dogs WHERE dogs.age<(SELECT AVG( dogs.age ) FROM dogs)",
    "goldSQL": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( treatments.cost_of_treatment ) FROM treatments",
    "goldSQL": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT treatments.cost_of_treatment FROM treatments ORDER BY treatments.date_of_treatment DESC LIMIT 1",
    "goldSQL": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM dogs WHERE dogs.dog_id NOT IN (SELECT treatments.dog_id FROM treatments)",
    "goldSQL": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM dogs WHERE dogs.dog_id NOT IN (SELECT treatments.dog_id FROM treatments)",
    "goldSQL": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM owners WHERE owners.owner_id NOT IN (SELECT dogs.owner_id FROM dogs)",
    "goldSQL": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM owners WHERE owners.owner_id NOT IN (SELECT dogs.owner_id FROM dogs)",
    "goldSQL": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM professionals WHERE professionals.professional_id NOT IN (SELECT treatments.professional_id FROM treatments)",
    "goldSQL": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM professionals WHERE professionals.professional_id NOT IN (SELECT treatments.professional_id FROM treatments)",
    "goldSQL": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "hardness": "extra",
    "label": 1
  },
  {
    "predictSQL": "SELECT dogs.name , dogs.age , dogs.weight FROM dogs WHERE dogs.abandoned_yn = '1'",
    "goldSQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT dogs.name , dogs.age , dogs.weight FROM dogs WHERE dogs.abandoned_yn = 'no'",
    "goldSQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT AVG( dogs.age ) FROM dogs",
    "goldSQL": "SELECT avg(age) FROM Dogs",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT AVG( dogs.age ) FROM dogs",
    "goldSQL": "SELECT avg(age) FROM Dogs",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT dogs.age FROM dogs ORDER BY dogs.age DESC LIMIT 1",
    "goldSQL": "SELECT max(age) FROM Dogs",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT dogs.age FROM dogs ORDER BY dogs.age DESC LIMIT 1",
    "goldSQL": "SELECT max(age) FROM Dogs",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT charges.charge_type , SUM( charges.charge_amount ) FROM charges GROUP BY charges.charge_type",
    "goldSQL": "SELECT charge_type ,  charge_amount FROM Charges",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT charges.charge_type , charges.charge_amount FROM charges",
    "goldSQL": "SELECT charge_type ,  charge_amount FROM Charges",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( charges.charge_amount ) FROM charges ORDER BY charges.charge_type DESC LIMIT 1",
    "goldSQL": "SELECT max(charge_amount) FROM Charges",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT charges.charge_amount FROM charges ORDER BY charges.charge_type DESC LIMIT 1",
    "goldSQL": "SELECT max(charge_amount) FROM Charges",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT professionals.email_address , professionals.cell_number , professionals.home_phone FROM professionals",
    "goldSQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT professionals.email_address , professionals.cell_number , professionals.home_phone FROM professionals",
    "goldSQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT breeds.breed_name , sizes.size_code FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code JOIN sizes ON dogs.size_code = sizes.size_code",
    "goldSQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT DISTINCT dogs.breed_code , dogs.size_code FROM dogs",
    "goldSQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT professionals.first_name , treatment_types.treatment_type_description FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "goldSQL": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT professionals.first_name , treatment_types.treatment_type_description FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code",
    "goldSQL": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM singer",
    "goldSQL": "SELECT count(*) FROM singer",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM singer",
    "goldSQL": "SELECT count(*) FROM singer",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name FROM singer ORDER BY singer.net_worth_millions ASC",
    "goldSQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name FROM singer ORDER BY singer.net_worth_millions ASC",
    "goldSQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.birth_year , singer.citizenship FROM singer",
    "goldSQL": "SELECT Birth_Year ,  Citizenship FROM singer",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.birth_year , singer.citizenship FROM singer",
    "goldSQL": "SELECT Birth_Year ,  Citizenship FROM singer",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name FROM singer WHERE singer.citizenship != 'France'",
    "goldSQL": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name FROM singer WHERE singer.citizenship != 'French'",
    "goldSQL": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "hardness": "easy",
    "label": 0
  },
  {
    "predictSQL": "SELECT singer.name FROM singer WHERE singer.birth_year = 1948 OR singer.birth_year = 1949",
    "goldSQL": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name FROM singer WHERE singer.birth_year = 1948 OR singer.birth_year = 1949",
    "goldSQL": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name FROM singer ORDER BY singer.net_worth_millions DESC LIMIT 1",
    "goldSQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name FROM singer ORDER BY singer.net_worth_millions DESC LIMIT 1",
    "goldSQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.citizenship , COUNT( * ) FROM singer GROUP BY singer.citizenship",
    "goldSQL": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.citizenship , COUNT( * ) FROM singer GROUP BY singer.citizenship",
    "goldSQL": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.citizenship FROM singer GROUP BY singer.citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.citizenship FROM singer GROUP BY singer.citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
    "goldSQL": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.citizenship , MAX( singer.net_worth_millions ) FROM singer GROUP BY singer.citizenship",
    "goldSQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT MAX( singer.net_worth_millions ) , singer.citizenship FROM singer GROUP BY singer.citizenship",
    "goldSQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT song.title , singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id",
    "goldSQL": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT song.title , singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id",
    "goldSQL": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "goldSQL": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000",
    "goldSQL": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY song.singer_id HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY song.singer_id HAVING COUNT( * ) > 1",
    "goldSQL": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT singer.name , SUM( song.sales ) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "goldSQL": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT SUM( song.sales ) , singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name",
    "goldSQL": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name FROM singer WHERE singer.singer_id NOT IN (SELECT song.singer_id FROM song)",
    "goldSQL": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.name FROM singer WHERE singer.singer_id NOT IN (SELECT song.singer_id FROM song)",
    "goldSQL": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.citizenship FROM singer WHERE singer.birth_year<1945 INTERSECT SELECT singer.citizenship FROM singer WHERE singer.birth_year > 1955",
    "goldSQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT singer.citizenship FROM singer WHERE singer.birth_year<1945 INTERSECT SELECT singer.citizenship FROM singer WHERE singer.birth_year > 1955",
    "goldSQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "hardness": "hard",
    "label": 1
  },
  {
    "predictSQL": "SELECT COUNT( * ) FROM other_available_features",
    "goldSQL": "SELECT count(*) FROM Other_Available_Features",
    "hardness": "easy",
    "label": 1
  },
  {
    "predictSQL": "SELECT ref_feature_types.feature_type_name FROM other_available_features JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code WHERE other_available_features.feature_name = 'AirCon'",
    "goldSQL": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
    "hardness": "medium",
    "label": 1
  },
  {
    "predictSQL": "SELECT ref_property_types.property_type_description FROM ref_property_types",
    "goldSQL": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
    "hardness": "medium",
    "label": 0
  },
  {
    "predictSQL": "SELECT properties.property_name FROM properties WHERE properties.room_count > 1",
    "goldSQL": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
    "hardness": "hard",
    "label": 0
  }
]