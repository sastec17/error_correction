[
  {
    "db_id": "twitter_1",
    "inp": "Find the emails of the user named \"Mary\". | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name ( Mary ) , email , partitionid , followers </s> sql = {\"select\": \"select user_profiles.email\", \"from\": \"from user_profiles\", \"where\": \"where user_profiles.name = \\\"m\\\"\"}",
    "out": "sql[\"where\"] = \"where user_profiles.name = \"Mary\"\" <s> sql = {\"select\": \"select user_profiles.email\", \"from\": \"from user_profiles\", \"where\": \"where user_profiles.name = \\\"Mary\\\"\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "What is the partition id of the user named \"Iron Man\". | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name ( Iron Man ) , email , partitionid , followers </s> sql = {}",
    "out": "sql[\"select\"] = \"select user_profiles.partitionid\"\nsql[\"from\"] = \"from user_profiles\"\nsql[\"where\"] = \"where user_profiles.name = \"Iron Man\"\" <s> sql = {\"select\": \"select user_profiles.partitionid\", \"from\": \"from user_profiles\", \"where\": \"where user_profiles.name = \\\"Iron Man\\\"\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "How many followers does each user have? | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select count(*), user_profiles.name\", \"from\": \"from user_profiles join follows on user_profiles.uid = follows.f1\"}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from follows\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from follows\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the number of followers for each user. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select user_profiles.name, count(*)\", \"from\": \"from user_profiles join follows on user_profiles.uid = follows.f1\", \"groupBy\": \"group by follows.f1\"}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from follows\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from follows\", \"groupBy\": \"group by follows.f1\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the number of tweets in record. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from tweets\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from tweets\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the number of users who posted some tweets. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(distinct tweets.uid)\"\nsql[\"from\"] = \"from tweets\" <s> sql = {\"select\": \"select count(distinct tweets.uid)\", \"from\": \"from tweets\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the name and email of the user whose name contains the word \u2018Swift\u2019. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {}",
    "out": "sql[\"select\"] = \"select user_profiles.name, user_profiles.email\"\nsql[\"from\"] = \"from user_profiles\"\nsql[\"where\"] = \"where user_profiles.name like \"%Swift%\"\" <s> sql = {\"select\": \"select user_profiles.name, user_profiles.email\", \"from\": \"from user_profiles\", \"where\": \"where user_profiles.name like \\\"%Swift%\\\"\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {}",
    "out": "sql[\"select\"] = \"select user_profiles.name\"\nsql[\"from\"] = \"from user_profiles\"\nsql[\"where\"] = \"where user_profiles.email like \"%superstar%\" or user_profiles.email like \"%edu%\"\" <s> sql = {\"select\": \"select user_profiles.name\", \"from\": \"from user_profiles\", \"where\": \"where user_profiles.email like \\\"%superstar%\\\" or user_profiles.email like \\\"%edu%\\\"\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Return the text of tweets about the topic 'intern'. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select tweets.text\", \"from\": \"from tweets\", \"where\": \"where tweets.text > \\\"intern\\\"\"}",
    "out": "sql[\"where\"] = \"where tweets.text like \"%intern%\"\" <s> sql = {\"select\": \"select tweets.text\", \"from\": \"from tweets\", \"where\": \"where tweets.text like \\\"%intern%\\\"\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the name and email of the users who have more than 1000 followers. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select user_profiles.name, user_profiles.email\", \"from\": \"from user_profiles\", \"where\": \"where user_profiles.followers >= 1000\"}",
    "out": "sql[\"where\"] = \"where user_profiles.followers > 1000\" <s> sql = {\"select\": \"select user_profiles.name, user_profiles.email\", \"from\": \"from user_profiles\", \"where\": \"where user_profiles.followers > 1000\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\". | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name ( Tyler Swift ) , email , partitionid , followers </s> sql = {\"select\": \"select max(user_profiles.followers)\", \"from\": \"from user_profiles\", \"where\": {\"clause\": \"where user_profiles.followers > (subquery0)\", \"subquery0\": {\"select\": \"select max(user_profiles.followers)\", \"from\": \"from user_profiles\"}}}",
    "out": "sql[\"select\"] = \"select user_profiles.name\"\nsql[\"from\"] = \"from user_profiles join follows on user_profiles.uid = follows.f1\"\nsql.pop(\"where\")\nsql[\"groupBy\"] = \"group by follows.f1\"\nsql[\"having\"] = {\"clause\": \"having count(*) > (subquery0)\", \"subquery0\": {}}\nsql[\"having\"][\"subquery0\"][\"select\"] = \"select count(*)\"\nsql[\"having\"][\"subquery0\"][\"from\"] = \"from user_profiles join follows on user_profiles.uid = follows.f1\"\nsql[\"having\"][\"subquery0\"][\"where\"] = \"where user_profiles.name = \"Tyler Swift\"\" <s> sql = {\"select\": \"select user_profiles.name\", \"from\": \"from user_profiles join follows on user_profiles.uid = follows.f1\", \"groupBy\": \"group by follows.f1\", \"having\": {\"clause\": \"having count(*) > (subquery0)\", \"subquery0\": {\"select\": \"select count(*)\", \"from\": \"from user_profiles join follows on user_profiles.uid = follows.f1\", \"where\": \"where user_profiles.name = \\\"Tyler Swift\\\"\"}}}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the name and email for the users who have more than one follower. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select user_profiles.name, user_profiles.email\", \"from\": \"from user_profiles join follows on user_profiles.followers = follows.f1\", \"groupBy\": \"group by user_profiles.name\", \"having\": \"having count(*) > 1\"}",
    "out": "sql[\"from\"] = \"from user_profiles join follows on user_profiles.uid = follows.f1\"\nsql[\"groupBy\"] = \"group by follows.f1\" <s> sql = {\"select\": \"select user_profiles.name, user_profiles.email\", \"from\": \"from user_profiles join follows on user_profiles.uid = follows.f1\", \"groupBy\": \"group by follows.f1\", \"having\": \"having count(*) > 1\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the names of users who have more than one tweet. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {}",
    "out": "sql[\"select\"] = \"select user_profiles.name\"\nsql[\"from\"] = \"from user_profiles join tweets on user_profiles.uid = tweets.uid\"\nsql[\"groupBy\"] = \"group by tweets.uid\"\nsql[\"having\"] = \"having count(*) > 1\" <s> sql = {\"select\": \"select user_profiles.name\", \"from\": \"from user_profiles join tweets on user_profiles.uid = tweets.uid\", \"groupBy\": \"group by tweets.uid\", \"having\": \"having count(*) > 1\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the id of users who are followed by Mary and Susan. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name ( Susan , Mary ) , email , partitionid , followers </s> sql = {}",
    "out": "sql[\"select\"] = \"select follows.f1\"\nsql[\"from\"] = \"from user_profiles join follows on user_profiles.uid = follows.f2\"\nsql[\"where\"] = \"where user_profiles.name = \"Mary\"\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select follows.f1\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from user_profiles join follows on user_profiles.uid = follows.f2\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where user_profiles.name = \"Susan\"\" <s> sql = {\"select\": \"select follows.f1\", \"from\": \"from user_profiles join follows on user_profiles.uid = follows.f2\", \"where\": \"where user_profiles.name = \\\"Mary\\\"\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select follows.f1\", \"from\": \"from user_profiles join follows on user_profiles.uid = follows.f2\", \"where\": \"where user_profiles.name = \\\"Susan\\\"\"}}}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the id of users who are followed by Mary or Susan. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name ( Susan , Mary ) , email , partitionid , followers </s> sql = {\"select\": \"select follows.f1\", \"from\": \"from follows join user_profiles on follows.f2 = user_profiles.uid\", \"where\": \"where user_profiles.name = \\\"Mary\\\" and user_profiles.name = \\\"Susan\\\"\"}",
    "out": "sql[\"from\"] = \"from user_profiles join follows on user_profiles.uid = follows.f2\"\nsql[\"where\"] = \"where user_profiles.name = \"Mary\" or user_profiles.name = \"Susan\"\" <s> sql = {\"select\": \"select follows.f1\", \"from\": \"from user_profiles join follows on user_profiles.uid = follows.f2\", \"where\": \"where user_profiles.name = \\\"Mary\\\" or user_profiles.name = \\\"Susan\\\"\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the name of the user who has the largest number of followers. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select user_profiles.name\", \"from\": \"from user_profiles\"}",
    "out": "sql[\"orderBy\"] = \"order by user_profiles.followers desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select user_profiles.name\", \"from\": \"from user_profiles\", \"orderBy\": \"order by user_profiles.followers desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the name and email of the user followed by the least number of people. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select follows.f1\", \"from\": \"from user_profiles join follows on user_profiles.uid = follows.f1\"}",
    "out": "sql[\"select\"] = \"select user_profiles.name, user_profiles.email\"\nsql[\"from\"] = \"from user_profiles\"\nsql[\"orderBy\"] = \"order by user_profiles.followers asc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select user_profiles.name, user_profiles.email\", \"from\": \"from user_profiles\", \"orderBy\": \"order by user_profiles.followers asc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "List the name and number of followers for each user, and sort the results by the number of followers in descending order. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select user_profiles.name, user_profiles.followers\", \"from\": \"from user_profiles\", \"groupBy\": \"group by user_profiles.name\", \"orderBy\": \"order by user_profiles.followers desc\"}",
    "out": "sql.pop(\"groupBy\") <s> sql = {\"select\": \"select user_profiles.name, user_profiles.followers\", \"from\": \"from user_profiles\", \"orderBy\": \"order by user_profiles.followers desc\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "List the names of 5 users followed by the largest number of other users. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select follows.f2\", \"from\": \"from follows\"}",
    "out": "sql[\"select\"] = \"select user_profiles.name\"\nsql[\"from\"] = \"from user_profiles\"\nsql[\"orderBy\"] = \"order by user_profiles.followers desc\"\nsql[\"limit\"] = \"limit 5\" <s> sql = {\"select\": \"select user_profiles.name\", \"from\": \"from user_profiles\", \"orderBy\": \"order by user_profiles.followers desc\", \"limit\": \"limit 5\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "List the text of all tweets in the order of date. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select tweets.text\", \"from\": \"from tweets\", \"groupBy\": \"group by tweets.text\"}",
    "out": "sql.pop(\"groupBy\")\nsql[\"orderBy\"] = \"order by tweets.createdate asc\" <s> sql = {\"select\": \"select tweets.text\", \"from\": \"from tweets\", \"orderBy\": \"order by tweets.createdate asc\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the name of each user and number of tweets tweeted by each of them. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select tweets.uid, count(*)\", \"from\": \"from user_profiles join tweets on user_profiles.uid = tweets.uid\"}",
    "out": "sql[\"select\"] = \"select user_profiles.name, count(*)\"\nsql[\"groupBy\"] = \"group by tweets.uid\" <s> sql = {\"select\": \"select user_profiles.name, count(*)\", \"from\": \"from user_profiles join tweets on user_profiles.uid = tweets.uid\", \"groupBy\": \"group by tweets.uid\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the name and partition id for users who tweeted less than twice. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select user_profiles.name, user_profiles.partitionid\", \"from\": \"from user_profiles join tweets on user_profiles.uid = tweets.uid\", \"groupBy\": \"group by user_profiles.name\", \"having\": \"having count(*) < 2\"}",
    "out": "sql[\"groupBy\"] = \"group by tweets.uid\" <s> sql = {\"select\": \"select user_profiles.name, user_profiles.partitionid\", \"from\": \"from user_profiles join tweets on user_profiles.uid = tweets.uid\", \"groupBy\": \"group by tweets.uid\", \"having\": \"having count(*) < 2\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select user_profiles.name, count(*)\", \"from\": \"from user_profiles join tweets on user_profiles.uid = tweets.uid\", \"groupBy\": \"group by user_profiles.name\", \"having\": \"having count(*) > 1\"}",
    "out": "sql[\"groupBy\"] = \"group by tweets.uid\" <s> sql = {\"select\": \"select user_profiles.name, count(*)\", \"from\": \"from user_profiles join tweets on user_profiles.uid = tweets.uid\", \"groupBy\": \"group by tweets.uid\", \"having\": \"having count(*) > 1\"}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the average number of followers for the users who do not have any tweet. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select user_profiles.followers\", \"from\": \"from user_profiles\", \"where\": {\"clause\": \"where user_profiles.uid not in (subquery0)\", \"subquery0\": {\"select\": \"select tweets.uid\", \"from\": \"from tweets\"}}}",
    "out": "sql[\"select\"] = \"select avg(user_profiles.followers)\" <s> sql = {\"select\": \"select avg(user_profiles.followers)\", \"from\": \"from user_profiles\", \"where\": {\"clause\": \"where user_profiles.uid not in (subquery0)\", \"subquery0\": {\"select\": \"select tweets.uid\", \"from\": \"from tweets\"}}}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the average number of followers for the users who had some tweets. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select user_profiles.followers, avg(user_profiles.followers)\", \"from\": \"from user_profiles join tweets on user_profiles.uid = tweets.uid\"}",
    "out": "sql[\"select\"] = \"select avg(user_profiles.followers)\"\nsql[\"from\"] = \"from user_profiles\"\nsql[\"where\"] = {\"clause\": \"where user_profiles.uid in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select tweets.uid\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from tweets\" <s> sql = {\"select\": \"select avg(user_profiles.followers)\", \"from\": \"from user_profiles\", \"where\": {\"clause\": \"where user_profiles.uid in (subquery0)\", \"subquery0\": {\"select\": \"select tweets.uid\", \"from\": \"from tweets\"}}}"
  },
  {
    "db_id": "twitter_1",
    "inp": "Find the maximum and total number of followers of all users. | follows : f1 , f2 | tweets : id , uid , text , createdate | user_profiles : uid , name , email , partitionid , followers </s> sql = {\"select\": \"select sum(user_profiles.followers)\", \"from\": \"from user_profiles\", \"orderBy\": \"order by user_profiles.followers desc\"}",
    "out": "sql[\"select\"] = \"select max(user_profiles.followers), sum(user_profiles.followers)\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select max(user_profiles.followers), sum(user_profiles.followers)\", \"from\": \"from user_profiles\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the buildings which have rooms with capacity more than 50. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select classroom.building\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity >= 50\"}",
    "out": "sql[\"select\"] = \"select distinct classroom.building\"\nsql[\"where\"] = \"where classroom.capacity > 50\" <s> sql = {\"select\": \"select distinct classroom.building\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity > 50\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the distinct buildings with capacities of greater than 50? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select distinct classroom.building\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity != 50\"}",
    "out": "sql[\"where\"] = \"where classroom.capacity > 50\" <s> sql = {\"select\": \"select distinct classroom.building\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity > 50\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Count the number of rooms that are not in the Lamberton building. | classroom : building ( Lamberton ) , room_number , capacity | department : dept_name , building ( Lamberton ) , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building ( Lamberton ) , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from classroom\"\nsql[\"where\"] = \"where classroom.building != \"Lamberton\"\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from classroom\", \"where\": \"where classroom.building != \\\"Lamberton\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many classrooms are not in Lamberton? | classroom : building ( Lamberton ) , room_number , capacity | department : dept_name , building ( Lamberton ) , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building ( Lamberton ) , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from classroom\"\nsql[\"where\"] = \"where classroom.building != \"Lamberton\"\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from classroom\", \"where\": \"where classroom.building != \\\"Lamberton\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the name and building of the departments whose budget is more than the average budget? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select avg(department.budget)\", \"from\": \"from department\", \"orderBy\": \"order by department.budget desc\"}",
    "out": "sql[\"select\"] = \"select department.dept_name, department.building\"\nsql[\"where\"] = {\"clause\": \"where department.budget > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select avg(department.budget)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from department\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select department.dept_name, department.building\", \"from\": \"from department\", \"where\": {\"clause\": \"where department.budget > (subquery0)\", \"subquery0\": {\"select\": \"select avg(department.budget)\", \"from\": \"from department\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Give the name and building of the departments with greater than average budget. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select avg(department.budget)\", \"from\": \"from department\", \"orderBy\": \"order by department.budget desc\"}",
    "out": "sql[\"select\"] = \"select department.dept_name, department.building\"\nsql[\"where\"] = {\"clause\": \"where department.budget > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select avg(department.budget)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from department\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select department.dept_name, department.building\", \"from\": \"from department\", \"where\": {\"clause\": \"where department.budget > (subquery0)\", \"subquery0\": {\"select\": \"select avg(department.budget)\", \"from\": \"from department\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the room number of the rooms which can sit 50 to 100 students and their buildings. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select classroom.room_number, classroom.building\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity >= 50 and classroom.capacity >= 100\"}",
    "out": "sql[\"select\"] = \"select classroom.building, classroom.room_number\"\nsql[\"where\"] = \"where classroom.capacity between 50 and 100\" <s> sql = {\"select\": \"select classroom.building, classroom.room_number\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity between 50 and 100\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select classroom.room_number, classroom.building\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity between 50 and 100 and classroom.capacity <= 100\"}",
    "out": "sql[\"select\"] = \"select classroom.building, classroom.room_number\"\nsql[\"where\"] = \"where classroom.capacity between 50 and 100\" <s> sql = {\"select\": \"select classroom.building, classroom.room_number\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity between 50 and 100\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name and building of the department with the highest budget. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name, department.building\", \"from\": \"from department\", \"groupBy\": \"group by department.dept_name, department.building\", \"orderBy\": \"order by department.budget desc\"}",
    "out": "sql.pop(\"groupBy\")\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select department.dept_name, department.building\", \"from\": \"from department\", \"orderBy\": \"order by department.budget desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the department name and corresponding building for the department with the greatest budget? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name, department.building\", \"from\": \"from department\", \"groupBy\": \"group by department.dept_name, department.building\", \"orderBy\": \"order by department.budget desc\"}",
    "out": "sql.pop(\"groupBy\")\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select department.dept_name, department.building\", \"from\": \"from department\", \"orderBy\": \"order by department.budget desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the name of the student who has the highest total credits in the History department. | classroom : building , room_number , capacity | department : dept_name ( History ) , building , budget | course : course_id , title , dept_name ( History ) , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( History ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name\", \"from\": \"from student\", \"where\": \"where student.dept_name = \\\"History\\\"\", \"orderBy\": \"order by student.dept_name asc\", \"limit\": \"limit 1\"}",
    "out": "sql[\"orderBy\"] = \"order by student.tot_cred desc\" <s> sql = {\"select\": \"select student.name\", \"from\": \"from student\", \"where\": \"where student.dept_name = \\\"History\\\"\", \"orderBy\": \"order by student.tot_cred desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Give the name of the student in the History department with the most credits. | classroom : building , room_number , capacity | department : dept_name ( History ) , building , budget | course : course_id , title , dept_name ( History ) , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( History ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name\", \"from\": \"from student\", \"where\": \"where student.dept_name = \\\"History\\\"\", \"groupBy\": \"group by student.name\", \"orderBy\": \"order by student.tot_cred desc\"}",
    "out": "sql.pop(\"groupBy\")\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select student.name\", \"from\": \"from student\", \"where\": \"where student.dept_name = \\\"History\\\"\", \"orderBy\": \"order by student.tot_cred desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many rooms does the Lamberton building have? | classroom : building ( Lamberton ) , room_number , capacity | department : dept_name , building ( Lamberton ) , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building ( Lamberton ) , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select section.building\", \"from\": \"from section\"}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from classroom\"\nsql[\"where\"] = \"where classroom.building = \"Lamberton\"\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from classroom\", \"where\": \"where classroom.building = \\\"Lamberton\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Count the number of classrooms in Lamberton. | classroom : building ( Lamberton ) , room_number , capacity | department : dept_name , building ( Lamberton ) , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building ( Lamberton ) , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select count(*)\", \"from\": \"from classroom join section on classroom.building = section.room_number\", \"where\": \"where classroom.building = \\\"Lamberton\\\"\"}",
    "out": "sql[\"from\"] = \"from classroom\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from classroom\", \"where\": \"where classroom.building = \\\"Lamberton\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many students have advisors? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name, count(*)\", \"from\": \"from advisor join student on advisor.s_id = student.id\", \"groupBy\": \"group by advisor.s_id\"}",
    "out": "sql[\"select\"] = \"select count(distinct advisor.s_id)\"\nsql[\"from\"] = \"from advisor\"\nsql.pop(\"groupBy\") <s> sql = {\"select\": \"select count(distinct advisor.s_id)\", \"from\": \"from advisor\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Count the number of students who have advisors. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select count(distinct advisor.s_id)\", \"from\": \"from advisor join student on advisor.s_id = student.id\"}",
    "out": "sql[\"from\"] = \"from advisor\" <s> sql = {\"select\": \"select count(distinct advisor.s_id)\", \"from\": \"from advisor\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many departments offer courses? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select count(distinct course.dept_name)\"\nsql[\"from\"] = \"from course\" <s> sql = {\"select\": \"select count(distinct course.dept_name)\", \"from\": \"from course\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Count the number of departments which offer courses. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select count(distinct course.dept_name)\"\nsql[\"from\"] = \"from course\" <s> sql = {\"select\": \"select count(distinct course.dept_name)\", \"from\": \"from course\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many different courses offered by Physics department? | classroom : building , room_number , capacity | department : dept_name ( Physics ) , building , budget | course : course_id , title , dept_name ( Physics ) , credits | instructor : id , name , dept_name ( Physics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Physics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select count(distinct course.course_id)\"\nsql[\"from\"] = \"from course\"\nsql[\"where\"] = \"where course.dept_name = \"Physics\"\" <s> sql = {\"select\": \"select count(distinct course.course_id)\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Physics\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Count the number of courses in the Physics department. | classroom : building , room_number , capacity | department : dept_name ( Physics ) , building , budget | course : course_id , title , dept_name ( Physics ) , credits | instructor : id , name , dept_name ( Physics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Physics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select count(distinct course.course_id)\"\nsql[\"from\"] = \"from course\"\nsql[\"where\"] = \"where course.dept_name = \"Physics\"\" <s> sql = {\"select\": \"select count(distinct course.course_id)\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Physics\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the title of courses that have two prerequisites? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"from\"] = \"from course join prereq on course.course_id = prereq.course_id\"\nsql[\"groupBy\"] = \"group by prereq.course_id\"\nsql[\"having\"] = \"having count(*) = 2\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course join prereq on course.course_id = prereq.course_id\", \"groupBy\": \"group by prereq.course_id\", \"having\": \"having count(*) = 2\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the titles for courses with two prerequisites? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"from\"] = \"from course join prereq on course.course_id = prereq.course_id\"\nsql[\"groupBy\"] = \"group by prereq.course_id\"\nsql[\"having\"] = \"having count(*) = 2\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course join prereq on course.course_id = prereq.course_id\", \"groupBy\": \"group by prereq.course_id\", \"having\": \"having count(*) = 2\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the title, credit, and department name of courses that have more than one prerequisites? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title, course.credits, count(*), course.dept_name\", \"from\": \"from course join prereq on course.course_id = prereq.prereq_id\", \"having\": \"having count(*) > 1\"}",
    "out": "sql[\"select\"] = \"select course.title, course.credits, course.dept_name\"\nsql[\"from\"] = \"from course join prereq on course.course_id = prereq.course_id\"\nsql[\"groupBy\"] = \"group by prereq.course_id\" <s> sql = {\"select\": \"select course.title, course.credits, course.dept_name\", \"from\": \"from course join prereq on course.course_id = prereq.course_id\", \"groupBy\": \"group by prereq.course_id\", \"having\": \"having count(*) > 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the title, credit value, and department name for courses with more than one prerequisite? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title, course.credits, count(*), course.dept_name\", \"from\": \"from course join prereq on course.course_id = prereq.course_id\", \"groupBy\": \"group by course.dept_name\", \"having\": \"having count(*) > 1\"}",
    "out": "sql[\"select\"] = \"select course.title, course.credits, course.dept_name\"\nsql[\"groupBy\"] = \"group by prereq.course_id\" <s> sql = {\"select\": \"select course.title, course.credits, course.dept_name\", \"from\": \"from course join prereq on course.course_id = prereq.course_id\", \"groupBy\": \"group by prereq.course_id\", \"having\": \"having count(*) > 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many courses that do not have prerequisite? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\", \"groupBy\": \"group by prereq.course_id\"}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from course\"\nsql[\"where\"] = {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.course_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from prereq\"\nsql.pop(\"groupBy\") <s> sql = {\"select\": \"select count(*)\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Count the number of courses without prerequisites. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select *\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\"}}}",
    "out": "sql[\"select\"] = \"select count(*)\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of the courses that do not have any prerequisite? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\", \"groupBy\": \"group by prereq.course_id\"}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"from\"] = \"from course\"\nsql[\"where\"] = {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.course_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from prereq\"\nsql.pop(\"groupBy\") <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the titles of courses without prerequisites? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\", \"groupBy\": \"group by prereq.course_id\"}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"from\"] = \"from course\"\nsql[\"where\"] = {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.course_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from prereq\"\nsql.pop(\"groupBy\") <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "How many different instructors have taught some course? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.id\", \"from\": \"from instructor\"}",
    "out": "sql[\"select\"] = \"select count(distinct teaches.id)\"\nsql[\"from\"] = \"from teaches\" <s> sql = {\"select\": \"select count(distinct teaches.id)\", \"from\": \"from teaches\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Count the number of distinct instructors who have taught a course. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.id\", \"from\": \"from instructor\"}",
    "out": "sql[\"select\"] = \"select count(distinct teaches.id)\"\nsql[\"from\"] = \"from teaches\" <s> sql = {\"select\": \"select count(distinct teaches.id)\", \"from\": \"from teaches\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the total budgets of the Marketing or Finance department. | classroom : building , room_number , capacity | department : dept_name ( Marketing , Finance ) , building , budget | course : course_id , title , dept_name ( Marketing , Finance ) , credits | instructor : id , name , dept_name ( Finance , Marketing ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name ( Finance ) , dept_name ( Marketing , Finance ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\", \"where\": \"where department.dept_name = \\\"Marketing\\\" or department.dept_name = \\\"Finance\\\"\"}",
    "out": "sql[\"select\"] = \"select sum(department.budget)\" <s> sql = {\"select\": \"select sum(department.budget)\", \"from\": \"from department\", \"where\": \"where department.dept_name = \\\"Marketing\\\" or department.dept_name = \\\"Finance\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the sum of budgets of the Marketing and Finance departments? | classroom : building , room_number , capacity | department : dept_name ( Marketing , Finance ) , building , budget | course : course_id , title , dept_name ( Marketing , Finance ) , credits | instructor : id , name , dept_name ( Finance , Marketing ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name ( Finance ) , dept_name ( Marketing , Finance ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select sum(department.budget)\", \"from\": \"from department\", \"where\": \"where department.dept_name = \\\"Marketing\\\"\"}",
    "out": "sql[\"where\"] = \"where department.dept_name = \"Marketing\" or department.dept_name = \"Finance\"\" <s> sql = {\"select\": \"select sum(department.budget)\", \"from\": \"from department\", \"where\": \"where department.dept_name = \\\"Marketing\\\" or department.dept_name = \\\"Finance\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the department name of the instructor whose name contains 'Soisalon'. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select instructor.dept_name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"where\"] = \"where instructor.name like \"%Soisalon%\"\" <s> sql = {\"select\": \"select instructor.dept_name\", \"from\": \"from instructor\", \"where\": \"where instructor.name like \\\"%Soisalon%\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the name of the department with an instructure who has a name like 'Soisalon'? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor join department on instructor.dept_name = department.dept_name\", \"where\": \"where instructor.name = \\\"Soisalon\\\"\"}",
    "out": "sql[\"select\"] = \"select instructor.dept_name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"where\"] = \"where instructor.name like \"%Soisalon%\"\" <s> sql = {\"select\": \"select instructor.dept_name\", \"from\": \"from instructor\", \"where\": \"where instructor.name like \\\"%Soisalon%\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many rooms whose capacity is less than 50 does the Lamberton building have? | classroom : building ( Lamberton ) , room_number , capacity | department : dept_name , building ( Lamberton ) , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building ( Lamberton ) , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select count(classroom.room_number)\", \"from\": \"from classroom\", \"where\": \"where classroom.building = \\\"Lamberton\\\" and classroom.capacity < 50\"}",
    "out": "sql[\"select\"] = \"select count(*)\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from classroom\", \"where\": \"where classroom.building = \\\"Lamberton\\\" and classroom.capacity < 50\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Count the number of rooms in Lamberton with capacity lower than 50. | classroom : building ( Lamberton ) , room_number , capacity | department : dept_name , building ( Lamberton ) , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building ( Lamberton ) , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select count(classroom.room_number)\", \"from\": \"from classroom\", \"where\": \"where classroom.building = \\\"Lamberton\\\" and classroom.capacity < 50\"}",
    "out": "sql[\"select\"] = \"select count(*)\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from classroom\", \"where\": \"where classroom.building = \\\"Lamberton\\\" and classroom.capacity < 50\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name and budget of departments whose budgets are more than the average budget. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.budget\", \"from\": \"from department\", \"where\": {\"clause\": \"where department.budget > (subquery0)\", \"subquery0\": {\"select\": \"select avg(department.budget)\", \"from\": \"from department\"}}}",
    "out": "sql[\"select\"] = \"select department.dept_name, department.budget\" <s> sql = {\"select\": \"select department.dept_name, department.budget\", \"from\": \"from department\", \"where\": {\"clause\": \"where department.budget > (subquery0)\", \"subquery0\": {\"select\": \"select avg(department.budget)\", \"from\": \"from department\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names and budgets of departments with budgets greater than the average? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.budget\", \"from\": \"from department\", \"where\": {\"clause\": \"where department.budget > (subquery0)\", \"subquery0\": {\"select\": \"select avg(department.budget)\", \"from\": \"from department\"}}}",
    "out": "sql[\"select\"] = \"select department.dept_name, department.budget\" <s> sql = {\"select\": \"select department.dept_name, department.budget\", \"from\": \"from department\", \"where\": {\"clause\": \"where department.budget > (subquery0)\", \"subquery0\": {\"select\": \"select avg(department.budget)\", \"from\": \"from department\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "what is the name of the instructor who is in Statistics department and earns the lowest salary? | classroom : building , room_number , capacity | department : dept_name ( Statistics ) , building , budget | course : course_id , title , dept_name ( Statistics ) , credits | instructor : id , name , dept_name ( Statistics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Statistics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Statistics\\\"\"}",
    "out": "sql[\"orderBy\"] = \"order by instructor.salary asc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Statistics\\\"\", \"orderBy\": \"order by instructor.salary asc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Give the name of the lowest earning instructor in the Statistics department. | classroom : building , room_number , capacity | department : dept_name ( Statistics ) , building , budget | course : course_id , title , dept_name ( Statistics ) , credits | instructor : id , name , dept_name ( Statistics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Statistics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Statistics\\\"\"}",
    "out": "sql[\"orderBy\"] = \"order by instructor.salary asc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Statistics\\\"\", \"orderBy\": \"order by instructor.salary asc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the title of course that is provided by both Statistics and Psychology departments. | classroom : building , room_number , capacity | department : dept_name ( Psychology , Statistics ) , building , budget | course : course_id , title , dept_name ( Psychology , Statistics ) , credits | instructor : id , name , dept_name ( Psychology , Statistics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Psychology , Statistics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Statistics\\\"\"}",
    "out": "sql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select course.title\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from course\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where course.dept_name = \"Psychology\"\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Statistics\\\"\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Psychology\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the title of a course that is listed in both the Statistics and Psychology departments? | classroom : building , room_number , capacity | department : dept_name ( Psychology , Statistics ) , building , budget | course : course_id , title , dept_name ( Psychology , Statistics ) , credits | instructor : id , name , dept_name ( Psychology , Statistics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Psychology , Statistics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Statistics\\\"\"}",
    "out": "sql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select course.title\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from course\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where course.dept_name = \"Psychology\"\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Statistics\\\"\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Psychology\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the title of course that is provided by Statistics but not Psychology departments. | classroom : building , room_number , capacity | department : dept_name ( Psychology , Statistics ) , building , budget | course : course_id , title , dept_name ( Psychology , Statistics ) , credits | instructor : id , name , dept_name ( Psychology , Statistics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Psychology , Statistics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Statistics\\\"\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Statistics\\\"\"}}}",
    "out": "sql[\"except\"][\"subquery0\"][\"where\"] = \"where course.dept_name = \"Psychology\"\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Statistics\\\"\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Psychology\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the titles of courses that are in the Statistics department but not the Psychology department? | classroom : building , room_number , capacity | department : dept_name ( Psychology , Statistics ) , building , budget | course : course_id , title , dept_name ( Psychology , Statistics ) , credits | instructor : id , name , dept_name ( Psychology , Statistics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Psychology , Statistics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"from\"] = \"from course\"\nsql[\"where\"] = \"where course.dept_name = \"Statistics\"\"\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select course.title\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from course\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where course.dept_name = \"Psychology\"\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Statistics\\\"\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": \"where course.dept_name = \\\"Psychology\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring , Fall ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring , Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring , Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select teaches.id\", \"from\": \"from teaches\", \"where\": \"where teaches.semester = \\\"Fall 2009\\\"\"}",
    "out": "sql[\"where\"] = \"where teaches.semester = \"Fall\" and teaches.year = 2009\"\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select teaches.id\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from teaches\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where teaches.semester = \"Spring\" and teaches.year = 2010\" <s> sql = {\"select\": \"select teaches.id\", \"from\": \"from teaches\", \"where\": \"where teaches.semester = \\\"Fall\\\" and teaches.year = 2009\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select teaches.id\", \"from\": \"from teaches\", \"where\": \"where teaches.semester = \\\"Spring\\\" and teaches.year = 2010\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring , Fall ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring , Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring , Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select teaches.id\"\nsql[\"from\"] = \"from teaches\"\nsql[\"where\"] = \"where teaches.semester = \"Fall\" and teaches.year = 2009\"\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select teaches.id\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from teaches\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where teaches.semester = \"Spring\" and teaches.year = 2010\" <s> sql = {\"select\": \"select teaches.id\", \"from\": \"from teaches\", \"where\": \"where teaches.semester = \\\"Fall\\\" and teaches.year = 2009\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select teaches.id\", \"from\": \"from teaches\", \"where\": \"where teaches.semester = \\\"Spring\\\" and teaches.year = 2010\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of students who took any class in the years of 2009 and 2010. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name\", \"from\": \"from student join takes on student.id = takes.id\", \"where\": \"where takes.year = 2009 and takes.year = 2010\"}",
    "out": "sql[\"select\"] = \"select distinct student.name\"\nsql[\"where\"] = \"where takes.year = 2009 or takes.year = 2010\" <s> sql = {\"select\": \"select distinct student.name\", \"from\": \"from student join takes on student.id = takes.id\", \"where\": \"where takes.year = 2009 or takes.year = 2010\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of the students who took classes in 2009 or 2010? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct student.name\"\nsql[\"from\"] = \"from student join takes on student.id = takes.id\"\nsql[\"where\"] = \"where takes.year = 2009 or takes.year = 2010\" <s> sql = {\"select\": \"select distinct student.name\", \"from\": \"from student join takes on student.id = takes.id\", \"where\": \"where takes.year = 2009 or takes.year = 2010\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the names of the top 3 departments that provide the largest amount of courses? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select course.dept_name\"\nsql[\"from\"] = \"from course\"\nsql[\"groupBy\"] = \"group by course.dept_name\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 3\" <s> sql = {\"select\": \"select course.dept_name\", \"from\": \"from course\", \"groupBy\": \"group by course.dept_name\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 3\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of the 3 departments with the most courses? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.dept_name\", \"from\": \"from course\"}",
    "out": "sql[\"groupBy\"] = \"group by course.dept_name\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 3\" <s> sql = {\"select\": \"select course.dept_name\", \"from\": \"from course\", \"groupBy\": \"group by course.dept_name\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 3\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of the department that offers the highest total credits? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.dept_name\", \"from\": \"from course\"}",
    "out": "sql[\"groupBy\"] = \"group by course.dept_name\"\nsql[\"orderBy\"] = \"order by sum(course.credits) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select course.dept_name\", \"from\": \"from course\", \"groupBy\": \"group by course.dept_name\", \"orderBy\": \"order by sum(course.credits) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the name of the department with the most credits? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from course join department on course.dept_name = department.dept_name\", \"groupBy\": \"group by course.dept_name\", \"orderBy\": \"order by sum(course.credits) desc\", \"limit\": \"limit 1\"}",
    "out": "sql[\"select\"] = \"select course.dept_name\"\nsql[\"from\"] = \"from course\" <s> sql = {\"select\": \"select course.dept_name\", \"from\": \"from course\", \"groupBy\": \"group by course.dept_name\", \"orderBy\": \"order by sum(course.credits) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "List the names of all courses ordered by their titles and credits. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title, course.credits\", \"from\": \"from course\", \"orderBy\": \"order by course.credits asc\"}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"orderBy\"] = \"order by course.title asc, course.credits asc\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"orderBy\": \"order by course.title asc, course.credits asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Given the titles of all courses, in order of titles and credits. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title, course.credits\", \"from\": \"from course\", \"orderBy\": \"order by course.credits asc\"}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"orderBy\"] = \"order by course.title asc, course.credits asc\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"orderBy\": \"order by course.title asc, course.credits asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Which department has the lowest budget? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\", \"orderBy\": \"order by department.budget asc\"}",
    "out": "sql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\", \"orderBy\": \"order by department.budget asc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Give the name of the department with the lowest budget. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select department.dept_name\"\nsql[\"from\"] = \"from department\"\nsql[\"orderBy\"] = \"order by department.budget asc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\", \"orderBy\": \"order by department.budget asc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "List the names and buildings of all departments sorted by the budget from large to small. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name, department.building\", \"from\": \"from department\", \"groupBy\": \"group by department.dept_name, department.building\", \"orderBy\": \"order by department.budget desc\"}",
    "out": "sql.pop(\"groupBy\") <s> sql = {\"select\": \"select department.dept_name, department.building\", \"from\": \"from department\", \"orderBy\": \"order by department.budget desc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names and buildings of the deparments, sorted by budget descending? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name, department.building\", \"from\": \"from department\", \"groupBy\": \"group by department.dept_name, department.building\", \"orderBy\": \"order by department.budget desc\"}",
    "out": "sql.pop(\"groupBy\") <s> sql = {\"select\": \"select department.dept_name, department.building\", \"from\": \"from department\", \"orderBy\": \"order by department.budget desc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Who is the instructor with the highest salary? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\"}",
    "out": "sql[\"orderBy\"] = \"order by instructor.salary desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"orderBy\": \"order by instructor.salary desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Give the name of the highest paid instructor. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\"}",
    "out": "sql[\"orderBy\"] = \"order by instructor.salary desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"orderBy\": \"order by instructor.salary desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "List the information of all instructors ordered by their salary in ascending order. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select *\", \"from\": \"from instructor\", \"groupBy\": \"group by instructor.salary\"}",
    "out": "sql.pop(\"groupBy\")\nsql[\"orderBy\"] = \"order by instructor.salary asc\" <s> sql = {\"select\": \"select *\", \"from\": \"from instructor\", \"orderBy\": \"order by instructor.salary asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Give all information regarding instructors, in order of salary from least to greatest. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select *\", \"from\": \"from instructor\", \"groupBy\": \"group by instructor.salary\", \"orderBy\": \"order by instructor.salary asc\"}",
    "out": "sql.pop(\"groupBy\") <s> sql = {\"select\": \"select *\", \"from\": \"from instructor\", \"orderBy\": \"order by instructor.salary asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of the students and their department names sorted by their total credits in ascending order. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name, student.dept_name\", \"from\": \"from student\", \"groupBy\": \"group by student.tot_cred\"}",
    "out": "sql.pop(\"groupBy\")\nsql[\"orderBy\"] = \"order by student.tot_cred asc\" <s> sql = {\"select\": \"select student.name, student.dept_name\", \"from\": \"from student\", \"orderBy\": \"order by student.tot_cred asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of students and their respective departments, ordered by number of credits from least to greatest? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.dept_name\", \"from\": \"from course\"}",
    "out": "sql[\"select\"] = \"select student.name, student.dept_name\"\nsql[\"from\"] = \"from student\"\nsql[\"orderBy\"] = \"order by student.tot_cred asc\" <s> sql = {\"select\": \"select student.name, student.dept_name\", \"from\": \"from student\", \"orderBy\": \"order by student.tot_cred asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "list in alphabetic order all course names and their instructors' names in year 2008. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select course.title, instructor.name\"\nsql[\"from\"] = \"from course join teaches on course.course_id = teaches.course_id join instructor on teaches.id = instructor.id\"\nsql[\"where\"] = \"where teaches.year = 2008\"\nsql[\"orderBy\"] = \"order by course.title asc\" <s> sql = {\"select\": \"select course.title, instructor.name\", \"from\": \"from course join teaches on course.course_id = teaches.course_id join instructor on teaches.id = instructor.id\", \"where\": \"where teaches.year = 2008\", \"orderBy\": \"order by course.title asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select course.title, instructor.name\"\nsql[\"from\"] = \"from course join teaches on course.course_id = teaches.course_id join instructor on teaches.id = instructor.id\"\nsql[\"where\"] = \"where teaches.year = 2008\"\nsql[\"orderBy\"] = \"order by course.title asc\" <s> sql = {\"select\": \"select course.title, instructor.name\", \"from\": \"from course join teaches on course.course_id = teaches.course_id join instructor on teaches.id = instructor.id\", \"where\": \"where teaches.year = 2008\", \"orderBy\": \"order by course.title asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of instructors who are advising more than one student. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor join advisor on instructor.id = advisor.i_id\", \"groupBy\": \"group by instructor.name\", \"having\": \"having count(*) > 1\"}",
    "out": "sql[\"groupBy\"] = \"group by advisor.i_id\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor join advisor on instructor.id = advisor.i_id\", \"groupBy\": \"group by advisor.i_id\", \"having\": \"having count(*) > 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of instructors who advise more than one student? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"from\"] = \"from instructor join advisor on instructor.id = advisor.i_id\"\nsql[\"groupBy\"] = \"group by advisor.i_id\"\nsql[\"having\"] = \"having count(*) > 1\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor join advisor on instructor.id = advisor.i_id\", \"groupBy\": \"group by advisor.i_id\", \"having\": \"having count(*) > 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of the students who have more than one advisor? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name\", \"from\": \"from advisor join student on advisor.s_id = student.id\", \"groupBy\": \"group by student.name\", \"having\": \"having count(*) > 1 and count(*) > 1\"}",
    "out": "sql[\"from\"] = \"from student join advisor on student.id = advisor.s_id\"\nsql[\"groupBy\"] = \"group by advisor.s_id\"\nsql[\"having\"] = \"having count(*) > 1\" <s> sql = {\"select\": \"select student.name\", \"from\": \"from student join advisor on student.id = advisor.s_id\", \"groupBy\": \"group by advisor.s_id\", \"having\": \"having count(*) > 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of students who have more than one advisor? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name\", \"from\": \"from advisor join student on advisor.s_id = student.id\", \"groupBy\": \"group by student.name\", \"having\": \"having count(*) > 1 and count(*) > 1\"}",
    "out": "sql[\"from\"] = \"from student join advisor on student.id = advisor.s_id\"\nsql[\"groupBy\"] = \"group by advisor.s_id\"\nsql[\"having\"] = \"having count(*) > 1\" <s> sql = {\"select\": \"select student.name\", \"from\": \"from student join advisor on student.id = advisor.s_id\", \"groupBy\": \"group by advisor.s_id\", \"having\": \"having count(*) > 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the number of rooms with more than 50 capacity for each building. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select count(*), classroom.building\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity > 50\", \"orderBy\": \"order by classroom.building asc\"}",
    "out": "sql[\"groupBy\"] = \"group by classroom.building\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select count(*), classroom.building\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity > 50\", \"groupBy\": \"group by classroom.building\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many rooms in each building have a capacity of over 50? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select count(*), classroom.building\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity > 50\"}",
    "out": "sql[\"groupBy\"] = \"group by classroom.building\" <s> sql = {\"select\": \"select count(*), classroom.building\", \"from\": \"from classroom\", \"where\": \"where classroom.capacity > 50\", \"groupBy\": \"group by classroom.building\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the maximum and average capacity among rooms in each building. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select max(classroom.capacity), avg(classroom.capacity), classroom.building\", \"from\": \"from classroom\", \"groupBy\": \"group by classroom.building\", \"having\": {\"clause\": \"having avg(classroom.capacity) > (subquery0)\", \"subquery0\": {\"select\": \"select avg(classroom.capacity)\", \"from\": \"from classroom\", \"groupBy\": \"group by classroom.building\"}}}",
    "out": "sql.pop(\"having\") <s> sql = {\"select\": \"select max(classroom.capacity), avg(classroom.capacity), classroom.building\", \"from\": \"from classroom\", \"groupBy\": \"group by classroom.building\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the greatest and average capacity for rooms in each building? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select max(classroom.capacity), min(classroom.capacity), classroom.building\", \"from\": \"from classroom\", \"groupBy\": \"group by classroom.building\"}",
    "out": "sql[\"select\"] = \"select max(classroom.capacity), avg(classroom.capacity), classroom.building\" <s> sql = {\"select\": \"select max(classroom.capacity), avg(classroom.capacity), classroom.building\", \"from\": \"from classroom\", \"groupBy\": \"group by classroom.building\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the title of the course that is offered by more than one department. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.dept_name\", \"from\": \"from course\", \"groupBy\": \"group by course.dept_name\"}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"groupBy\"] = \"group by course.title\"\nsql[\"having\"] = \"having count(*) > 1\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"groupBy\": \"group by course.title\", \"having\": \"having count(*) > 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the titles of courses that are offered in more than one department? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"groupBy\": \"group by course.dept_name\", \"having\": \"having count(*) > 1 and count(*) > 1\"}",
    "out": "sql[\"groupBy\"] = \"group by course.title\"\nsql[\"having\"] = \"having count(*) > 1\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"groupBy\": \"group by course.title\", \"having\": \"having count(*) > 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the total credits of courses provided by different department. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select sum(course.credits), course.dept_name\"\nsql[\"from\"] = \"from course\"\nsql[\"groupBy\"] = \"group by course.dept_name\" <s> sql = {\"select\": \"select sum(course.credits), course.dept_name\", \"from\": \"from course\", \"groupBy\": \"group by course.dept_name\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many total credits are offered by each department? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select sum(student.tot_cred), course.dept_name\", \"from\": \"from course join student on course.course_id = student.dept_name\", \"groupBy\": \"group by student.dept_name\"}",
    "out": "sql[\"select\"] = \"select sum(course.credits), course.dept_name\"\nsql[\"from\"] = \"from course\"\nsql[\"groupBy\"] = \"group by course.dept_name\" <s> sql = {\"select\": \"select sum(course.credits), course.dept_name\", \"from\": \"from course\", \"groupBy\": \"group by course.dept_name\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select min(instructor.salary), instructor.dept_name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"groupBy\"] = \"group by instructor.dept_name\"\nsql[\"having\"] = {\"clause\": \"having avg(instructor.salary) > (subquery0)\", \"subquery0\": {}}\nsql[\"having\"][\"subquery0\"][\"select\"] = \"select avg(instructor.salary)\"\nsql[\"having\"][\"subquery0\"][\"from\"] = \"from instructor\" <s> sql = {\"select\": \"select min(instructor.salary), instructor.dept_name\", \"from\": \"from instructor\", \"groupBy\": \"group by instructor.dept_name\", \"having\": {\"clause\": \"having avg(instructor.salary) > (subquery0)\", \"subquery0\": {\"select\": \"select avg(instructor.salary)\", \"from\": \"from instructor\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the lowest salary in departments with average salary greater than the overall average. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select min(instructor.salary), instructor.dept_name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"groupBy\"] = \"group by instructor.dept_name\"\nsql[\"having\"] = {\"clause\": \"having avg(instructor.salary) > (subquery0)\", \"subquery0\": {}}\nsql[\"having\"][\"subquery0\"][\"select\"] = \"select avg(instructor.salary)\"\nsql[\"having\"][\"subquery0\"][\"from\"] = \"from instructor\" <s> sql = {\"select\": \"select min(instructor.salary), instructor.dept_name\", \"from\": \"from instructor\", \"groupBy\": \"group by instructor.dept_name\", \"having\": {\"clause\": \"having avg(instructor.salary) > (subquery0)\", \"subquery0\": {\"select\": \"select avg(instructor.salary)\", \"from\": \"from instructor\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the number of courses provided in each semester and year. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select count(*), takes.year\", \"from\": \"from takes join section on takes.year = section.sec_id\"}",
    "out": "sql[\"select\"] = \"select count(*), section.semester, section.year\"\nsql[\"from\"] = \"from section\"\nsql[\"groupBy\"] = \"group by section.semester, section.year\" <s> sql = {\"select\": \"select count(*), section.semester, section.year\", \"from\": \"from section\", \"groupBy\": \"group by section.semester, section.year\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many courses are provided in each semester and year? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select takes.semester, section.year, count(*)\", \"from\": \"from takes join section on takes.semester = section.sec_id\", \"groupBy\": \"group by takes.semester\"}",
    "out": "sql[\"select\"] = \"select count(*), section.semester, section.year\"\nsql[\"from\"] = \"from section\"\nsql[\"groupBy\"] = \"group by section.semester, section.year\" <s> sql = {\"select\": \"select count(*), section.semester, section.year\", \"from\": \"from section\", \"groupBy\": \"group by section.semester, section.year\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the year which offers the largest number of courses. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select section.year\", \"from\": \"from section join takes on section.year = takes.year\", \"groupBy\": \"group by section.year\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}",
    "out": "sql[\"from\"] = \"from section\" <s> sql = {\"select\": \"select section.year\", \"from\": \"from section\", \"groupBy\": \"group by section.year\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Which year had the greatest number of courses? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select teaches.year\", \"from\": \"from section join teaches on section.sec_id = teaches.sec_id\", \"groupBy\": \"group by section.year\", \"orderBy\": \"order by count(*) desc\"}",
    "out": "sql[\"select\"] = \"select section.year\"\nsql[\"from\"] = \"from section\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select section.year\", \"from\": \"from section\", \"groupBy\": \"group by section.year\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the year and semester when offers the largest number of courses. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select takes.year, section.semester\", \"from\": \"from takes join section on takes.year = section.year join teaches on teaches.sec_id = section.sec_id\", \"groupBy\": \"group by takes.year\"}",
    "out": "sql[\"select\"] = \"select section.semester, section.year\"\nsql[\"from\"] = \"from section\"\nsql[\"groupBy\"] = \"group by section.semester, section.year\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select section.semester, section.year\", \"from\": \"from section\", \"groupBy\": \"group by section.semester, section.year\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the year and semester with the most courses? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select takes.year, takes.semester\", \"from\": \"from takes join section on takes.year = section.semester\", \"groupBy\": \"group by takes.year\"}",
    "out": "sql[\"select\"] = \"select section.semester, section.year\"\nsql[\"from\"] = \"from section\"\nsql[\"groupBy\"] = \"group by section.semester, section.year\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select section.semester, section.year\", \"from\": \"from section\", \"groupBy\": \"group by section.semester, section.year\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of department has the highest amount of students? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select *\", \"from\": \"from student join department on student.dept_name = department.dept_name\"}",
    "out": "sql[\"select\"] = \"select student.dept_name\"\nsql[\"from\"] = \"from student\"\nsql[\"groupBy\"] = \"group by student.dept_name\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select student.dept_name\", \"from\": \"from student\", \"groupBy\": \"group by student.dept_name\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the name of the deparment with the highest enrollment? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.dept_name\", \"from\": \"from course\"}",
    "out": "sql[\"select\"] = \"select student.dept_name\"\nsql[\"from\"] = \"from student\"\nsql[\"groupBy\"] = \"group by student.dept_name\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select student.dept_name\", \"from\": \"from student\", \"groupBy\": \"group by student.dept_name\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the total number of students in each department. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select count(*), student.dept_name\", \"from\": \"from student\", \"having\": \"having count(*) = student.dept_name\"}",
    "out": "sql[\"groupBy\"] = \"group by student.dept_name\"\nsql.pop(\"having\") <s> sql = {\"select\": \"select count(*), student.dept_name\", \"from\": \"from student\", \"groupBy\": \"group by student.dept_name\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the semester and year which has the least number of student taking any class. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select section.semester, takes.year\", \"from\": \"from takes join section on takes.year = section.sec_id\"}",
    "out": "sql[\"select\"] = \"select takes.semester, takes.year\"\nsql[\"from\"] = \"from takes\"\nsql[\"groupBy\"] = \"group by takes.semester, takes.year\"\nsql[\"orderBy\"] = \"order by count(*) asc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select takes.semester, takes.year\", \"from\": \"from takes\", \"groupBy\": \"group by takes.semester, takes.year\", \"orderBy\": \"order by count(*) asc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Which semeseter and year had the fewest students? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select takes.semester, section.year\", \"from\": \"from takes join section on takes.year = section.year\", \"groupBy\": \"group by takes.year\"}",
    "out": "sql[\"select\"] = \"select takes.semester, takes.year\"\nsql[\"from\"] = \"from takes\"\nsql[\"groupBy\"] = \"group by takes.semester, takes.year\"\nsql[\"orderBy\"] = \"order by count(*) asc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select takes.semester, takes.year\", \"from\": \"from takes\", \"groupBy\": \"group by takes.semester, takes.year\", \"orderBy\": \"order by count(*) asc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the id of the instructor who advises of all students from History department? | classroom : building , room_number , capacity | department : dept_name ( History ) , building , budget | course : course_id , title , dept_name ( History ) , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( History ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select advisor.i_id\", \"from\": \"from instructor join advisor on instructor.id = advisor.i_id join student on advisor.s_id = student.id\", \"where\": \"where student.dept_name = \\\"History\\\" and student.dept_name = \\\"History\\\"\", \"groupBy\": \"group by advisor.i_id\"}",
    "out": "sql[\"from\"] = \"from advisor join student on advisor.s_id = student.id\"\nsql[\"where\"] = \"where student.dept_name = \"History\"\"\nsql.pop(\"groupBy\") <s> sql = {\"select\": \"select advisor.i_id\", \"from\": \"from advisor join student on advisor.s_id = student.id\", \"where\": \"where student.dept_name = \\\"History\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Give id of the instructor who advises students in the History department. | classroom : building , room_number , capacity | department : dept_name ( History ) , building , budget | course : course_id , title , dept_name ( History ) , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( History ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select advisor.i_id\"\nsql[\"from\"] = \"from advisor join student on advisor.s_id = student.id\"\nsql[\"where\"] = \"where student.dept_name = \"History\"\" <s> sql = {\"select\": \"select advisor.i_id\", \"from\": \"from advisor join student on advisor.s_id = student.id\", \"where\": \"where student.dept_name = \\\"History\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name and salary of the instructors who are advisors of any student from History department? | classroom : building , room_number , capacity | department : dept_name ( History ) , building , budget | course : course_id , title , dept_name ( History ) , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( History ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select instructor.name, instructor.salary\"\nsql[\"from\"] = \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\"\nsql[\"where\"] = \"where student.dept_name = \"History\"\" <s> sql = {\"select\": \"select instructor.name, instructor.salary\", \"from\": \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\", \"where\": \"where student.dept_name = \\\"History\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names and salaries of instructors who advises students in the History department? | classroom : building , room_number , capacity | department : dept_name ( History ) , building , budget | course : course_id , title , dept_name ( History ) , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( History ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select instructor.name, instructor.salary\"\nsql[\"from\"] = \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\"\nsql[\"where\"] = \"where student.dept_name = \"History\"\" <s> sql = {\"select\": \"select instructor.name, instructor.salary\", \"from\": \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\", \"where\": \"where student.dept_name = \\\"History\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the id of the courses that do not have any prerequisite? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\", \"orderBy\": \"order by prereq.course_id asc\"}",
    "out": "sql[\"select\"] = \"select course.course_id\"\nsql[\"from\"] = \"from course\"\nsql.pop(\"orderBy\")\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select prereq.course_id\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from prereq\" <s> sql = {\"select\": \"select course.course_id\", \"from\": \"from course\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the ids of courses without prerequisites? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\", \"orderBy\": \"order by prereq.course_id desc\"}",
    "out": "sql[\"select\"] = \"select course.course_id\"\nsql[\"from\"] = \"from course\"\nsql.pop(\"orderBy\")\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select prereq.course_id\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from prereq\" <s> sql = {\"select\": \"select course.course_id\", \"from\": \"from course\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of the courses that do not have any prerequisite? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\", \"groupBy\": \"group by prereq.course_id\"}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"from\"] = \"from course\"\nsql[\"where\"] = {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.course_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from prereq\"\nsql.pop(\"groupBy\") <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of courses without prerequisites? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\", \"groupBy\": \"group by prereq.course_id\"}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"from\"] = \"from course\"\nsql[\"where\"] = {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.course_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from prereq\"\nsql.pop(\"groupBy\") <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id not in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.course_id\", \"from\": \"from prereq\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the title of the prerequisite class of International Finance course? | classroom : building , room_number , capacity | department : dept_name ( Finance ) , building , budget | course : course_id , title ( International Finance ) , dept_name ( Finance ) , credits | instructor : id , name , dept_name ( Finance ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name ( Finance ) , dept_name ( Finance ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title\", \"from\": \"from prereq join course on prereq.prereq_id = course.course_id\", \"where\": \"where course.dept_name = \\\"International Finance\\\"\"}",
    "out": "sql[\"from\"] = \"from course\"\nsql[\"where\"] = {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.prereq_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from prereq join course on prereq.course_id = course.course_id\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where course.title = \"International Finance\"\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.prereq_id\", \"from\": \"from prereq join course on prereq.course_id = course.course_id\", \"where\": \"where course.title = \\\"International Finance\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Give the title of the prerequisite to the course International Finance. | classroom : building , room_number , capacity | department : dept_name ( Finance ) , building , budget | course : course_id , title ( International Finance ) , dept_name ( Finance ) , credits | instructor : id , name , dept_name ( Finance ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name ( Finance ) , dept_name ( Finance ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title\", \"from\": \"from prereq join course on prereq.prereq_id = course.course_id\", \"where\": \"where course.dept_name = \\\"International Finance\\\"\"}",
    "out": "sql[\"from\"] = \"from course\"\nsql[\"where\"] = {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.prereq_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from prereq join course on prereq.course_id = course.course_id\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where course.title = \"International Finance\"\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.prereq_id\", \"from\": \"from prereq join course on prereq.course_id = course.course_id\", \"where\": \"where course.title = \\\"International Finance\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the title of course whose prerequisite is course Differential Geometry. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title ( Differential Geometry ) , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title\", \"from\": \"from course join prereq on course.course_id = prereq.prereq_id\"}",
    "out": "sql[\"from\"] = \"from course\"\nsql[\"where\"] = {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.course_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from prereq join course on prereq.prereq_id = course.course_id\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where course.title = \"Differential Geometry\"\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.course_id\", \"from\": \"from prereq join course on prereq.prereq_id = course.course_id\", \"where\": \"where course.title = \\\"Differential Geometry\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the title of the course with Differential Geometry as a prerequisite? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title ( Differential Geometry ) , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title\", \"from\": \"from course join prereq on course.course_id = prereq.prereq_id\", \"where\": \"where prereq.prereq_id = \\\"Differential Geometry\\\"\"}",
    "out": "sql[\"from\"] = \"from course\"\nsql[\"where\"] = {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.course_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from prereq join course on prereq.prereq_id = course.course_id\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where course.title = \"Differential Geometry\"\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.course_id\", \"from\": \"from prereq join course on prereq.prereq_id = course.course_id\", \"where\": \"where course.title = \\\"Differential Geometry\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the names of students who have taken any course in the fall semester of year 2003. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Fall ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name\", \"from\": \"from student join takes on student.id = takes.id\", \"where\": \"where takes.semester = \\\"fall\\\" and takes.year = 2003\"}",
    "out": "sql[\"from\"] = \"from student\"\nsql[\"where\"] = {\"clause\": \"where student.id in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select takes.id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from takes\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where takes.semester = \"Fall\" and takes.year = 2003\" <s> sql = {\"select\": \"select student.name\", \"from\": \"from student\", \"where\": {\"clause\": \"where student.id in (subquery0)\", \"subquery0\": {\"select\": \"select takes.id\", \"from\": \"from takes\", \"where\": \"where takes.semester = \\\"Fall\\\" and takes.year = 2003\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of students who took a course in the Fall of 2003? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Fall ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name\", \"from\": \"from student join takes on student.id = takes.id join section on takes.course_id = section.course_id\", \"where\": \"where takes.year = 2003\"}",
    "out": "sql[\"from\"] = \"from student\"\nsql[\"where\"] = {\"clause\": \"where student.id in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select takes.id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from takes\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where takes.semester = \"Fall\" and takes.year = 2003\" <s> sql = {\"select\": \"select student.name\", \"from\": \"from student\", \"where\": {\"clause\": \"where student.id in (subquery0)\", \"subquery0\": {\"select\": \"select takes.id\", \"from\": \"from takes\", \"where\": \"where takes.semester = \\\"Fall\\\" and takes.year = 2003\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010? | classroom : building ( Chandler ) , room_number , capacity | department : dept_name , building ( Chandler ) , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Fall ) , year , building ( Chandler ) , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"from\"] = \"from course join section on course.course_id = section.course_id\"\nsql[\"where\"] = \"where section.building = \"Chandler\" and section.semester = \"Fall\" and section.year = 2010\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course join section on course.course_id = section.course_id\", \"where\": \"where section.building = \\\"Chandler\\\" and section.semester = \\\"Fall\\\" and section.year = 2010\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Give the title of the course offered in Chandler during the Fall of 2010. | classroom : building ( Chandler ) , room_number , capacity | department : dept_name , building ( Chandler ) , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Fall ) , year , building ( Chandler ) , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select course.title\"\nsql[\"from\"] = \"from course join section on course.course_id = section.course_id\"\nsql[\"where\"] = \"where section.building = \"Chandler\" and section.semester = \"Fall\" and section.year = 2010\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course join section on course.course_id = section.course_id\", \"where\": \"where section.building = \\\"Chandler\\\" and section.semester = \\\"Fall\\\" and section.year = 2010\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of the instructors who taught C Programming course before. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"from\"] = \"from instructor join teaches on instructor.id = teaches.id join course on teaches.course_id = course.course_id\"\nsql[\"where\"] = \"where course.title = \"C Programming\"\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor join teaches on instructor.id = teaches.id join course on teaches.course_id = course.course_id\", \"where\": \"where course.title = \\\"C Programming\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of instructors who have taught C Programming courses? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"from\"] = \"from instructor join teaches on instructor.id = teaches.id join course on teaches.course_id = course.course_id\"\nsql[\"where\"] = \"where course.title = \"C Programming\"\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor join teaches on instructor.id = teaches.id join course on teaches.course_id = course.course_id\", \"where\": \"where course.title = \\\"C Programming\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name and salary of instructors who are advisors of the students from the Math department. | classroom : building , room_number , capacity | department : dept_name ( Math ) , building , budget | course : course_id , title , dept_name ( Math ) , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Math ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select distinct instructor.name\", \"from\": \"from instructor join advisor on instructor.id = advisor.i_id join student on advisor.s_id = student.id\", \"where\": \"where student.dept_name = \\\"Math\\\"\"}",
    "out": "sql[\"select\"] = \"select instructor.name, instructor.salary\"\nsql[\"from\"] = \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\" <s> sql = {\"select\": \"select instructor.name, instructor.salary\", \"from\": \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\", \"where\": \"where student.dept_name = \\\"Math\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names and salaries of instructors who advise students in the Math department? | classroom : building , room_number , capacity | department : dept_name ( Math ) , building , budget | course : course_id , title , dept_name ( Math ) , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Math ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select instructor.name, instructor.salary\"\nsql[\"from\"] = \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\"\nsql[\"where\"] = \"where student.dept_name = \"Math\"\" <s> sql = {\"select\": \"select instructor.name, instructor.salary\", \"from\": \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\", \"where\": \"where student.dept_name = \\\"Math\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit. | classroom : building , room_number , capacity | department : dept_name ( Math ) , building , budget | course : course_id , title , dept_name ( Math ) , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Math ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.tot_cred\", \"from\": \"from instructor join advisor on instructor.id = advisor.i_id join student on advisor.s_id = student.id\", \"where\": \"where student.dept_name = \\\"Math\\\"\", \"orderBy\": \"order by student.tot_cred asc\"}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"from\"] = \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\", \"where\": \"where student.dept_name = \\\"Math\\\"\", \"orderBy\": \"order by student.tot_cred asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student. | classroom : building , room_number , capacity | department : dept_name ( Math ) , building , budget | course : course_id , title , dept_name ( Math ) , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Math ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor join advisor on instructor.id = advisor.i_id join student on advisor.s_id = student.id join department on instructor.dept_name = department.dept_name\", \"where\": \"where student.dept_name = \\\"math\\\"\", \"orderBy\": \"order by student.tot_cred asc\"}",
    "out": "sql[\"from\"] = \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\"\nsql[\"where\"] = \"where student.dept_name = \"Math\"\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\", \"where\": \"where student.dept_name = \\\"Math\\\"\", \"orderBy\": \"order by student.tot_cred asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the course title of the prerequisite of course Mobile Computing? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title ( Mobile Computing ) , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title\", \"from\": \"from prereq join course on prereq.prereq_id = course.course_id\"}",
    "out": "sql[\"from\"] = \"from course\"\nsql[\"where\"] = {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.prereq_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from prereq join course on prereq.course_id = course.course_id\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where course.title = \"Mobile Computing\"\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.prereq_id\", \"from\": \"from prereq join course on prereq.course_id = course.course_id\", \"where\": \"where course.title = \\\"Mobile Computing\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the title of the course that is a prerequisite for Mobile Computing? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title ( Mobile Computing ) , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.title\", \"from\": \"from prereq join course on prereq.prereq_id = course.course_id\"}",
    "out": "sql[\"from\"] = \"from course\"\nsql[\"where\"] = {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.prereq_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from prereq join course on prereq.course_id = course.course_id\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where course.title = \"Mobile Computing\"\" <s> sql = {\"select\": \"select course.title\", \"from\": \"from course\", \"where\": {\"clause\": \"where course.course_id in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.prereq_id\", \"from\": \"from prereq join course on prereq.course_id = course.course_id\", \"where\": \"where course.title = \\\"Mobile Computing\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of instructor who is the advisor of the student who has the highest number of total credits. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor join advisor on instructor.id = advisor.i_id join student on advisor.s_id = student.id\", \"orderBy\": \"order by student.tot_cred desc\"}",
    "out": "sql[\"from\"] = \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\", \"orderBy\": \"order by student.tot_cred desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the name of the instructor who advises the student with the greatest number of total credits? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor join advisor on instructor.id = advisor.i_id join student on advisor.s_id = student.id\", \"orderBy\": \"order by student.tot_cred desc\"}",
    "out": "sql[\"from\"] = \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from advisor join instructor on advisor.i_id = instructor.id join student on advisor.s_id = student.id\", \"orderBy\": \"order by student.tot_cred desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of instructors who didn't teach any courses? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.id\", \"from\": \"from instructor\"}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"where\"] = {\"clause\": \"where instructor.id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select teaches.id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from teaches\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.id not in (subquery0)\", \"subquery0\": {\"select\": \"select teaches.id\", \"from\": \"from teaches\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of instructors who didn't teach? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"where\"] = {\"clause\": \"where instructor.id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select teaches.id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from teaches\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.id not in (subquery0)\", \"subquery0\": {\"select\": \"select teaches.id\", \"from\": \"from teaches\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the id of instructors who didn't teach any courses? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.id\", \"from\": \"from instructor\"}",
    "out": "sql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select teaches.id\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from teaches\" <s> sql = {\"select\": \"select instructor.id\", \"from\": \"from instructor\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select teaches.id\", \"from\": \"from teaches\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the ids of instructors who didnt' teach? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.id\", \"from\": \"from instructor\"}",
    "out": "sql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select teaches.id\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from teaches\" <s> sql = {\"select\": \"select instructor.id\", \"from\": \"from instructor\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select teaches.id\", \"from\": \"from teaches\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the names of instructors who didn't each any courses in any Spring semester. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring ) , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select teaches.id\", \"from\": \"from instructor join teaches on instructor.id = teaches.id join section on teaches.sec_id = section.course_id\", \"where\": \"where section.semester = \\\"Spring\\\"\"}}}",
    "out": "sql[\"where\"] = {\"clause\": \"where instructor.id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select teaches.id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from teaches\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where teaches.semester = \"Spring\"\"\nsql.pop(\"except\") <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.id not in (subquery0)\", \"subquery0\": {\"select\": \"select teaches.id\", \"from\": \"from teaches\", \"where\": \"where teaches.semester = \\\"Spring\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of instructors who didn't teach courses in the Spring? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring ) , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select teaches.id\", \"from\": \"from teaches join section on teaches.course_id = section.sec_id\", \"where\": \"where teaches.semester = \\\"Spring\\\"\"}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"where\"] = {\"clause\": \"where instructor.id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select teaches.id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from teaches\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where teaches.semester = \"Spring\"\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.id not in (subquery0)\", \"subquery0\": {\"select\": \"select teaches.id\", \"from\": \"from teaches\", \"where\": \"where teaches.semester = \\\"Spring\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of the department which has the highest average salary of professors. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select instructor.dept_name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"groupBy\"] = \"group by instructor.dept_name\"\nsql[\"orderBy\"] = \"order by avg(instructor.salary) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select instructor.dept_name\", \"from\": \"from instructor\", \"groupBy\": \"group by instructor.dept_name\", \"orderBy\": \"order by avg(instructor.salary) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Which department has the highest average instructor salary? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.dept_name\", \"from\": \"from instructor\", \"groupBy\": \"group by instructor.dept_name\", \"orderBy\": \"order by instructor.dept_name desc\"}",
    "out": "sql[\"orderBy\"] = \"order by avg(instructor.salary) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select instructor.dept_name\", \"from\": \"from instructor\", \"groupBy\": \"group by instructor.dept_name\", \"orderBy\": \"order by avg(instructor.salary) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the number and averaged salary of all instructors who are in the department with the highest budget. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select avg(instructor.salary), count(*)\"\nsql[\"from\"] = \"from instructor join department on instructor.dept_name = department.dept_name\"\nsql[\"orderBy\"] = \"order by department.budget desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select avg(instructor.salary), count(*)\", \"from\": \"from instructor join department on instructor.dept_name = department.dept_name\", \"orderBy\": \"order by department.budget desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many instructors are in the department with the highest budget, and what is their average salary? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.budget\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select avg(instructor.salary), count(*)\"\nsql[\"from\"] = \"from instructor join department on instructor.dept_name = department.dept_name\"\nsql[\"orderBy\"] = \"order by department.budget desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select avg(instructor.salary), count(*)\", \"from\": \"from instructor join department on instructor.dept_name = department.dept_name\", \"orderBy\": \"order by department.budget desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select classroom.capacity\", \"from\": \"from classroom\", \"orderBy\": \"order by classroom.capacity desc\", \"limit\": \"limit 1\"}",
    "out": "sql[\"select\"] = \"select course.title, course.credits\"\nsql[\"from\"] = \"from classroom join section on classroom.building = section.building and classroom.room_number = section.room_number join course on section.course_id = course.course_id\"\nsql[\"where\"] = {\"clause\": \"where classroom.capacity = (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select max(classroom.capacity)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from classroom\"\nsql.pop(\"orderBy\")\nsql.pop(\"limit\") <s> sql = {\"select\": \"select course.title, course.credits\", \"from\": \"from classroom join section on classroom.building = section.building and classroom.room_number = section.room_number join course on section.course_id = course.course_id\", \"where\": {\"clause\": \"where classroom.capacity = (subquery0)\", \"subquery0\": {\"select\": \"select max(classroom.capacity)\", \"from\": \"from classroom\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Give the title and credits for the course that is taught in the classroom with the greatest capacity. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select classroom.capacity\", \"from\": \"from classroom\", \"orderBy\": \"order by classroom.capacity desc\", \"limit\": \"limit 1\"}",
    "out": "sql[\"select\"] = \"select course.title, course.credits\"\nsql[\"from\"] = \"from classroom join section on classroom.building = section.building and classroom.room_number = section.room_number join course on section.course_id = course.course_id\"\nsql[\"where\"] = {\"clause\": \"where classroom.capacity = (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select max(classroom.capacity)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from classroom\"\nsql.pop(\"orderBy\")\nsql.pop(\"limit\") <s> sql = {\"select\": \"select course.title, course.credits\", \"from\": \"from classroom join section on classroom.building = section.building and classroom.room_number = section.room_number join course on section.course_id = course.course_id\", \"where\": {\"clause\": \"where classroom.capacity = (subquery0)\", \"subquery0\": {\"select\": \"select max(classroom.capacity)\", \"from\": \"from classroom\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of students who didn't take any course from Biology department. | classroom : building , room_number , capacity | department : dept_name ( Biology ) , building , budget | course : course_id , title , dept_name ( Biology ) , credits | instructor : id , name , dept_name ( Biology ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Biology ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name\", \"from\": \"from student\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select course.course_id\", \"from\": \"from department join course on department.dept_name = course.dept_name\"}}}",
    "out": "sql[\"where\"] = {\"clause\": \"where student.id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select takes.id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from takes join course on takes.course_id = course.course_id\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where course.dept_name = \"Biology\"\"\nsql.pop(\"except\") <s> sql = {\"select\": \"select student.name\", \"from\": \"from student\", \"where\": {\"clause\": \"where student.id not in (subquery0)\", \"subquery0\": {\"select\": \"select takes.id\", \"from\": \"from takes join course on takes.course_id = course.course_id\", \"where\": \"where course.dept_name = \\\"Biology\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of students who haven't taken any Biology courses? | classroom : building , room_number , capacity | department : dept_name ( Biology ) , building , budget | course : course_id , title , dept_name ( Biology ) , credits | instructor : id , name , dept_name ( Biology ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Biology ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select course.dept_name\", \"from\": \"from course\", \"where\": \"where course.title = \\\"Biology\\\"\"}",
    "out": "sql[\"select\"] = \"select student.name\"\nsql[\"from\"] = \"from student\"\nsql[\"where\"] = {\"clause\": \"where student.id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select takes.id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from takes join course on takes.course_id = course.course_id\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where course.dept_name = \"Biology\"\" <s> sql = {\"select\": \"select student.name\", \"from\": \"from student\", \"where\": {\"clause\": \"where student.id not in (subquery0)\", \"subquery0\": {\"select\": \"select takes.id\", \"from\": \"from takes join course on takes.course_id = course.course_id\", \"where\": \"where course.dept_name = \\\"Biology\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the total number of students and total number of instructors for each department. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(distinct student.id), count(distinct instructor.id), instructor.dept_name\"\nsql[\"from\"] = \"from department join student on department.dept_name = student.dept_name join instructor on department.dept_name = instructor.dept_name\"\nsql[\"groupBy\"] = \"group by instructor.dept_name\" <s> sql = {\"select\": \"select count(distinct student.id), count(distinct instructor.id), instructor.dept_name\", \"from\": \"from department join student on department.dept_name = student.dept_name join instructor on department.dept_name = instructor.dept_name\", \"groupBy\": \"group by instructor.dept_name\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many students and instructors are in each department? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select count(*), student.dept_name, count(*)\", \"from\": \"from instructor join advisor on instructor.id = advisor.i_id join student on advisor.s_id = student.id\"}",
    "out": "sql[\"select\"] = \"select count(distinct student.id), count(distinct instructor.id), instructor.dept_name\"\nsql[\"from\"] = \"from department join student on department.dept_name = student.dept_name join instructor on department.dept_name = instructor.dept_name\"\nsql[\"groupBy\"] = \"group by instructor.dept_name\" <s> sql = {\"select\": \"select count(distinct student.id), count(distinct instructor.id), instructor.dept_name\", \"from\": \"from department join student on department.dept_name = student.dept_name join instructor on department.dept_name = instructor.dept_name\", \"groupBy\": \"group by instructor.dept_name\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of students who have taken the prerequisite course of the course with title International Finance. | classroom : building , room_number , capacity | department : dept_name ( Finance ) , building , budget | course : course_id , title ( International Finance ) , dept_name ( Finance ) , credits | instructor : id , name , dept_name ( Finance ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name ( Finance ) , dept_name ( Finance ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name\", \"from\": \"from course join prereq on course.course_id = prereq.prereq_id join student on student.id = prereq.course_id\", \"where\": \"where course.title = \\\"International Finance\\\"\"}",
    "out": "sql[\"from\"] = \"from student join takes on student.id = takes.id\"\nsql[\"where\"] = {\"clause\": \"where takes.course_id in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.prereq_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from course join prereq on course.course_id = prereq.course_id\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where course.title = \"International Finance\"\" <s> sql = {\"select\": \"select student.name\", \"from\": \"from student join takes on student.id = takes.id\", \"where\": {\"clause\": \"where takes.course_id in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.prereq_id\", \"from\": \"from course join prereq on course.course_id = prereq.course_id\", \"where\": \"where course.title = \\\"International Finance\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of students who have taken the prerequisite for the course International Finance? | classroom : building , room_number , capacity | department : dept_name ( Finance ) , building , budget | course : course_id , title ( International Finance ) , dept_name ( Finance ) , credits | instructor : id , name , dept_name ( Finance ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name ( Finance ) , dept_name ( Finance ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select student.name\"\nsql[\"from\"] = \"from student join takes on student.id = takes.id\"\nsql[\"where\"] = {\"clause\": \"where takes.course_id in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select prereq.prereq_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from course join prereq on course.course_id = prereq.course_id\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where course.title = \"International Finance\"\" <s> sql = {\"select\": \"select student.name\", \"from\": \"from student join takes on student.id = takes.id\", \"where\": {\"clause\": \"where takes.course_id in (subquery0)\", \"subquery0\": {\"select\": \"select prereq.prereq_id\", \"from\": \"from course join prereq on course.course_id = prereq.course_id\", \"where\": \"where course.title = \\\"International Finance\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department. | classroom : building , room_number , capacity | department : dept_name ( Physics ) , building , budget | course : course_id , title , dept_name ( Physics ) , credits | instructor : id , name , dept_name ( Physics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Physics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select instructor.name, instructor.salary\"\nsql[\"from\"] = \"from instructor\"\nsql[\"where\"] = {\"clause\": \"where instructor.salary < (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select avg(instructor.salary)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from instructor\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where instructor.dept_name = \"Physics\"\" <s> sql = {\"select\": \"select instructor.name, instructor.salary\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.salary < (subquery0)\", \"subquery0\": {\"select\": \"select avg(instructor.salary)\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Physics\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department? | classroom : building , room_number , capacity | department : dept_name ( Physics ) , building , budget | course : course_id , title , dept_name ( Physics ) , credits | instructor : id , name , dept_name ( Physics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Physics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select instructor.name, instructor.salary\"\nsql[\"from\"] = \"from instructor\"\nsql[\"where\"] = {\"clause\": \"where instructor.salary < (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select avg(instructor.salary)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from instructor\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where instructor.dept_name = \"Physics\"\" <s> sql = {\"select\": \"select instructor.name, instructor.salary\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.salary < (subquery0)\", \"subquery0\": {\"select\": \"select avg(instructor.salary)\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Physics\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the name of students who took some course offered by Statistics department. | classroom : building , room_number , capacity | department : dept_name ( Statistics ) , building , budget | course : course_id , title , dept_name ( Statistics ) , credits | instructor : id , name , dept_name ( Statistics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Statistics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select student.name\", \"from\": \"from student join takes on student.id = takes.id join course on takes.course_id = course.course_id join section on course.course_id = section.course_id\", \"where\": \"where course.dept_name = \\\"Statistics\\\" and student.dept_name = \\\"Statistics\\\" and course.dept_name = \\\"Statistics\\\"\"}",
    "out": "sql[\"from\"] = \"from course join takes on course.course_id = takes.course_id join student on takes.id = student.id\"\nsql[\"where\"] = \"where course.dept_name = \"Statistics\"\" <s> sql = {\"select\": \"select student.name\", \"from\": \"from course join takes on course.course_id = takes.course_id join student on takes.id = student.id\", \"where\": \"where course.dept_name = \\\"Statistics\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of students who have taken Statistics courses? | classroom : building , room_number , capacity | department : dept_name ( Statistics ) , building , budget | course : course_id , title , dept_name ( Statistics ) , credits | instructor : id , name , dept_name ( Statistics ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Statistics ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select student.name\"\nsql[\"from\"] = \"from course join takes on course.course_id = takes.course_id join student on takes.id = student.id\"\nsql[\"where\"] = \"where course.dept_name = \"Statistics\"\" <s> sql = {\"select\": \"select student.name\", \"from\": \"from course join takes on course.course_id = takes.course_id join student on takes.id = student.id\", \"where\": \"where course.dept_name = \\\"Statistics\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles. | classroom : building , room_number , capacity | department : dept_name ( Psychology ) , building , budget | course : course_id , title , dept_name ( Psychology ) , credits | instructor : id , name , dept_name ( Psychology ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Psychology ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select section.building, section.room_number, section.semester, section.year\"\nsql[\"from\"] = \"from course join section on course.course_id = section.course_id\"\nsql[\"where\"] = \"where course.dept_name = \"Psychology\"\"\nsql[\"orderBy\"] = \"order by course.title asc\" <s> sql = {\"select\": \"select section.building, section.room_number, section.semester, section.year\", \"from\": \"from course join section on course.course_id = section.course_id\", \"where\": \"where course.dept_name = \\\"Psychology\\\"\", \"orderBy\": \"order by course.title asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title? | classroom : building , room_number , capacity | department : dept_name ( Psychology ) , building , budget | course : course_id , title , dept_name ( Psychology ) , credits | instructor : id , name , dept_name ( Psychology ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Psychology ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select section.building, section.room_number, section.semester, section.year\"\nsql[\"from\"] = \"from course join section on course.course_id = section.course_id\"\nsql[\"where\"] = \"where course.dept_name = \"Psychology\"\"\nsql[\"orderBy\"] = \"order by course.title asc\" <s> sql = {\"select\": \"select section.building, section.room_number, section.semester, section.year\", \"from\": \"from course join section on course.course_id = section.course_id\", \"where\": \"where course.dept_name = \\\"Psychology\\\"\", \"orderBy\": \"order by course.title asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the names of all instructors in computer science department | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"where\"] = \"where instructor.dept_name = \"Comp. Sci.\"\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Comp. Sci.\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of all instructors in the Comp. Sci. department? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name != \\\"Comp. Sci.\\\"\"}",
    "out": "sql[\"where\"] = \"where instructor.dept_name = \"Comp. Sci.\"\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Comp. Sci.\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the names of all instructors in Comp. Sci. department with salary > 80000. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.salary\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Comp. Sci\\\" and instructor.salary > 80000\"}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"where\"] = \"where instructor.dept_name = \"Comp. Sci.\" and instructor.salary > 80000\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Comp. Sci.\\\" and instructor.salary > 80000\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Comp. Sci\\\" and instructor.dept_name = \\\"Comp. Sci\\\" or instructor.salary > 80000\"}",
    "out": "sql[\"where\"] = \"where instructor.dept_name = \"Comp. Sci.\" and instructor.salary > 80000\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Comp. Sci.\\\" and instructor.salary > 80000\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the names of all instructors who have taught some course and the course_id. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\"}",
    "out": "sql[\"select\"] = \"select instructor.name, teaches.course_id\"\nsql[\"from\"] = \"from instructor join teaches on instructor.id = teaches.id\" <s> sql = {\"select\": \"select instructor.name, teaches.course_id\", \"from\": \"from instructor join teaches on instructor.id = teaches.id\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of all instructors who have taught a course, as well as the corresponding course id? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\"}",
    "out": "sql[\"select\"] = \"select instructor.name, teaches.course_id\"\nsql[\"from\"] = \"from instructor join teaches on instructor.id = teaches.id\" <s> sql = {\"select\": \"select instructor.name, teaches.course_id\", \"from\": \"from instructor join teaches on instructor.id = teaches.id\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the names of all instructors in the Art department who have taught some course and the course_id. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select instructor.name, teaches.course_id\"\nsql[\"from\"] = \"from instructor join teaches on instructor.id = teaches.id\"\nsql[\"where\"] = \"where instructor.dept_name = \"Art\"\" <s> sql = {\"select\": \"select instructor.name, teaches.course_id\", \"from\": \"from instructor join teaches on instructor.id = teaches.id\", \"where\": \"where instructor.dept_name = \\\"Art\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of Art instructors who have taught a course, and the corresponding course id? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name, count(*)\", \"from\": \"from instructor join teaches on instructor.id = teaches.id\", \"groupBy\": \"group by instructor.name\"}",
    "out": "sql[\"select\"] = \"select instructor.name, teaches.course_id\"\nsql[\"where\"] = \"where instructor.dept_name = \"Art\"\"\nsql.pop(\"groupBy\") <s> sql = {\"select\": \"select instructor.name, teaches.course_id\", \"from\": \"from instructor join teaches on instructor.id = teaches.id\", \"where\": \"where instructor.dept_name = \\\"Art\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the names of all instructors whose name includes the substring \u201cdar\u201d. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.name like \\\"%dar\\u201d.%\\\"\"}",
    "out": "sql[\"where\"] = \"where instructor.name like \"%dar%\"\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.name like \\\"%dar%\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of all instructors with names that include \"dar\"? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.name like \\\"%dar%\\\" or instructor.name like \\\"%dar%\\\"\"}",
    "out": "sql[\"where\"] = \"where instructor.name like \"%dar%\"\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": \"where instructor.name like \\\"%dar%\\\"\"}"
  },
  {
    "db_id": "college_2",
    "inp": "List in alphabetic order the names of all distinct instructors. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct instructor.name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"orderBy\"] = \"order by instructor.name asc\" <s> sql = {\"select\": \"select distinct instructor.name\", \"from\": \"from instructor\", \"orderBy\": \"order by instructor.name asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "List the distinct names of the instructors, ordered by name. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct instructor.name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"orderBy\"] = \"order by instructor.name asc\" <s> sql = {\"select\": \"select distinct instructor.name\", \"from\": \"from instructor\", \"orderBy\": \"order by instructor.name asc\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find courses that ran in Fall 2009 or in Spring 2010. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring , Fall ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring , Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring , Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select section.course_id\"\nsql[\"from\"] = \"from section\"\nsql[\"where\"] = \"where section.semester = \"Fall\" and section.year = 2009\"\nsql[\"union\"] = {\"clause\": \"union subquery0\", \"subquery0\": {}}\nsql[\"union\"][\"subquery0\"][\"select\"] = \"select section.course_id\"\nsql[\"union\"][\"subquery0\"][\"from\"] = \"from section\"\nsql[\"union\"][\"subquery0\"][\"where\"] = \"where section.semester = \"Spring\" and section.year = 2010\" <s> sql = {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Fall\\\" and section.year = 2009\", \"union\": {\"clause\": \"union subquery0\", \"subquery0\": {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Spring\\\" and section.year = 2010\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the ids for courses in the Fall of 2009 or the Spring of 2010? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring , Fall ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring , Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring , Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select takes.course_id\", \"from\": \"from takes join section on takes.course_id = section.course_id join teaches on teaches.year = section.year\", \"where\": \"where section.semester = \\\"Fall\\\" or teaches.semester = \\\"Spring\\\"\"}",
    "out": "sql[\"select\"] = \"select section.course_id\"\nsql[\"from\"] = \"from section\"\nsql[\"where\"] = \"where section.semester = \"Fall\" and section.year = 2009\"\nsql[\"union\"] = {\"clause\": \"union subquery0\", \"subquery0\": {}}\nsql[\"union\"][\"subquery0\"][\"select\"] = \"select section.course_id\"\nsql[\"union\"][\"subquery0\"][\"from\"] = \"from section\"\nsql[\"union\"][\"subquery0\"][\"where\"] = \"where section.semester = \"Spring\" and section.year = 2010\" <s> sql = {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Fall\\\" and section.year = 2009\", \"union\": {\"clause\": \"union subquery0\", \"subquery0\": {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Spring\\\" and section.year = 2010\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find courses that ran in Fall 2009 and in Spring 2010. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring , Fall ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring , Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring , Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select section.course_id\"\nsql[\"from\"] = \"from section\"\nsql[\"where\"] = \"where section.semester = \"Fall\" and section.year = 2009\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select section.course_id\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from section\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where section.semester = \"Spring\" and section.year = 2010\" <s> sql = {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Fall\\\" and section.year = 2009\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Spring\\\" and section.year = 2010\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring , Fall ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring , Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring , Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select section.course_id\"\nsql[\"from\"] = \"from section\"\nsql[\"where\"] = \"where section.semester = \"Fall\" and section.year = 2009\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select section.course_id\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from section\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where section.semester = \"Spring\" and section.year = 2010\" <s> sql = {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Fall\\\" and section.year = 2009\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Spring\\\" and section.year = 2010\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find courses that ran in Fall 2009 but not in Spring 2010. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring , Fall ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring , Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring , Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select section.course_id\"\nsql[\"from\"] = \"from section\"\nsql[\"where\"] = \"where section.semester = \"Fall\" and section.year = 2009\"\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select section.course_id\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from section\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where section.semester = \"Spring\" and section.year = 2010\" <s> sql = {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Fall\\\" and section.year = 2009\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Spring\\\" and section.year = 2010\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring , Fall ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring , Fall ) , year | student : id , name ( Fall ) , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring , Fall ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select takes.course_id\", \"from\": \"from takes\", \"where\": \"where takes.semester = \\\"Fall\\\"\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select teaches.semester\", \"from\": \"from takes join section on takes.sec_id = section.sec_id join teaches on teaches.year = section.year\", \"where\": \"where section.semester = \\\"Fall\\\"\"}}}",
    "out": "sql[\"select\"] = \"select section.course_id\"\nsql[\"from\"] = \"from section\"\nsql[\"where\"] = \"where section.semester = \"Fall\" and section.year = 2009\"\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select section.course_id\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from section\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where section.semester = \"Spring\" and section.year = 2010\" <s> sql = {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Fall\\\" and section.year = 2009\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select section.course_id\", \"from\": \"from section\", \"where\": \"where section.semester = \\\"Spring\\\" and section.year = 2010\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the salaries of all distinct instructors that are less than the largest salary. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.salary\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.salary not in (subquery0)\", \"subquery0\": {\"select\": \"select max(instructor.salary)\", \"from\": \"from instructor\"}}}",
    "out": "sql[\"select\"] = \"select distinct instructor.salary\"\nsql[\"where\"][\"clause\"] = \"where instructor.salary < (subquery0)\" <s> sql = {\"select\": \"select distinct instructor.salary\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.salary < (subquery0)\", \"subquery0\": {\"select\": \"select max(instructor.salary)\", \"from\": \"from instructor\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the distinct salaries of all instructors who earned less than the maximum salary? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.salary\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.salary != (subquery0)\", \"subquery0\": {\"select\": \"select max(instructor.salary)\", \"from\": \"from instructor\"}}}",
    "out": "sql[\"select\"] = \"select distinct instructor.salary\"\nsql[\"where\"][\"clause\"] = \"where instructor.salary < (subquery0)\" <s> sql = {\"select\": \"select distinct instructor.salary\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.salary < (subquery0)\", \"subquery0\": {\"select\": \"select max(instructor.salary)\", \"from\": \"from instructor\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the total number of instructors who teach a course in the Spring 2010 semester. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring ) , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select count(*)\", \"from\": \"from teaches join section on teaches.course_id = section.sec_id\", \"where\": \"where teaches.semester = \\\"Spring 2010\\\"\"}",
    "out": "sql[\"select\"] = \"select count(distinct teaches.id)\"\nsql[\"from\"] = \"from teaches\"\nsql[\"where\"] = \"where teaches.semester = \"Spring\" and teaches.year = 2010\" <s> sql = {\"select\": \"select count(distinct teaches.id)\", \"from\": \"from teaches\", \"where\": \"where teaches.semester = \\\"Spring\\\" and teaches.year = 2010\"}"
  },
  {
    "db_id": "college_2",
    "inp": "How many instructors teach a course in the Spring of 2010? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester ( Spring ) , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester ( Spring ) , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester ( Spring ) , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select count(*)\", \"from\": \"from teaches join section on teaches.course_id = section.sec_id\", \"where\": \"where teaches.year = 2010 and teaches.semester = \\\"Spring\\\"\"}",
    "out": "sql[\"select\"] = \"select count(distinct teaches.id)\"\nsql[\"from\"] = \"from teaches\"\nsql[\"where\"] = \"where teaches.semester = \"Spring\" and teaches.year = 2010\" <s> sql = {\"select\": \"select count(distinct teaches.id)\", \"from\": \"from teaches\", \"where\": \"where teaches.semester = \\\"Spring\\\" and teaches.year = 2010\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the names and average salaries of all departments whose average salary is greater than 42000. | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from instructor join department on instructor.dept_name = department.dept_name\", \"groupBy\": \"group by instructor.dept_name\", \"having\": \"having avg(instructor.salary) > 42000\"}",
    "out": "sql[\"select\"] = \"select instructor.dept_name, avg(instructor.salary)\"\nsql[\"from\"] = \"from instructor\" <s> sql = {\"select\": \"select instructor.dept_name, avg(instructor.salary)\", \"from\": \"from instructor\", \"groupBy\": \"group by instructor.dept_name\", \"having\": \"having avg(instructor.salary) > 42000\"}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names and average salaries for departments with average salary higher than 42000? | classroom : building , room_number , capacity | department : dept_name , building , budget | course : course_id , title , dept_name , credits | instructor : id , name , dept_name , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from instructor join department on instructor.dept_name = department.dept_name\", \"groupBy\": \"group by instructor.dept_name\", \"having\": \"having avg(instructor.salary) > 42000\"}",
    "out": "sql[\"select\"] = \"select instructor.dept_name, avg(instructor.salary)\"\nsql[\"from\"] = \"from instructor\" <s> sql = {\"select\": \"select instructor.dept_name, avg(instructor.salary)\", \"from\": \"from instructor\", \"groupBy\": \"group by instructor.dept_name\", \"having\": \"having avg(instructor.salary) > 42000\"}"
  },
  {
    "db_id": "college_2",
    "inp": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department. | classroom : building , room_number , capacity | department : dept_name ( Biology ) , building , budget | course : course_id , title , dept_name ( Biology ) , credits | instructor : id , name , dept_name ( Biology ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Biology ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"where\"] = {\"clause\": \"where instructor.salary > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select min(instructor.salary)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from instructor\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where instructor.dept_name = \"Biology\"\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.salary > (subquery0)\", \"subquery0\": {\"select\": \"select min(instructor.salary)\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Biology\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of instructors who earn more than at least one instructor from the Biology department? | classroom : building , room_number , capacity | department : dept_name ( Biology ) , building , budget | course : course_id , title , dept_name ( Biology ) , credits | instructor : id , name , dept_name ( Biology ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Biology ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"where\"] = {\"clause\": \"where instructor.salary > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select min(instructor.salary)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from instructor\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where instructor.dept_name = \"Biology\"\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.salary > (subquery0)\", \"subquery0\": {\"select\": \"select min(instructor.salary)\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Biology\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department. | classroom : building , room_number , capacity | department : dept_name ( Biology ) , building , budget | course : course_id , title , dept_name ( Biology ) , credits | instructor : id , name , dept_name ( Biology ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Biology ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select instructor.salary\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Biology\\\"\", \"orderBy\": \"order by instructor.salary desc\"}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"where\"] = {\"clause\": \"where instructor.salary > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select max(instructor.salary)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from instructor\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where instructor.dept_name = \"Biology\"\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.salary > (subquery0)\", \"subquery0\": {\"select\": \"select max(instructor.salary)\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Biology\\\"\"}}}"
  },
  {
    "db_id": "college_2",
    "inp": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department? | classroom : building , room_number , capacity | department : dept_name ( Biology ) , building , budget | course : course_id , title , dept_name ( Biology ) , credits | instructor : id , name , dept_name ( Biology ) , salary | section : course_id , sec_id , semester , year , building , room_number , time_slot_id | teaches : id , course_id , sec_id , semester , year | student : id , name , dept_name ( Biology ) , tot_cred | takes : id , course_id , sec_id , semester , year , grade | advisor : s_id , i_id | time_slot : time_slot_id , day , start_hr , start_min , end_hr , end_min | prereq : course_id , prereq_id </s> sql = {\"select\": \"select department.dept_name\", \"from\": \"from department\"}",
    "out": "sql[\"select\"] = \"select instructor.name\"\nsql[\"from\"] = \"from instructor\"\nsql[\"where\"] = {\"clause\": \"where instructor.salary > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select max(instructor.salary)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from instructor\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where instructor.dept_name = \"Biology\"\" <s> sql = {\"select\": \"select instructor.name\", \"from\": \"from instructor\", \"where\": {\"clause\": \"where instructor.salary > (subquery0)\", \"subquery0\": {\"select\": \"select max(instructor.salary)\", \"from\": \"from instructor\", \"where\": \"where instructor.dept_name = \\\"Biology\\\"\"}}}"
  },
  {
    "db_id": "soccer_1",
    "inp": "List all country and league names. | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {\"select\": \"select country.name, league.name\", \"from\": \"from country join league on country.id = league.country_id\", \"groupBy\": \"group by country.name, league.name\"}",
    "out": "sql.pop(\"groupBy\") <s> sql = {\"select\": \"select country.name, league.name\", \"from\": \"from country join league on country.id = league.country_id\"}"
  },
  {
    "db_id": "soccer_1",
    "inp": "How many leagues are there in England? | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name ( England ) | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from country join league on country.id = league.country_id\"\nsql[\"where\"] = \"where country.name = \"England\"\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from country join league on country.id = league.country_id\", \"where\": \"where country.name = \\\"England\\\"\"}"
  },
  {
    "db_id": "soccer_1",
    "inp": "What is the average weight of all players? | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {\"select\": \"select player_attributes.player_fifa_api_id\", \"from\": \"from player_attributes\"}",
    "out": "sql[\"select\"] = \"select avg(player.weight)\"\nsql[\"from\"] = \"from player\" <s> sql = {\"select\": \"select avg(player.weight)\", \"from\": \"from player\"}"
  },
  {
    "db_id": "soccer_1",
    "inp": "What is the maximum and minimum height of all players? | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {}",
    "out": "sql[\"select\"] = \"select max(player.weight), min(player.weight)\"\nsql[\"from\"] = \"from player\" <s> sql = {\"select\": \"select max(player.weight), min(player.weight)\", \"from\": \"from player\"}"
  },
  {
    "db_id": "soccer_1",
    "inp": "List all player names who have an overall rating higher than the average. | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {\"select\": \"select player_attributes.player_fifa_api_id\", \"from\": \"from player_attributes\"}",
    "out": "sql[\"select\"] = \"select distinct player.player_name\"\nsql[\"from\"] = \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\"\nsql[\"where\"] = {\"clause\": \"where player_attributes.overall_rating > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select avg(player_attributes.overall_rating)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from player_attributes\" <s> sql = {\"select\": \"select distinct player.player_name\", \"from\": \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\", \"where\": {\"clause\": \"where player_attributes.overall_rating > (subquery0)\", \"subquery0\": {\"select\": \"select avg(player_attributes.overall_rating)\", \"from\": \"from player_attributes\"}}}"
  },
  {
    "db_id": "soccer_1",
    "inp": "What are the names of players who have the best dribbling? | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {\"select\": \"select player_attributes.player_fifa_api_id\", \"from\": \"from player_attributes\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select player_attributes.player_api_id\", \"from\": \"from player_attributes\"}}}",
    "out": "sql[\"select\"] = \"select distinct player.player_name\"\nsql[\"from\"] = \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\"\nsql[\"where\"] = {\"clause\": \"where player_attributes.dribbling = (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select max(player_attributes.overall_rating)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from player_attributes\"\nsql.pop(\"intersect\") <s> sql = {\"select\": \"select distinct player.player_name\", \"from\": \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\", \"where\": {\"clause\": \"where player_attributes.dribbling = (subquery0)\", \"subquery0\": {\"select\": \"select max(player_attributes.overall_rating)\", \"from\": \"from player_attributes\"}}}"
  },
  {
    "db_id": "soccer_1",
    "inp": "List the names of all players who have a crossing score higher than 90 and prefer their right foot. | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot ( right ) , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct player.player_name\"\nsql[\"from\"] = \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\"\nsql[\"where\"] = \"where player_attributes.crossing > 90 and player_attributes.preferred_foot = \"right\"\" <s> sql = {\"select\": \"select distinct player.player_name\", \"from\": \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\", \"where\": \"where player_attributes.crossing > 90 and player_attributes.preferred_foot = \\\"right\\\"\"}"
  },
  {
    "db_id": "soccer_1",
    "inp": "List the names of all left-footed players who have overall rating between 85 and 90. | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {\"select\": \"select player.player_name\", \"from\": \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\", \"where\": \"where player_attributes.preferred_foot = \\\"left\\\" and player_attributes.overall_rating between 85 and 90\"}",
    "out": "sql[\"select\"] = \"select distinct player.player_name\"\nsql[\"where\"] = \"where player_attributes.preferred_foot = \"left\" and player_attributes.overall_rating >= 85 and player_attributes.overall_rating <= 90\" <s> sql = {\"select\": \"select distinct player.player_name\", \"from\": \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\", \"where\": \"where player_attributes.preferred_foot = \\\"left\\\" and player_attributes.overall_rating >= 85 and player_attributes.overall_rating <= 90\"}"
  },
  {
    "db_id": "soccer_1",
    "inp": "What is the average rating for right-footed players and left-footed players? | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {\"select\": \"select avg(player_attributes.overall_rating)\", \"from\": \"from player_attributes join player on player_attributes.player_api_id = player.player_api_id\", \"where\": \"where player.height = \\\"right\\\"\"}",
    "out": "sql[\"select\"] = \"select player_attributes.preferred_foot, avg(player_attributes.overall_rating)\"\nsql[\"from\"] = \"from player_attributes\"\nsql.pop(\"where\")\nsql[\"groupBy\"] = \"group by player_attributes.preferred_foot\" <s> sql = {\"select\": \"select player_attributes.preferred_foot, avg(player_attributes.overall_rating)\", \"from\": \"from player_attributes\", \"groupBy\": \"group by player_attributes.preferred_foot\"}"
  },
  {
    "db_id": "soccer_1",
    "inp": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed? | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {\"select\": \"select player.player_api_id\", \"from\": \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\", \"where\": \"where player_attributes.preferred_foot = \\\"left\\\"\"}",
    "out": "sql[\"select\"] = \"select player_attributes.preferred_foot, count(*)\"\nsql[\"from\"] = \"from player_attributes\"\nsql[\"where\"] = \"where player_attributes.overall_rating > 80\"\nsql[\"groupBy\"] = \"group by player_attributes.preferred_foot\" <s> sql = {\"select\": \"select player_attributes.preferred_foot, count(*)\", \"from\": \"from player_attributes\", \"where\": \"where player_attributes.overall_rating > 80\", \"groupBy\": \"group by player_attributes.preferred_foot\"}"
  },
  {
    "db_id": "soccer_1",
    "inp": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85. | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {}",
    "out": "sql[\"select\"] = \"select player.player_api_id\"\nsql[\"from\"] = \"from player\"\nsql[\"where\"] = \"where player.height >= 180\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select player_attributes.player_api_id\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from player_attributes\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where player_attributes.overall_rating > 85\" <s> sql = {\"select\": \"select player.player_api_id\", \"from\": \"from player\", \"where\": \"where player.height >= 180\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select player_attributes.player_api_id\", \"from\": \"from player_attributes\", \"where\": \"where player_attributes.overall_rating > 85\"}}}"
  },
  {
    "db_id": "soccer_1",
    "inp": "List all of the ids for left-footed players with a height between 180cm and 190cm. | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {\"select\": \"select player.player_api_id\", \"from\": \"from player join player_attributes on player.player_fifa_api_id = player_attributes.player_fifa_api_id\", \"where\": \"where player.height between 180 and 190 and player_attributes.preferred_foot = \\\"left\\\"\"}",
    "out": "sql[\"from\"] = \"from player\"\nsql[\"where\"] = \"where player.height >= 180 and player.height <= 190\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select player_attributes.player_api_id\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from player_attributes\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where player_attributes.preferred_foot = \"left\"\" <s> sql = {\"select\": \"select player.player_api_id\", \"from\": \"from player\", \"where\": \"where player.height >= 180 and player.height <= 190\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select player_attributes.player_api_id\", \"from\": \"from player_attributes\", \"where\": \"where player_attributes.preferred_foot = \\\"left\\\"\"}}}"
  },
  {
    "db_id": "soccer_1",
    "inp": "Who are the top 3 players in terms of overall rating? | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {\"select\": \"select player_attributes.overall_rating\", \"from\": \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\"}",
    "out": "sql[\"select\"] = \"select distinct player.player_name\"\nsql[\"orderBy\"] = \"order by player_attributes.overall_rating desc\"\nsql[\"limit\"] = \"limit 3\" <s> sql = {\"select\": \"select distinct player.player_name\", \"from\": \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\", \"orderBy\": \"order by player_attributes.overall_rating desc\", \"limit\": \"limit 3\"}"
  },
  {
    "db_id": "soccer_1",
    "inp": "List the names and birthdays of the top five players in terms of potential. | player_attributes : id , player_fifa_api_id , player_api_id , date , overall_rating , potential , preferred_foot , attacking_work_rate , defensive_work_rate , crossing , finishing , heading_accuracy , short_passing , volleys , dribbling , curve , free_kick_accuracy , long_passing , ball_control , acceleration , sprint_speed , agility , reactions , balance , shot_power , jumping , stamina , strength , long_shots , aggression , interceptions , positioning , vision , penalties , marking , standing_tackle , sliding_tackle , gk_diving , gk_handling , gk_kicking , gk_positioning , gk_reflexes | sqlite_sequence : name , seq | player : id , player_api_id , player_name , player_fifa_api_id , birthday , height , weight | league : id , country_id , name | country : id , name | team : id , team_api_id , team_fifa_api_id , team_long_name , team_short_name | team_attributes : id , team_fifa_api_id , team_api_id , date , buildupplayspeed , buildupplayspeedclass , buildupplaydribbling , buildupplaydribblingclass , buildupplaypassing , buildupplaypassingclass , buildupplaypositioningclass , chancecreationpassing , chancecreationpassingclass , chancecreationcrossing , chancecreationcrossingclass , chancecreationshooting , chancecreationshootingclass , chancecreationpositioningclass , defencepressure , defencepressureclass , defenceaggression , defenceaggressionclass , defenceteamwidth , defenceteamwidthclass , defencedefenderlineclass </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct player.player_name, player.birthday\"\nsql[\"from\"] = \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\"\nsql[\"orderBy\"] = \"order by player_attributes.potential desc\"\nsql[\"limit\"] = \"limit 5\" <s> sql = {\"select\": \"select distinct player.player_name, player.birthday\", \"from\": \"from player join player_attributes on player.player_api_id = player_attributes.player_api_id\", \"orderBy\": \"order by player_attributes.potential desc\", \"limit\": \"limit 5\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "How many regions do we have? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from region\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from region\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Count the number of regions. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from region\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from region\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "How many regions do we have? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_code\", \"from\": \"from region\"}",
    "out": "sql[\"select\"] = \"select count(*)\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from region\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Count the number of regions. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_code\", \"from\": \"from region\"}",
    "out": "sql[\"select\"] = \"select count(*)\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from region\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Show all region code and region name sorted by the codes. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_code\", \"from\": \"from region\"}",
    "out": "sql[\"select\"] = \"select region.region_code, region.region_name\"\nsql[\"orderBy\"] = \"order by region.region_code asc\" <s> sql = {\"select\": \"select region.region_code, region.region_name\", \"from\": \"from region\", \"orderBy\": \"order by region.region_code asc\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the codes and names for all regions, sorted by codes? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_code\", \"from\": \"from region\", \"orderBy\": \"order by region.region_code asc, region.region_name asc\"}",
    "out": "sql[\"select\"] = \"select region.region_code, region.region_name\"\nsql[\"orderBy\"] = \"order by region.region_code asc\" <s> sql = {\"select\": \"select region.region_code, region.region_name\", \"from\": \"from region\", \"orderBy\": \"order by region.region_code asc\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "List all region names in alphabetical order. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_code\", \"from\": \"from region\"}",
    "out": "sql[\"select\"] = \"select region.region_name\"\nsql[\"orderBy\"] = \"order by region.region_name asc\" <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region\", \"orderBy\": \"order by region.region_name asc\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the names of the regions in alphabetical order? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region\", \"orderBy\": \"order by region.region_name desc\"}",
    "out": "sql[\"orderBy\"] = \"order by region.region_name asc\" <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region\", \"orderBy\": \"order by region.region_name asc\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Show names for all regions except for Denmark. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name ( Denmark ) | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region\", \"where\": \"where region.region_id != \\\"Denmark\\\"\"}",
    "out": "sql[\"where\"] = \"where region.region_name != \"Denmark\"\" <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region\", \"where\": \"where region.region_name != \\\"Denmark\\\"\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Return the names of all regions other than Denmark. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name ( Denmark ) | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region\"}",
    "out": "sql[\"where\"] = \"where region.region_name != \"Denmark\"\" <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region\", \"where\": \"where region.region_name != \\\"Denmark\\\"\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "How many storms had death records? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select count(*), storm.number_deaths\", \"from\": \"from storm\"}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"where\"] = \"where storm.number_deaths > 0\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from storm\", \"where\": \"where storm.number_deaths > 0\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Count the number of storms in which at least 1 person died. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select count(*)\", \"from\": \"from storm\", \"where\": \"where storm.number_deaths >= 1\"}",
    "out": "sql[\"where\"] = \"where storm.number_deaths > 0\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from storm\", \"where\": \"where storm.number_deaths > 0\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "List name, dates active, and number of deaths for all storms with at least 1 death. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.name, storm.dates_active, storm.number_deaths\", \"from\": \"from storm\", \"groupBy\": \"group by storm.number_deaths\", \"having\": \"having count(*) >= 1\"}",
    "out": "sql[\"where\"] = \"where storm.number_deaths >= 1\"\nsql.pop(\"groupBy\")\nsql.pop(\"having\") <s> sql = {\"select\": \"select storm.name, storm.dates_active, storm.number_deaths\", \"from\": \"from storm\", \"where\": \"where storm.number_deaths >= 1\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the names, dates active, and number of deaths for storms that had 1 or more death? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.name, storm.dates_active, storm.number_deaths\", \"from\": \"from storm\", \"groupBy\": \"group by storm.number_deaths\", \"having\": \"having count(*) >= 1\"}",
    "out": "sql[\"where\"] = \"where storm.number_deaths >= 1\"\nsql.pop(\"groupBy\")\nsql.pop(\"having\") <s> sql = {\"select\": \"select storm.name, storm.dates_active, storm.number_deaths\", \"from\": \"from storm\", \"where\": \"where storm.number_deaths >= 1\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Show the average and maximum damage for all storms with max speed higher than 1000. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {}",
    "out": "sql[\"select\"] = \"select avg(storm.damage_millions_usd), max(storm.damage_millions_usd)\"\nsql[\"from\"] = \"from storm\"\nsql[\"where\"] = \"where storm.max_speed > 1000\" <s> sql = {\"select\": \"select avg(storm.damage_millions_usd), max(storm.damage_millions_usd)\", \"from\": \"from storm\", \"where\": \"where storm.max_speed > 1000\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "What is the average and maximum damage in millions for storms that had a max speed over 1000? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.damage_millions_usd, max(storm.damage_millions_usd)\", \"from\": \"from storm\", \"where\": \"where storm.max_speed > 1000\"}",
    "out": "sql[\"select\"] = \"select avg(storm.damage_millions_usd), max(storm.damage_millions_usd)\" <s> sql = {\"select\": \"select avg(storm.damage_millions_usd), max(storm.damage_millions_usd)\", \"from\": \"from storm\", \"where\": \"where storm.max_speed > 1000\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "What is the total number of deaths and damage for all storms with a max speed greater than the average? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select avg(storm.max_speed)\", \"from\": \"from storm\", \"orderBy\": \"order by storm.max_speed desc\"}",
    "out": "sql[\"select\"] = \"select sum(storm.number_deaths), sum(storm.damage_millions_usd)\"\nsql[\"where\"] = {\"clause\": \"where storm.max_speed > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select avg(storm.max_speed)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from storm\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select sum(storm.number_deaths), sum(storm.damage_millions_usd)\", \"from\": \"from storm\", \"where\": {\"clause\": \"where storm.max_speed > (subquery0)\", \"subquery0\": {\"select\": \"select avg(storm.max_speed)\", \"from\": \"from storm\"}}}"
  },
  {
    "db_id": "storm_record",
    "inp": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select avg(storm.max_speed)\", \"from\": \"from storm\", \"orderBy\": \"order by storm.max_speed desc\"}",
    "out": "sql[\"select\"] = \"select sum(storm.number_deaths), sum(storm.damage_millions_usd)\"\nsql[\"where\"] = {\"clause\": \"where storm.max_speed > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select avg(storm.max_speed)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from storm\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select sum(storm.number_deaths), sum(storm.damage_millions_usd)\", \"from\": \"from storm\", \"where\": {\"clause\": \"where storm.max_speed > (subquery0)\", \"subquery0\": {\"select\": \"select avg(storm.max_speed)\", \"from\": \"from storm\"}}}"
  },
  {
    "db_id": "storm_record",
    "inp": "List name and damage for all storms in a descending order of max speed. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.name, storm.damage_millions_usd\", \"from\": \"from storm\"}",
    "out": "sql[\"orderBy\"] = \"order by storm.max_speed desc\" <s> sql = {\"select\": \"select storm.name, storm.damage_millions_usd\", \"from\": \"from storm\", \"orderBy\": \"order by storm.max_speed desc\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the names and damage in millions for storms, ordered by their max speeds descending? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.max_speed\", \"from\": \"from storm\", \"groupBy\": \"group by storm.max_speed, storm.max_speed\", \"orderBy\": \"order by count(storm.max_speed) asc\"}",
    "out": "sql[\"select\"] = \"select storm.name, storm.damage_millions_usd\"\nsql.pop(\"groupBy\")\nsql[\"orderBy\"] = \"order by storm.max_speed desc\" <s> sql = {\"select\": \"select storm.name, storm.damage_millions_usd\", \"from\": \"from storm\", \"orderBy\": \"order by storm.max_speed desc\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "How many regions are affected? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(distinct affected_region.region_id)\"\nsql[\"from\"] = \"from affected_region\" <s> sql = {\"select\": \"select count(distinct affected_region.region_id)\", \"from\": \"from affected_region\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Count the number of different affected regions. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select count(distinct affected_region.region_id), count(distinct affected_region.region_id)\", \"from\": \"from affected_region\"}",
    "out": "sql[\"select\"] = \"select count(distinct affected_region.region_id)\" <s> sql = {\"select\": \"select count(distinct affected_region.region_id)\", \"from\": \"from affected_region\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Show the name for regions not affected. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select affected_region.region_id\", \"from\": \"from affected_region\"}",
    "out": "sql[\"select\"] = \"select region.region_name\"\nsql[\"from\"] = \"from region\"\nsql[\"where\"] = {\"clause\": \"where region.region_id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select affected_region.region_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from affected_region\" <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region\", \"where\": {\"clause\": \"where region.region_id not in (subquery0)\", \"subquery0\": {\"select\": \"select affected_region.region_id\", \"from\": \"from affected_region\"}}}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the names of regions that were not affected? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select affected_region.region_id\", \"from\": \"from affected_region\"}",
    "out": "sql[\"select\"] = \"select region.region_name\"\nsql[\"from\"] = \"from region\"\nsql[\"where\"] = {\"clause\": \"where region.region_id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select affected_region.region_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from affected_region\" <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region\", \"where\": {\"clause\": \"where region.region_id not in (subquery0)\", \"subquery0\": {\"select\": \"select affected_region.region_id\", \"from\": \"from affected_region\"}}}"
  },
  {
    "db_id": "storm_record",
    "inp": "Show the name for regions and the number of storms for each region. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_name, *\", \"from\": \"from affected_region join region on affected_region.region_id = region.region_id\"}",
    "out": "sql[\"select\"] = \"select region.region_name, count(*)\"\nsql[\"from\"] = \"from region join affected_region on region.region_id = affected_region.region_id\"\nsql[\"groupBy\"] = \"group by region.region_id\" <s> sql = {\"select\": \"select region.region_name, count(*)\", \"from\": \"from region join affected_region on region.region_id = affected_region.region_id\", \"groupBy\": \"group by region.region_id\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "How many storms occured in each region? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_name\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id join region on affected_region.region_id = region.region_id\", \"groupBy\": \"group by region.region_id\"}",
    "out": "sql[\"select\"] = \"select region.region_name, count(*)\"\nsql[\"from\"] = \"from region join affected_region on region.region_id = affected_region.region_id\" <s> sql = {\"select\": \"select region.region_name, count(*)\", \"from\": \"from region join affected_region on region.region_id = affected_region.region_id\", \"groupBy\": \"group by region.region_id\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "List the name for storms and the number of affected regions for each storm. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.name, affected_region.storm_id\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\"}",
    "out": "sql[\"select\"] = \"select storm.name, count(*)\"\nsql[\"groupBy\"] = \"group by storm.storm_id\" <s> sql = {\"select\": \"select storm.name, count(*)\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "How many regions were affected by each storm? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select count(*), affected_region.storm_id\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\"}",
    "out": "sql[\"select\"] = \"select storm.name, count(*)\" <s> sql = {\"select\": \"select storm.name, count(*)\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "What is the storm name and max speed which affected the greatest number of regions? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.name, storm.max_speed\", \"from\": \"from affected_region join storm on affected_region.storm_id = storm.storm_id\", \"groupBy\": \"group by storm.storm_id\"}",
    "out": "sql[\"from\"] = \"from storm join affected_region on storm.storm_id = affected_region.storm_id\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select storm.name, storm.max_speed\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Return the name and max speed of the storm that affected the most regions. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.storm_id\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\"}",
    "out": "sql[\"select\"] = \"select storm.name, storm.max_speed\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select storm.name, storm.max_speed\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Show the name of storms which don't have affected region in record. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select affected_region.storm_id\", \"from\": \"from affected_region\"}",
    "out": "sql[\"select\"] = \"select storm.name\"\nsql[\"from\"] = \"from storm\"\nsql[\"where\"] = {\"clause\": \"where storm.storm_id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select affected_region.storm_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from affected_region\" <s> sql = {\"select\": \"select storm.name\", \"from\": \"from storm\", \"where\": {\"clause\": \"where storm.storm_id not in (subquery0)\", \"subquery0\": {\"select\": \"select affected_region.storm_id\", \"from\": \"from affected_region\"}}}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the names of storms that did not affect any regions? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {}",
    "out": "sql[\"select\"] = \"select storm.name\"\nsql[\"from\"] = \"from storm\"\nsql[\"where\"] = {\"clause\": \"where storm.storm_id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select affected_region.storm_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from affected_region\" <s> sql = {\"select\": \"select storm.name\", \"from\": \"from storm\", \"where\": {\"clause\": \"where storm.storm_id not in (subquery0)\", \"subquery0\": {\"select\": \"select affected_region.storm_id\", \"from\": \"from affected_region\"}}}"
  },
  {
    "db_id": "storm_record",
    "inp": "Show storm name with at least two regions and 10 cities affected. | storm : storm_id , name ( Two ) , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {}",
    "out": "sql[\"select\"] = \"select storm.name\"\nsql[\"from\"] = \"from storm join affected_region on storm.storm_id = affected_region.storm_id\"\nsql[\"groupBy\"] = \"group by storm.storm_id\"\nsql[\"having\"] = \"having count(*) >= 2\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select storm.name\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from storm join affected_region on storm.storm_id = affected_region.storm_id\"\nsql[\"intersect\"][\"subquery0\"][\"groupBy\"] = \"group by storm.storm_id\"\nsql[\"intersect\"][\"subquery0\"][\"having\"] = \"having sum(affected_region.number_city_affected) >= 10\" <s> sql = {\"select\": \"select storm.name\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\", \"having\": \"having count(*) >= 2\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select storm.name\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\", \"having\": \"having sum(affected_region.number_city_affected) >= 10\"}}}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities? | storm : storm_id , name ( Two ) , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {}",
    "out": "sql[\"select\"] = \"select storm.name\"\nsql[\"from\"] = \"from storm join affected_region on storm.storm_id = affected_region.storm_id\"\nsql[\"groupBy\"] = \"group by storm.storm_id\"\nsql[\"having\"] = \"having count(*) >= 2\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select storm.name\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from storm join affected_region on storm.storm_id = affected_region.storm_id\"\nsql[\"intersect\"][\"subquery0\"][\"groupBy\"] = \"group by storm.storm_id\"\nsql[\"intersect\"][\"subquery0\"][\"having\"] = \"having sum(affected_region.number_city_affected) >= 10\" <s> sql = {\"select\": \"select storm.name\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\", \"having\": \"having count(*) >= 2\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select storm.name\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\", \"having\": \"having sum(affected_region.number_city_affected) >= 10\"}}}"
  },
  {
    "db_id": "storm_record",
    "inp": "Show all storm names except for those with at least two affected regions. | storm : storm_id , name ( Two ) , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.name\", \"from\": \"from affected_region join storm on affected_region.storm_id = storm.storm_id\", \"groupBy\": \"group by affected_region.storm_id\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select storm.name\", \"from\": \"from affected_region join storm on affected_region.storm_id = storm.storm_id\", \"groupBy\": \"group by affected_region.storm_id\"}}}",
    "out": "sql[\"from\"] = \"from storm\"\nsql.pop(\"groupBy\")\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from storm join affected_region on storm.storm_id = affected_region.storm_id\"\nsql[\"except\"][\"subquery0\"][\"groupBy\"] = \"group by storm.storm_id\"\nsql[\"except\"][\"subquery0\"][\"having\"] = \"having count(*) >= 2\" <s> sql = {\"select\": \"select storm.name\", \"from\": \"from storm\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select storm.name\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\", \"having\": \"having count(*) >= 2\"}}}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the names of storms that did not affect two or more regions? | storm : storm_id , name ( Two ) , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select affected_region.storm_id\", \"from\": \"from affected_region\", \"orderBy\": \"order by affected_region.storm_id asc\"}",
    "out": "sql[\"select\"] = \"select storm.name\"\nsql[\"from\"] = \"from storm\"\nsql.pop(\"orderBy\")\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select storm.name\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from storm join affected_region on storm.storm_id = affected_region.storm_id\"\nsql[\"except\"][\"subquery0\"][\"groupBy\"] = \"group by storm.storm_id\"\nsql[\"except\"][\"subquery0\"][\"having\"] = \"having count(*) >= 2\" <s> sql = {\"select\": \"select storm.name\", \"from\": \"from storm\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select storm.name\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id\", \"groupBy\": \"group by storm.storm_id\", \"having\": \"having count(*) >= 2\"}}}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the region names affected by the storm with a number of deaths of least 10? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_name\", \"from\": \"from affected_region join storm on affected_region.storm_id = storm.storm_id join region on affected_region.region_id = region.region_id\", \"where\": \"where storm.number_deaths >= 10\", \"orderBy\": \"order by region.region_name desc\"}",
    "out": "sql[\"from\"] = \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\", \"where\": \"where storm.number_deaths >= 10\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Return the names of the regions affected by storms that had a death count of at least 10. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {}",
    "out": "sql[\"select\"] = \"select region.region_name\"\nsql[\"from\"] = \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\"\nsql[\"where\"] = \"where storm.number_deaths >= 10\" <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\", \"where\": \"where storm.number_deaths >= 10\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Show all storm names affecting region \"Denmark\". | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name ( Denmark ) | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.name\", \"from\": \"from storm\"}",
    "out": "sql[\"from\"] = \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\"\nsql[\"where\"] = \"where region.region_name = \"Denmark\"\" <s> sql = {\"select\": \"select storm.name\", \"from\": \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\", \"where\": \"where region.region_name = \\\"Denmark\\\"\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the names of the storms that affected Denmark? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name ( Denmark ) | affected_region : region_id , storm_id , number_city_affected </s> sql = {}",
    "out": "sql[\"select\"] = \"select storm.name\"\nsql[\"from\"] = \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\"\nsql[\"where\"] = \"where region.region_name = \"Denmark\"\" <s> sql = {\"select\": \"select storm.name\", \"from\": \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\", \"where\": \"where region.region_name = \\\"Denmark\\\"\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Show the region name with at least two storms. | storm : storm_id , name ( Two ) , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {}",
    "out": "sql[\"select\"] = \"select region.region_name\"\nsql[\"from\"] = \"from region join affected_region on region.region_id = affected_region.region_id\"\nsql[\"groupBy\"] = \"group by region.region_id\"\nsql[\"having\"] = \"having count(*) >= 2\" <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region join affected_region on region.region_id = affected_region.region_id\", \"groupBy\": \"group by region.region_id\", \"having\": \"having count(*) >= 2\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the names of regions with two or more storms? | storm : storm_id , name ( Two ) , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_name\", \"from\": \"from storm join affected_region on storm.storm_id = affected_region.storm_id join region on affected_region.region_id = region.region_id\", \"groupBy\": \"group by region.region_id\", \"having\": \"having count(*) >= 2\"}",
    "out": "sql[\"from\"] = \"from region join affected_region on region.region_id = affected_region.region_id\" <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region join affected_region on region.region_id = affected_region.region_id\", \"groupBy\": \"group by region.region_id\", \"having\": \"having count(*) >= 2\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Find the names of the regions which were affected by the storm that killed the greatest number of people. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select max(storm.number_deaths)\", \"from\": \"from affected_region join storm on affected_region.storm_id = storm.storm_id\"}",
    "out": "sql[\"select\"] = \"select region.region_name\"\nsql[\"from\"] = \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\"\nsql[\"orderBy\"] = \"order by storm.number_deaths desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\", \"orderBy\": \"order by storm.number_deaths desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the names of regions that were affected by the storm in which the most people died? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select region.region_name\", \"from\": \"from region\"}",
    "out": "sql[\"from\"] = \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\"\nsql[\"orderBy\"] = \"order by storm.number_deaths desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select region.region_name\", \"from\": \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\", \"orderBy\": \"order by storm.number_deaths desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "storm_record",
    "inp": "Find the name of the storm that affected both Afghanistan and Albania regions. | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name ( Afghanistan , Albania ) | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.name\", \"from\": \"from affected_region join storm on affected_region.storm_id = storm.storm_id join region on affected_region.region_id = region.region_id\", \"where\": \"where region.region_name = \\\"Afghanistan\\\"\"}",
    "out": "sql[\"from\"] = \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select storm.name\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where region.region_name = \"Albania\"\" <s> sql = {\"select\": \"select storm.name\", \"from\": \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\", \"where\": \"where region.region_name = \\\"Afghanistan\\\"\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select storm.name\", \"from\": \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\", \"where\": \"where region.region_name = \\\"Albania\\\"\"}}}"
  },
  {
    "db_id": "storm_record",
    "inp": "What are the names of the storms that affected both the regions of Afghanistan and Albania? | storm : storm_id , name , dates_active , max_speed , damage_millions_usd , number_deaths | region : region_id , region_code , region_name ( Afghanistan , Albania ) | affected_region : region_id , storm_id , number_city_affected </s> sql = {\"select\": \"select storm.name\", \"from\": \"from affected_region join storm on affected_region.storm_id = storm.storm_id join region on affected_region.region_id = region.region_id\", \"where\": \"where region.region_name = \\\"Afghanistan\\\"\"}",
    "out": "sql[\"from\"] = \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select storm.name\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where region.region_name = \"Albania\"\" <s> sql = {\"select\": \"select storm.name\", \"from\": \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\", \"where\": \"where region.region_name = \\\"Afghanistan\\\"\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select storm.name\", \"from\": \"from affected_region join region on affected_region.region_id = region.region_id join storm on affected_region.storm_id = storm.storm_id\", \"where\": \"where region.region_name = \\\"Albania\\\"\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the titles of all movies directed by steven spielberg. | movie : mid , title , year , director ( Steven Spielberg ) | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.director = \"Steven Spielberg\"\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"Steven Spielberg\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all movies directed by Steven Spielberg? | movie : mid , title , year , director ( Steven Spielberg ) | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.director = \"Steven Spielberg\"\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"Steven Spielberg\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the name of the movie produced after 2000 and directed by James Cameron? | movie : mid , title , year , director ( James Cameron ) | reviewer : rid , name ( James Cameron ) | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.director = \"James Cameron\" and movie.year > 2000\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"James Cameron\\\" and movie.year > 2000\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the titles of all movies that James Cameron directed after 2000? | movie : mid , title , year , director ( James Cameron ) | reviewer : rid , name ( James Cameron ) | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.director = \"James Cameron\" and movie.year > 2000\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"James Cameron\\\" and movie.year > 2000\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "How many movies were made before 2000? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.year, *\", \"from\": \"from movie\", \"where\": \"where movie.year < 2000\"}",
    "out": "sql[\"select\"] = \"select count(*)\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from movie\", \"where\": \"where movie.year < 2000\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "How many movies were made before 2000? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.year, *\", \"from\": \"from movie\", \"where\": \"where movie.year < 2000\"}",
    "out": "sql[\"select\"] = \"select count(*)\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from movie\", \"where\": \"where movie.year < 2000\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Who is the director of movie Avatar? | movie : mid , title ( Avatar ) , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.title = \\\"is the director of movie Avatar\\\"\"}",
    "out": "sql[\"where\"] = \"where movie.title = \"Avatar\"\" <s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.title = \\\"Avatar\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Who directed Avatar? | movie : mid , title ( Avatar ) , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.title = \\\"directed Avatar\\\"\"}",
    "out": "sql[\"where\"] = \"where movie.title = \"Avatar\"\" <s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.title = \\\"Avatar\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "How many reviewers listed? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select distinct reviewer.name\", \"from\": \"from reviewer\"}",
    "out": "sql[\"select\"] = \"select count(*)\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from reviewer\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "How many reviewers are there? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select distinct reviewer.name\", \"from\": \"from reviewer\"}",
    "out": "sql[\"select\"] = \"select count(*)\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from reviewer\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the id of the reviewer whose name has substring \u201cMike\u201d? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select reviewer.rid\"\nsql[\"from\"] = \"from reviewer\"\nsql[\"where\"] = \"where reviewer.name like \"%Mike%\"\" <s> sql = {\"select\": \"select reviewer.rid\", \"from\": \"from reviewer\", \"where\": \"where reviewer.name like \\\"%Mike%\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the id of the reviewer whose name includes the word \"Mike\"? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select reviewer.rid\"\nsql[\"from\"] = \"from reviewer\"\nsql[\"where\"] = \"where reviewer.name like \"%Mike%\"\" <s> sql = {\"select\": \"select reviewer.rid\", \"from\": \"from reviewer\", \"where\": \"where reviewer.name like \\\"%Mike%\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the reviewer id of Daniel Lewis? | movie : mid , title , year , director | reviewer : rid , name ( Daniel Lewis ) | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select reviewer.rid\"\nsql[\"from\"] = \"from reviewer\"\nsql[\"where\"] = \"where reviewer.name = \"Daniel Lewis\"\" <s> sql = {\"select\": \"select reviewer.rid\", \"from\": \"from reviewer\", \"where\": \"where reviewer.name = \\\"Daniel Lewis\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the id of the reviewer named Daniel Lewis? | movie : mid , title , year , director | reviewer : rid , name ( Daniel Lewis ) | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select reviewer.rid\"\nsql[\"from\"] = \"from reviewer\"\nsql[\"where\"] = \"where reviewer.name = \"Daniel Lewis\"\" <s> sql = {\"select\": \"select reviewer.rid\", \"from\": \"from reviewer\", \"where\": \"where reviewer.name = \\\"Daniel Lewis\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the total number of ratings that has more than 3 stars? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from rating\"\nsql[\"where\"] = \"where rating.stars > 3\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from rating\", \"where\": \"where rating.stars > 3\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "How many movie ratings have more than 3 stars? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from rating\"\nsql[\"where\"] = \"where rating.stars > 3\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from rating\", \"where\": \"where rating.stars > 3\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the lowest and highest rating star? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select max(rating.stars), min(rating.stars)\"\nsql[\"from\"] = \"from rating\" <s> sql = {\"select\": \"select max(rating.stars), min(rating.stars)\", \"from\": \"from rating\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the maximum and mininum number of stars a rating can receive? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select max(rating.stars), min(rating.stars)\"\nsql[\"from\"] = \"from rating\" <s> sql = {\"select\": \"select max(rating.stars), min(rating.stars)\", \"from\": \"from rating\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct movie.year\"\nsql[\"from\"] = \"from movie join rating on movie.mid = rating.mid\"\nsql[\"where\"] = \"where rating.stars >= 4\"\nsql[\"orderBy\"] = \"order by movie.year asc\" <s> sql = {\"select\": \"select distinct movie.year\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"where\": \"where rating.stars >= 4\", \"orderBy\": \"order by movie.year asc\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct movie.year\"\nsql[\"from\"] = \"from movie join rating on movie.mid = rating.mid\"\nsql[\"where\"] = \"where rating.stars >= 4\"\nsql[\"orderBy\"] = \"order by movie.year asc\" <s> sql = {\"select\": \"select distinct movie.year\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"where\": \"where rating.stars >= 4\", \"orderBy\": \"order by movie.year asc\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.director, movie.title\"\nsql[\"from\"] = \"from movie join rating on movie.mid = rating.mid\"\nsql[\"where\"] = \"where rating.stars = 5\" <s> sql = {\"select\": \"select movie.director, movie.title\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"where\": \"where rating.stars = 5\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title, movie.director\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"where\": \"where rating.stars = \\\"5\\\"\"}",
    "out": "sql[\"select\"] = \"select movie.director, movie.title\"\nsql[\"where\"] = \"where rating.stars = 5\" <s> sql = {\"select\": \"select movie.director, movie.title\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"where\": \"where rating.stars = 5\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the average rating star for each reviewer? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select reviewer.name, avg(rating.stars)\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\"}",
    "out": "sql[\"groupBy\"] = \"group by reviewer.name\" <s> sql = {\"select\": \"select reviewer.name, avg(rating.stars)\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"groupBy\": \"group by reviewer.name\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the average number of stars that each reviewer awards for a movie? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select avg(rating.stars), rating.rid\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on reviewer.rid = rating.rid\"}",
    "out": "sql[\"select\"] = \"select reviewer.name, avg(rating.stars)\"\nsql[\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"groupBy\"] = \"group by reviewer.name\" <s> sql = {\"select\": \"select reviewer.name, avg(rating.stars)\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"groupBy\": \"group by reviewer.name\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the titles of all movies that have no ratings. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = {\"clause\": \"where movie.mid not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select rating.mid\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from rating\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": {\"clause\": \"where movie.mid not in (subquery0)\", \"subquery0\": {\"select\": \"select rating.mid\", \"from\": \"from rating\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the titles of all movies that have not been rated? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = {\"clause\": \"where movie.mid not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select rating.mid\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from rating\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": {\"clause\": \"where movie.mid not in (subquery0)\", \"subquery0\": {\"select\": \"select rating.mid\", \"from\": \"from rating\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the names of all reviewers who have ratings with a NULL value for the date. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct reviewer.name\"\nsql[\"from\"] = \"from reviewer join rating on reviewer.rid = rating.rid\"\nsql[\"where\"] = \"where rating.ratingdate = \"null\"\" <s> sql = {\"select\": \"select distinct reviewer.name\", \"from\": \"from reviewer join rating on reviewer.rid = rating.rid\", \"where\": \"where rating.ratingdate = \\\"null\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the different names of all reviewers whose ratings do not have a date field? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct reviewer.name\"\nsql[\"from\"] = \"from reviewer join rating on reviewer.rid = rating.rid\"\nsql[\"where\"] = \"where rating.ratingdate = \"null\"\" <s> sql = {\"select\": \"select distinct reviewer.name\", \"from\": \"from reviewer join rating on reviewer.rid = rating.rid\", \"where\": \"where rating.ratingdate = \\\"null\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the average rating stars and title for the oldest movie? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select avg(rating.stars), avg(movie.title)\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"where\": \"where movie.year = 1\"}",
    "out": "sql[\"select\"] = \"select avg(rating.stars), movie.title\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"] = {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select min(movie.year)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from movie\" <s> sql = {\"select\": \"select avg(rating.stars), movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {\"select\": \"select min(movie.year)\", \"from\": \"from movie\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "For the oldest movie listed, what is its average rating and title? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select avg(movie.title)\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"where\": {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {\"select\": \"select min(movie.year)\", \"from\": \"from movie\"}}, \"groupBy\": \"group by movie.year\"}",
    "out": "sql[\"select\"] = \"select avg(rating.stars), movie.title\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql.pop(\"groupBy\") <s> sql = {\"select\": \"select avg(rating.stars), movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {\"select\": \"select min(movie.year)\", \"from\": \"from movie\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the name of the most recent movie? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select max(movie.year)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from movie\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {\"select\": \"select max(movie.year)\", \"from\": \"from movie\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the title of the newest movie? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select max(movie.year)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from movie\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {\"select\": \"select max(movie.year)\", \"from\": \"from movie\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the maximum stars and year for the most recent movie? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select max(rating.stars), movie.year\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"orderBy\": \"order by movie.year desc\"}",
    "out": "sql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"] = {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select max(movie.year)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from movie\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select max(rating.stars), movie.year\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {\"select\": \"select max(movie.year)\", \"from\": \"from movie\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is highest rating for the most recent movie and when was it released? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select max(rating.stars), max(rating.ratingdate)\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"orderBy\": \"order by rating.stars desc\"}",
    "out": "sql[\"select\"] = \"select max(rating.stars), movie.year\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"] = {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select max(movie.year)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from movie\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select max(rating.stars), movie.year\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": {\"clause\": \"where movie.year = (subquery0)\", \"subquery0\": {\"select\": \"select max(movie.year)\", \"from\": \"from movie\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the names of movies whose created year is after all movies directed by Steven Spielberg? | movie : mid , title , year , director ( Steven Spielberg ) | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = {\"clause\": \"where movie.year > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select max(movie.year)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from movie\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where movie.director = \"Steven Spielberg\"\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": {\"clause\": \"where movie.year > (subquery0)\", \"subquery0\": {\"select\": \"select max(movie.year)\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"Steven Spielberg\\\"\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all movies that were created after the most recent Steven Spielberg film? | movie : mid , title , year , director ( Steven Spielberg ) | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.year\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"Steven Spielberg\\\"\"}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"where\"] = {\"clause\": \"where movie.year > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select max(movie.year)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from movie\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where movie.director = \"Steven Spielberg\"\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": {\"clause\": \"where movie.year > (subquery0)\", \"subquery0\": {\"select\": \"select max(movie.year)\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"Steven Spielberg\\\"\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron? | movie : mid , title , year , director ( James Cameron ) | reviewer : rid , name ( James Cameron ) | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"James Cameron\\\"\"}",
    "out": "sql[\"select\"] = \"select movie.title, movie.director\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"] = {\"clause\": \"where rating.stars > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select avg(rating.stars)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where movie.director = \"James Cameron\"\" <s> sql = {\"select\": \"select movie.title, movie.director\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": {\"clause\": \"where rating.stars > (subquery0)\", \"subquery0\": {\"select\": \"select avg(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": \"where movie.director = \\\"James Cameron\\\"\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating? | movie : mid , title , year , director ( James Cameron ) | reviewer : rid , name ( James Cameron ) | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select count(*)\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"where\": \"where movie.director = \\\"James Cameron\\\"\"}",
    "out": "sql[\"select\"] = \"select movie.title, movie.director\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"] = {\"clause\": \"where rating.stars > (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select avg(rating.stars)\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where movie.director = \"James Cameron\"\" <s> sql = {\"select\": \"select movie.title, movie.director\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": {\"clause\": \"where rating.stars > (subquery0)\", \"subquery0\": {\"select\": \"select avg(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": \"where movie.director = \\\"James Cameron\\\"\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select reviewer.name, movie.title, rating.ratingdate, rating.ratingdate\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on reviewer.rid = rating.rid\"}",
    "out": "sql[\"select\"] = \"select reviewer.name, movie.title, rating.stars, rating.ratingdate\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"orderBy\"] = \"order by reviewer.name asc, movie.title asc, rating.stars asc\" <s> sql = {\"select\": \"select reviewer.name, movie.title, rating.stars, rating.ratingdate\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"orderBy\": \"order by reviewer.name asc, movie.title asc, rating.stars asc\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select reviewer.name, movie.title, rating.stars, rating.ratingdate\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on rating.rid = reviewer.rid\"}",
    "out": "sql[\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"orderBy\"] = \"order by reviewer.name asc, movie.title asc, rating.stars asc\" <s> sql = {\"select\": \"select reviewer.name, movie.title, rating.stars, rating.ratingdate\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"orderBy\": \"order by reviewer.name asc, movie.title asc, rating.stars asc\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the names of all reviewers who have contributed three or more ratings. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select reviewer.name\"\nsql[\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"groupBy\"] = \"group by rating.rid\"\nsql[\"having\"] = \"having count(*) >= 3\" <s> sql = {\"select\": \"select reviewer.name\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"groupBy\": \"group by rating.rid\", \"having\": \"having count(*) >= 3\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all reviewers that have rated 3 or more movies? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select reviewer.name\", \"from\": \"from reviewer join rating on reviewer.rid = rating.rid\", \"groupBy\": \"group by reviewer.name\", \"having\": \"having count(*) >= 3\"}",
    "out": "sql[\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"groupBy\"] = \"group by rating.rid\" <s> sql = {\"select\": \"select reviewer.name\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"groupBy\": \"group by rating.rid\", \"having\": \"having count(*) >= 3\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the names of all reviewers who rated Gone with the Wind. | movie : mid , title ( Gone with the Wind ) , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct reviewer.name\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"] = \"where movie.title = \"Gone with the Wind\"\" <s> sql = {\"select\": \"select distinct reviewer.name\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where movie.title = \\\"Gone with the Wind\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all the different reviewers who rates Gone with the Wind? | movie : mid , title ( Gone with the Wind ) , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct reviewer.name\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"] = \"where movie.title = \"Gone with the Wind\"\" <s> sql = {\"select\": \"select distinct reviewer.name\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where movie.title = \\\"Gone with the Wind\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the names of all directors whose movies are rated by Sarah Martinez. | movie : mid , title , year , director | reviewer : rid , name ( Sarah Martinez ) | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct movie.director\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"] = \"where reviewer.name = \"Sarah Martinez\"\" <s> sql = {\"select\": \"select distinct movie.director\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Sarah Martinez\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all directors whose movies have been reviewed by Sarah Martinez? | movie : mid , title , year , director | reviewer : rid , name ( Sarah Martinez ) | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct movie.director\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"] = \"where reviewer.name = \"Sarah Martinez\"\" <s> sql = {\"select\": \"select distinct movie.director\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Sarah Martinez\\\"\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select reviewer.name, movie.title, rating.stars\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on reviewer.rid = rating.rid\"}",
    "out": "sql[\"select\"] = \"select distinct reviewer.name, movie.title, rating.stars\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"] = \"where movie.director = reviewer.name\" <s> sql = {\"select\": \"select distinct reviewer.name, movie.title, rating.stars\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where movie.director = reviewer.name\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select distinct reviewer.name, movie.title, movie.director\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on rating.rid = reviewer.rid\"}",
    "out": "sql[\"select\"] = \"select distinct reviewer.name, movie.title, rating.stars\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"] = \"where movie.director = reviewer.name\" <s> sql = {\"select\": \"select distinct reviewer.name, movie.title, rating.stars\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where movie.director = reviewer.name\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Return all reviewer names and movie names together in a single list. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\"}",
    "out": "sql[\"select\"] = \"select reviewer.name\"\nsql[\"from\"] = \"from reviewer\"\nsql[\"union\"] = {\"clause\": \"union subquery0\", \"subquery0\": {}}\nsql[\"union\"][\"subquery0\"][\"select\"] = \"select movie.title\"\nsql[\"union\"][\"subquery0\"][\"from\"] = \"from movie\" <s> sql = {\"select\": \"select reviewer.name\", \"from\": \"from reviewer\", \"union\": {\"clause\": \"union subquery0\", \"subquery0\": {\"select\": \"select movie.title\", \"from\": \"from movie\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all the reviewers and movie names? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select reviewer.name\"\nsql[\"from\"] = \"from reviewer\"\nsql[\"union\"] = {\"clause\": \"union subquery0\", \"subquery0\": {}}\nsql[\"union\"][\"subquery0\"][\"select\"] = \"select movie.title\"\nsql[\"union\"][\"subquery0\"][\"from\"] = \"from movie\" <s> sql = {\"select\": \"select reviewer.name\", \"from\": \"from reviewer\", \"union\": {\"clause\": \"union subquery0\", \"subquery0\": {\"select\": \"select movie.title\", \"from\": \"from movie\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the titles of all movies not reviewed by Chris Jackson. | movie : mid , title , year , director | reviewer : rid , name ( Chris Jackson ) | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Chris Jackson\\\"\"}",
    "out": "sql[\"select\"] = \"select distinct movie.title\"\nsql[\"from\"] = \"from movie\"\nsql.pop(\"where\")\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select movie.title\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where reviewer.name = \"Chris Jackson\"\" <s> sql = {\"select\": \"select distinct movie.title\", \"from\": \"from movie\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Chris Jackson\\\"\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the titles of all movies that were not reviewed by Chris Jackson? | movie : mid , title , year , director | reviewer : rid , name ( Chris Jackson ) | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct movie.title\"\nsql[\"from\"] = \"from movie\"\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select movie.title\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where reviewer.name = \"Chris Jackson\"\" <s> sql = {\"select\": \"select distinct movie.title\", \"from\": \"from movie\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Chris Jackson\\\"\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title, movie.director\"\nsql[\"from\"] = \"from movie join movie on movie.director = movie.director\"\nsql[\"where\"] = \"where movie.title != movie.title\"\nsql[\"orderBy\"] = \"order by movie.director asc, movie.title asc\" <s> sql = {\"select\": \"select movie.title, movie.director\", \"from\": \"from movie join movie on movie.director = movie.director\", \"where\": \"where movie.title != movie.title\", \"orderBy\": \"order by movie.director asc, movie.title asc\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "For all directors who have directed more than one movie, what movies have they directed and what are their names? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title, movie.director\"\nsql[\"from\"] = \"from movie join movie on movie.director = movie.director\"\nsql[\"where\"] = \"where movie.title != movie.title\"\nsql[\"orderBy\"] = \"order by movie.director asc, movie.title asc\" <s> sql = {\"select\": \"select movie.title, movie.director\", \"from\": \"from movie join movie on movie.director = movie.director\", \"where\": \"where movie.title != movie.title\", \"orderBy\": \"order by movie.director asc, movie.title asc\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "For directors who had more than one movie, return the titles and produced years of all movies directed by them. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title, movie.year\", \"from\": \"from movie\", \"groupBy\": \"group by movie.director\", \"having\": \"having count(*) > 1\"}",
    "out": "sql[\"from\"] = \"from movie join movie on movie.director = movie.director\"\nsql[\"where\"] = \"where movie.title != movie.title\"\nsql.pop(\"groupBy\")\nsql.pop(\"having\") <s> sql = {\"select\": \"select movie.title, movie.year\", \"from\": \"from movie join movie on movie.director = movie.director\", \"where\": \"where movie.title != movie.title\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "For each director who directed more than one movie, what are the titles and dates of release for all those movies? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title, movie.year\", \"from\": \"from movie\", \"groupBy\": \"group by movie.director\", \"having\": \"having count(*) > 1\"}",
    "out": "sql[\"from\"] = \"from movie join movie on movie.director = movie.director\"\nsql[\"where\"] = \"where movie.title != movie.title\"\nsql.pop(\"groupBy\")\nsql.pop(\"having\") <s> sql = {\"select\": \"select movie.title, movie.year\", \"from\": \"from movie join movie on movie.director = movie.director\", \"where\": \"where movie.title != movie.title\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of the directors who made exactly one movie? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.director\"\nsql[\"from\"] = \"from movie\"\nsql[\"groupBy\"] = \"group by movie.director\"\nsql[\"having\"] = \"having count(*) = 1\" <s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"groupBy\": \"group by movie.director\", \"having\": \"having count(*) = 1\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all directors who made one movie? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\"}",
    "out": "sql[\"groupBy\"] = \"group by movie.director\"\nsql[\"having\"] = \"having count(*) = 1\" <s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"groupBy\": \"group by movie.director\", \"having\": \"having count(*) = 1\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of the directors who made exactly one movie excluding director NULL? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.director\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.director != \"null\"\"\nsql[\"groupBy\"] = \"group by movie.director\"\nsql[\"having\"] = \"having count(*) = 1\" <s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.director != \\\"null\\\"\", \"groupBy\": \"group by movie.director\", \"having\": \"having count(*) = 1\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all directors who have made one movie except for the director named NULL? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.director\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.director != \"null\"\"\nsql[\"groupBy\"] = \"group by movie.director\"\nsql[\"having\"] = \"having count(*) = 1\" <s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.director != \\\"null\\\"\", \"groupBy\": \"group by movie.director\", \"having\": \"having count(*) = 1\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "How many movie reviews does each director get? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.director, count(*)\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on rating.rid = reviewer.rid\"}",
    "out": "sql[\"select\"] = \"select count(*), movie.director\"\nsql[\"from\"] = \"from movie join rating on movie.mid = rating.mid\"\nsql[\"groupBy\"] = \"group by movie.director\" <s> sql = {\"select\": \"select count(*), movie.director\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"groupBy\": \"group by movie.director\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "For each director, how many reviews have they received? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.director, count(*)\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on rating.rid = reviewer.rid\"}",
    "out": "sql[\"select\"] = \"select count(*), movie.director\"\nsql[\"from\"] = \"from movie join rating on movie.mid = rating.mid\"\nsql[\"groupBy\"] = \"group by movie.director\" <s> sql = {\"select\": \"select count(*), movie.director\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"groupBy\": \"group by movie.director\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the movies with the highest average rating. Return the movie titles and average rating. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select avg(rating.stars), movie.title\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"orderBy\": \"order by rating.stars desc\", \"limit\": \"limit 1\"}",
    "out": "sql[\"select\"] = \"select movie.title, avg(rating.stars)\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"groupBy\"] = \"group by rating.mid\"\nsql[\"orderBy\"] = \"order by avg(rating.stars) desc\" <s> sql = {\"select\": \"select movie.title, avg(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"groupBy\": \"group by rating.mid\", \"orderBy\": \"order by avg(rating.stars) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the movie titles with the highest average rating and what are those ratings? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title, count(*)\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"groupBy\": \"group by movie.title\"}",
    "out": "sql[\"select\"] = \"select movie.title, avg(rating.stars)\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"groupBy\"] = \"group by rating.mid\"\nsql[\"orderBy\"] = \"order by avg(rating.stars) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select movie.title, avg(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"groupBy\": \"group by rating.mid\", \"orderBy\": \"order by avg(rating.stars) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the movie titles and average rating of the movies with the lowest average rating? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select avg(rating.stars)\", \"from\": \"from movie join rating on movie.mid = rating.mid\"}",
    "out": "sql[\"select\"] = \"select movie.title, avg(rating.stars)\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"groupBy\"] = \"group by rating.mid\"\nsql[\"orderBy\"] = \"order by avg(rating.stars) asc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select movie.title, avg(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"groupBy\": \"group by rating.mid\", \"orderBy\": \"order by avg(rating.stars) asc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the titles and average ratings for all movies that have the lowest average rating? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select avg(rating.stars)\", \"from\": \"from movie join rating on movie.mid = rating.mid\"}",
    "out": "sql[\"select\"] = \"select movie.title, avg(rating.stars)\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"groupBy\"] = \"group by rating.mid\"\nsql[\"orderBy\"] = \"order by avg(rating.stars) asc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select movie.title, avg(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"groupBy\": \"group by rating.mid\", \"orderBy\": \"order by avg(rating.stars) asc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names and years of the movies that has the top 3 highest rating star? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.mid, movie.title, movie.year\", \"from\": \"from movie join rating on movie.mid = rating.mid\"}",
    "out": "sql[\"select\"] = \"select movie.title, movie.year\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"orderBy\"] = \"order by rating.stars desc\"\nsql[\"limit\"] = \"limit 3\" <s> sql = {\"select\": \"select movie.title, movie.year\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"orderBy\": \"order by rating.stars desc\", \"limit\": \"limit 3\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names and years released for the movies with the top 3 highest ratings? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title, movie.year\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"groupBy\": \"group by movie.title, movie.year\"}",
    "out": "sql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql.pop(\"groupBy\")\nsql[\"orderBy\"] = \"order by rating.stars desc\"\nsql[\"limit\"] = \"limit 3\" <s> sql = {\"select\": \"select movie.title, movie.year\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"orderBy\": \"order by rating.stars desc\", \"limit\": \"limit 3\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title, rating.stars, movie.director, max(rating.stars)\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"] = \"where movie.director != \"null\"\"\nsql[\"groupBy\"] = \"group by movie.director\" <s> sql = {\"select\": \"select movie.title, rating.stars, movie.director, max(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": \"where movie.director != \\\"null\\\"\", \"groupBy\": \"group by movie.director\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "For each director, what are the titles and ratings for all the movies they reviewed? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title, count(*)\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on rating.rid = reviewer.rid\", \"groupBy\": \"group by reviewer.name\"}",
    "out": "sql[\"select\"] = \"select movie.title, rating.stars, movie.director, max(rating.stars)\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"] = \"where movie.director != \"null\"\"\nsql[\"groupBy\"] = \"group by movie.director\" <s> sql = {\"select\": \"select movie.title, rating.stars, movie.director, max(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": \"where movie.director != \\\"null\\\"\", \"groupBy\": \"group by movie.director\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the title and star rating of the movie that got the least rating star for each reviewer. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title, rating.stars, min(rating.stars)\", \"from\": \"from movie join rating on movie.mid = rating.rid\", \"groupBy\": \"group by rating.rid\", \"orderBy\": \"order by count(*) asc\"}",
    "out": "sql[\"select\"] = \"select movie.title, rating.rid, rating.stars, min(rating.stars)\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select movie.title, rating.rid, rating.stars, min(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"groupBy\": \"group by rating.rid\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "For each reviewer id, what is the title and rating for the movie with the smallest rating? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title, rating.rid\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"groupBy\": \"group by rating.rid\", \"orderBy\": \"order by count(*) asc\"}",
    "out": "sql[\"select\"] = \"select movie.title, rating.rid, rating.stars, min(rating.stars)\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select movie.title, rating.rid, rating.stars, min(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"groupBy\": \"group by rating.rid\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the title and score of the movie with the lowest rating among all movies directed by each director. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title, movie.director, min(rating.stars)\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"groupBy\": \"group by movie.director\", \"orderBy\": \"order by rating.stars asc\"}",
    "out": "sql[\"select\"] = \"select movie.title, rating.stars, movie.director, min(rating.stars)\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select movie.title, rating.stars, movie.director, min(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"groupBy\": \"group by movie.director\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "For each director, what is the title and score of their most poorly rated movie? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title, movie.director, min(rating.stars)\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"groupBy\": \"group by movie.director\", \"orderBy\": \"order by rating.stars asc\"}",
    "out": "sql[\"select\"] = \"select movie.title, rating.stars, movie.director, min(rating.stars)\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select movie.title, rating.stars, movie.director, min(rating.stars)\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"groupBy\": \"group by movie.director\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the name of the movie that is rated by most of times? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"groupBy\": \"group by movie.mid\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}",
    "out": "sql[\"select\"] = \"select movie.title, rating.mid\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"groupBy\"] = \"group by rating.mid\" <s> sql = {\"select\": \"select movie.title, rating.mid\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"groupBy\": \"group by rating.mid\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the name of the movie that has been reviewed the most? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"groupBy\": \"group by rating.mid\", \"orderBy\": \"order by count(*) desc\"}",
    "out": "sql[\"select\"] = \"select movie.title, rating.mid\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select movie.title, rating.mid\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"groupBy\": \"group by rating.mid\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the titles of all movies that have rating star is between 3 and 5? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select rating.stars\", \"from\": \"from rating\"}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"] = \"where rating.stars between 3 and 5\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": \"where rating.stars between 3 and 5\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the titles of all movies that have between 3 and 5 stars? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select rating.stars\", \"from\": \"from rating\"}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"] = \"where rating.stars between 3 and 5\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": \"where rating.stars between 3 and 5\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the names of reviewers who had given higher than 3 star ratings. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select reviewer.name\"\nsql[\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"] = \"where rating.stars > 3\" <s> sql = {\"select\": \"select reviewer.name\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"where\": \"where rating.stars > 3\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of the reviewers who have rated a movie more than 3 stars before? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select reviewer.name\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where rating.stars > 3\"}",
    "out": "sql[\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\" <s> sql = {\"select\": \"select reviewer.name\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"where\": \"where rating.stars > 3\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the average rating star for each movie that are not reviewed by Brittany Harris. | movie : mid , title , year , director | reviewer : rid , name ( Brittany Harris ) | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.mid\", \"from\": \"from movie\"}",
    "out": "sql[\"select\"] = \"select rating.mid, avg(rating.stars)\"\nsql[\"from\"] = \"from rating\"\nsql[\"where\"] = {\"clause\": \"where rating.mid not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select rating.mid\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where reviewer.name = \"Brittany Harris\"\"\nsql[\"groupBy\"] = \"group by rating.mid\" <s> sql = {\"select\": \"select rating.mid, avg(rating.stars)\", \"from\": \"from rating\", \"where\": {\"clause\": \"where rating.mid not in (subquery0)\", \"subquery0\": {\"select\": \"select rating.mid\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Brittany Harris\\\"\"}}, \"groupBy\": \"group by rating.mid\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What is the average rating for each movie that has never been reviewed by Brittany Harris? | movie : mid , title , year , director | reviewer : rid , name ( Brittany Harris ) | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.mid\", \"from\": \"from movie\"}",
    "out": "sql[\"select\"] = \"select rating.mid, avg(rating.stars)\"\nsql[\"from\"] = \"from rating\"\nsql[\"where\"] = {\"clause\": \"where rating.mid not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select rating.mid\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"][\"subquery0\"][\"where\"] = \"where reviewer.name = \"Brittany Harris\"\"\nsql[\"groupBy\"] = \"group by rating.mid\" <s> sql = {\"select\": \"select rating.mid, avg(rating.stars)\", \"from\": \"from rating\", \"where\": {\"clause\": \"where rating.mid not in (subquery0)\", \"subquery0\": {\"select\": \"select rating.mid\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Brittany Harris\\\"\"}}, \"groupBy\": \"group by rating.mid\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the ids of the movies that are not reviewed by Brittany Harris. | movie : mid , title , year , director | reviewer : rid , name ( Brittany Harris ) | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select rating.mid\"\nsql[\"from\"] = \"from rating\"\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select rating.mid\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where reviewer.name = \"Brittany Harris\"\" <s> sql = {\"select\": \"select rating.mid\", \"from\": \"from rating\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select rating.mid\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Brittany Harris\\\"\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the ids of all moviest hat have not been reviewed by Britanny Harris? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select rating.mid\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Britanny Harris\\\"\"}",
    "out": "sql[\"from\"] = \"from rating\"\nsql.pop(\"where\")\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select rating.mid\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where reviewer.name = \"Brittany Harris\"\" <s> sql = {\"select\": \"select rating.mid\", \"from\": \"from rating\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select rating.mid\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Brittany Harris\\\"\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the average rating star for each movie that received at least 2 ratings. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select avg(rating.stars)\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"groupBy\": \"group by rating.mid\", \"having\": \"having count(*) >= 2\"}",
    "out": "sql[\"select\"] = \"select rating.mid, avg(rating.stars)\"\nsql[\"from\"] = \"from rating\" <s> sql = {\"select\": \"select rating.mid, avg(rating.stars)\", \"from\": \"from rating\", \"groupBy\": \"group by rating.mid\", \"having\": \"having count(*) >= 2\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "For each movie that received more than 3 reviews, what is the average rating? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"groupBy\": \"group by rating.mid\", \"having\": \"having count(*) > 3\"}",
    "out": "sql[\"select\"] = \"select rating.mid, avg(rating.stars)\"\nsql[\"from\"] = \"from rating\"\nsql[\"having\"] = \"having count(*) >= 2\" <s> sql = {\"select\": \"select rating.mid, avg(rating.stars)\", \"from\": \"from rating\", \"groupBy\": \"group by rating.mid\", \"having\": \"having count(*) >= 2\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "find the ids of reviewers who did not give 4 star. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select rating.rid\"\nsql[\"from\"] = \"from rating\"\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select rating.rid\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from rating\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where rating.stars = 4\" <s> sql = {\"select\": \"select rating.rid\", \"from\": \"from rating\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select rating.rid\", \"from\": \"from rating\", \"where\": \"where rating.stars = 4\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the ids of all reviewers who did not give 4 stars? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select rating.rid\"\nsql[\"from\"] = \"from rating\"\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select rating.rid\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from rating\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where rating.stars = 4\" <s> sql = {\"select\": \"select rating.rid\", \"from\": \"from rating\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select rating.rid\", \"from\": \"from rating\", \"where\": \"where rating.stars = 4\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "Find the ids of reviewers who didn't only give 4 star. | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select rating.rid\"\nsql[\"from\"] = \"from rating\"\nsql[\"where\"] = \"where rating.stars != 4\" <s> sql = {\"select\": \"select rating.rid\", \"from\": \"from rating\", \"where\": \"where rating.stars != 4\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the ids of all reviewers who have not given 4 stars at least once? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select rating.rid\"\nsql[\"from\"] = \"from rating\"\nsql[\"where\"] = \"where rating.stars != 4\" <s> sql = {\"select\": \"select rating.rid\", \"from\": \"from rating\", \"where\": \"where rating.stars != 4\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris? | movie : mid , title , year , director | reviewer : rid , name ( Brittany Harris ) | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Brittany Harris\\\"\"}",
    "out": "sql[\"select\"] = \"select distinct movie.title\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"] = \"where reviewer.name = \"Brittany Harris\" or movie.year > 2000\" <s> sql = {\"select\": \"select distinct movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Brittany Harris\\\" or movie.year > 2000\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris? | movie : mid , title , year , director | reviewer : rid , name ( Brittany Harris ) | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie join rating on movie.mid = rating.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Brittany Harris\\\"\"}",
    "out": "sql[\"select\"] = \"select distinct movie.title\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"] = \"where reviewer.name = \"Brittany Harris\" or movie.year > 2000\" <s> sql = {\"select\": \"select distinct movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid join reviewer on rating.rid = reviewer.rid\", \"where\": \"where reviewer.name = \\\"Brittany Harris\\\" or movie.year > 2000\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are names of the movies that are either made before 1980 or directed by James Cameron? | movie : mid , title , year , director ( James Cameron ) | reviewer : rid , name ( James Cameron ) | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select min(movie.year)\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"James Cameron\\\" or movie.director = \\\"James Cameron\\\"\"}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"where\"] = \"where movie.director = \"James Cameron\" or movie.year < 1980\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"James Cameron\\\" or movie.year < 1980\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all movies made before 1980 or had James Cameron as the director? | movie : mid , title , year , director ( James Cameron ) | reviewer : rid , name ( James Cameron ) | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select min(movie.year)\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"James Cameron\\\" or movie.director = \\\"James Cameron\\\"\"}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"where\"] = \"where movie.director = \"James Cameron\" or movie.year < 1980\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie\", \"where\": \"where movie.director = \\\"James Cameron\\\" or movie.year < 1980\"}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of reviewers who had rated 3 star and 4 star? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select reviewer.name\"\nsql[\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"] = \"where rating.stars = 3\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select reviewer.name\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where rating.stars = 4\" <s> sql = {\"select\": \"select reviewer.name\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"where\": \"where rating.stars = 3\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select reviewer.name\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"where\": \"where rating.stars = 4\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all reviewers that have given 3 or 4 stars for reviews? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select reviewer.name\", \"from\": \"from reviewer join rating on reviewer.rid = rating.rid\", \"where\": \"where rating.stars <= 3\"}",
    "out": "sql[\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"where\"] = \"where rating.stars = 3\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select reviewer.name\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from rating join reviewer on rating.rid = reviewer.rid\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where rating.stars = 4\" <s> sql = {\"select\": \"select reviewer.name\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"where\": \"where rating.stars = 3\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select reviewer.name\", \"from\": \"from rating join reviewer on rating.rid = reviewer.rid\", \"where\": \"where rating.stars = 4\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of movies that get 3 star and 4 star? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title\"\nsql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"] = \"where rating.stars = 3\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select movie.title\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where rating.stars = 4\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": \"where rating.stars = 3\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": \"where rating.stars = 4\"}}}"
  },
  {
    "db_id": "movie_1",
    "inp": "What are the names of all movies that received 3 or 4 stars? | movie : mid , title , year , director | reviewer : rid , name | rating : rid , mid , stars , ratingdate </s> sql = {\"select\": \"select movie.title\", \"from\": \"from movie join rating on movie.mid = rating.mid\", \"where\": \"where rating.stars = 3 or rating.stars < 4\"}",
    "out": "sql[\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"where\"] = \"where rating.stars = 3\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select movie.title\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from rating join movie on rating.mid = movie.mid\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where rating.stars = 4\" <s> sql = {\"select\": \"select movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": \"where rating.stars = 3\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select movie.title\", \"from\": \"from rating join movie on rating.mid = movie.mid\", \"where\": \"where rating.stars = 4\"}}}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "How many assessment notes are there in total? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select count(*)\", \"from\": \"from assessment_notes join teachers on assessment_notes.student_id = teachers.teacher_id\"}",
    "out": "sql[\"from\"] = \"from assessment_notes\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from assessment_notes\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What are the dates of the assessment notes? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select assessment_notes.date_of_notes\"\nsql[\"from\"] = \"from assessment_notes\" <s> sql = {\"select\": \"select assessment_notes.date_of_notes\", \"from\": \"from assessment_notes\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "How many addresses have zip code 197? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from addresses\"\nsql[\"where\"] = \"where addresses.zip_postcode = \"197\"\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from addresses\", \"where\": \"where addresses.zip_postcode = \\\"197\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "How many distinct incident type codes are there? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(distinct behavior_incident.incident_type_code)\"\nsql[\"from\"] = \"from behavior_incident\" <s> sql = {\"select\": \"select count(distinct behavior_incident.incident_type_code)\", \"from\": \"from behavior_incident\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Return all distinct detention type codes. | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct detention.detention_type_code\"\nsql[\"from\"] = \"from detention\" <s> sql = {\"select\": \"select distinct detention.detention_type_code\", \"from\": \"from detention\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What are the start and end dates for incidents with incident type code \"NOISE\"? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code ( NOISE ) , incident_type_description ( Noise ) | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code ( NOISE ) , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select behavior_incident.date_incident_start, behavior_incident.date_incident_end\"\nsql[\"from\"] = \"from behavior_incident\"\nsql[\"where\"] = \"where behavior_incident.incident_type_code = \"NOISE\"\" <s> sql = {\"select\": \"select behavior_incident.date_incident_start, behavior_incident.date_incident_end\", \"from\": \"from behavior_incident\", \"where\": \"where behavior_incident.incident_type_code = \\\"NOISE\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Return all detention summaries. | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select teachers.middle_name\", \"from\": \"from teachers\"}",
    "out": "sql[\"select\"] = \"select detention.detention_summary\"\nsql[\"from\"] = \"from detention\" <s> sql = {\"select\": \"select detention.detention_summary\", \"from\": \"from detention\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Return the cell phone number and email address for all students. | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select students.cell_mobile_number, students.email_address\"\nsql[\"from\"] = \"from students\" <s> sql = {\"select\": \"select students.cell_mobile_number, students.email_address\", \"from\": \"from students\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name ( Emma ) , middle_name , last_name ( Rohan ) , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select students.email_address\"\nsql[\"from\"] = \"from students\"\nsql[\"where\"] = \"where students.first_name = \"Emma\" and students.last_name = \"Rohan\"\" <s> sql = {\"select\": \"select students.email_address\", \"from\": \"from students\", \"where\": \"where students.first_name = \\\"Emma\\\" and students.last_name = \\\"Rohan\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "How many distinct students have been in detention? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select teachers.cell_mobile_number, count(*)\", \"from\": \"from teachers\"}",
    "out": "sql[\"select\"] = \"select count(distinct students_in_detention.student_id)\"\nsql[\"from\"] = \"from students_in_detention\" <s> sql = {\"select\": \"select count(distinct students_in_detention.student_id)\", \"from\": \"from students_in_detention\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What is the gender of the teacher with last name \"Medhurst\"? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name ( Medhurst ) , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select teachers.gender\"\nsql[\"from\"] = \"from teachers\"\nsql[\"where\"] = \"where teachers.last_name = \"Medhurst\"\" <s> sql = {\"select\": \"select teachers.gender\", \"from\": \"from teachers\", \"where\": \"where teachers.last_name = \\\"Medhurst\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What is the incident type description for the incident type with code \"VIOLENCE\"? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code ( VIOLENCE ) , incident_type_description ( Violence ) | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code ( VIOLENCE ) , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select ref_incident_type.incident_type_description\"\nsql[\"from\"] = \"from ref_incident_type\"\nsql[\"where\"] = \"where ref_incident_type.incident_type_code = \"VIOLENCE\"\" <s> sql = {\"select\": \"select ref_incident_type.incident_type_description\", \"from\": \"from ref_incident_type\", \"where\": \"where ref_incident_type.incident_type_code = \\\"VIOLENCE\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the maximum and minimum monthly rental for all student addresses. | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select max(student_addresses.monthly_rental), min(student_addresses.monthly_rental)\"\nsql[\"from\"] = \"from student_addresses\" <s> sql = {\"select\": \"select max(student_addresses.monthly_rental), min(student_addresses.monthly_rental)\", \"from\": \"from student_addresses\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the first names of teachers whose email address contains the word \"man\". | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select teachers.first_name\"\nsql[\"from\"] = \"from teachers\"\nsql[\"where\"] = \"where teachers.email_address like \"%man%\"\" <s> sql = {\"select\": \"select teachers.first_name\", \"from\": \"from teachers\", \"where\": \"where teachers.email_address like \\\"%man%\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "List all information about the assessment notes sorted by date in ascending order. | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select assessment_notes.text_of_notes\", \"from\": \"from assessment_notes\", \"orderBy\": \"order by assessment_notes.date_of_notes asc\"}",
    "out": "sql[\"select\"] = \"select *\" <s> sql = {\"select\": \"select *\", \"from\": \"from assessment_notes\", \"orderBy\": \"order by assessment_notes.date_of_notes asc\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "List all cities of addresses in alphabetical order. | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select addresses.city\", \"from\": \"from addresses\"}",
    "out": "sql[\"orderBy\"] = \"order by addresses.city asc\" <s> sql = {\"select\": \"select addresses.city\", \"from\": \"from addresses\", \"orderBy\": \"order by addresses.city asc\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the first names and last names of teachers in alphabetical order of last name. | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select teachers.first_name, teachers.last_name\", \"from\": \"from teachers\", \"orderBy\": \"order by teachers.email_address asc, teachers.first_name asc\"}",
    "out": "sql[\"orderBy\"] = \"order by teachers.last_name asc\" <s> sql = {\"select\": \"select teachers.first_name, teachers.last_name\", \"from\": \"from teachers\", \"orderBy\": \"order by teachers.last_name asc\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find all information about student addresses, and sort by monthly rental in descending order. | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select *\", \"from\": \"from student_addresses join addresses on student_addresses.address_id = addresses.address_id\", \"groupBy\": \"group by student_addresses.monthly_rental\"}",
    "out": "sql[\"from\"] = \"from student_addresses\"\nsql.pop(\"groupBy\")\nsql[\"orderBy\"] = \"order by student_addresses.monthly_rental desc\" <s> sql = {\"select\": \"select *\", \"from\": \"from student_addresses\", \"orderBy\": \"order by student_addresses.monthly_rental desc\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the id and first name of the student that has the most number of assessment notes? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select students.first_name, students.student_id\", \"from\": \"from assessment_notes join students on assessment_notes.student_id = students.student_id\", \"groupBy\": \"group by students.student_id\", \"orderBy\": \"order by count(*) desc\"}",
    "out": "sql[\"select\"] = \"select assessment_notes.student_id, students.first_name\"\nsql[\"groupBy\"] = \"group by assessment_notes.student_id\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select assessment_notes.student_id, students.first_name\", \"from\": \"from assessment_notes join students on assessment_notes.student_id = students.student_id\", \"groupBy\": \"group by assessment_notes.student_id\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the ids and first names of the 3 teachers that have the most number of assessment notes? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select teachers.cell_mobile_number, teachers.other_details\", \"from\": \"from teachers join assessment_notes on teachers.teacher_id = assessment_notes.teacher_id\", \"groupBy\": \"group by assessment_notes.teacher_id\", \"orderBy\": \"order by count(*) desc\"}",
    "out": "sql[\"select\"] = \"select assessment_notes.teacher_id, teachers.first_name\"\nsql[\"from\"] = \"from assessment_notes join teachers on assessment_notes.teacher_id = teachers.teacher_id\"\nsql[\"limit\"] = \"limit 3\" <s> sql = {\"select\": \"select assessment_notes.teacher_id, teachers.first_name\", \"from\": \"from assessment_notes join teachers on assessment_notes.teacher_id = teachers.teacher_id\", \"groupBy\": \"group by assessment_notes.teacher_id\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 3\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the id and last name of the student that has the most behavior incidents? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select students.last_name, students.last_name\", \"from\": \"from students join students_in_detention on students.student_id = students_in_detention.student_id\"}",
    "out": "sql[\"select\"] = \"select behavior_incident.student_id, students.last_name\"\nsql[\"from\"] = \"from behavior_incident join students on behavior_incident.student_id = students.student_id\"\nsql[\"groupBy\"] = \"group by behavior_incident.student_id\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select behavior_incident.student_id, students.last_name\", \"from\": \"from behavior_incident join students on behavior_incident.student_id = students.student_id\", \"groupBy\": \"group by behavior_incident.student_id\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select detention.teacher_id, teachers.last_name\"\nsql[\"from\"] = \"from detention join teachers on detention.teacher_id = teachers.teacher_id\"\nsql[\"where\"] = \"where detention.detention_type_code = \"AFTER\"\"\nsql[\"groupBy\"] = \"group by detention.teacher_id\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select detention.teacher_id, teachers.last_name\", \"from\": \"from detention join teachers on detention.teacher_id = teachers.teacher_id\", \"where\": \"where detention.detention_type_code = \\\"AFTER\\\"\", \"groupBy\": \"group by detention.teacher_id\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What are the id and first name of the student whose addresses have the highest average monthly rental? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select students.student_id, students.first_name\", \"from\": \"from student_addresses join students on student_addresses.student_id = students.student_id\"}",
    "out": "sql[\"select\"] = \"select student_addresses.student_id, students.first_name\"\nsql[\"groupBy\"] = \"group by student_addresses.student_id\"\nsql[\"orderBy\"] = \"order by avg(student_addresses.monthly_rental) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select student_addresses.student_id, students.first_name\", \"from\": \"from student_addresses join students on student_addresses.student_id = students.student_id\", \"groupBy\": \"group by student_addresses.student_id\", \"orderBy\": \"order by avg(student_addresses.monthly_rental) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the id and city of the student address with the highest average monthly rental. | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select addresses.address_id, addresses.city\", \"from\": \"from student_addresses join addresses on student_addresses.student_id = addresses.address_id\", \"groupBy\": \"group by addresses.address_id\"}",
    "out": "sql[\"select\"] = \"select student_addresses.address_id, addresses.city\"\nsql[\"from\"] = \"from addresses join student_addresses on addresses.address_id = student_addresses.address_id\"\nsql[\"groupBy\"] = \"group by student_addresses.address_id\"\nsql[\"orderBy\"] = \"order by avg(student_addresses.monthly_rental) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select student_addresses.address_id, addresses.city\", \"from\": \"from addresses join student_addresses on addresses.address_id = student_addresses.address_id\", \"groupBy\": \"group by student_addresses.address_id\", \"orderBy\": \"order by avg(student_addresses.monthly_rental) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What are the code and description of the most frequent behavior incident type? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select behavior_incident.incident_type_code, ref_incident_type.incident_type_description\", \"from\": \"from behavior_incident join ref_incident_type on behavior_incident.incident_type_code = ref_incident_type.incident_type_code\"}",
    "out": "sql[\"groupBy\"] = \"group by behavior_incident.incident_type_code\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select behavior_incident.incident_type_code, ref_incident_type.incident_type_description\", \"from\": \"from behavior_incident join ref_incident_type on behavior_incident.incident_type_code = ref_incident_type.incident_type_code\", \"groupBy\": \"group by behavior_incident.incident_type_code\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What are the code and description of the least frequent detention type ? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select detention.detention_type_code, ref_detention_type.detention_type_description\"\nsql[\"from\"] = \"from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code\"\nsql[\"groupBy\"] = \"group by detention.detention_type_code\"\nsql[\"orderBy\"] = \"order by count(*) asc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select detention.detention_type_code, ref_detention_type.detention_type_description\", \"from\": \"from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code\", \"groupBy\": \"group by detention.detention_type_code\", \"orderBy\": \"order by count(*) asc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the dates of assessment notes for students with first name \"Fanny\". | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name ( Fanny ) , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select assessment_notes.date_of_notes\"\nsql[\"from\"] = \"from assessment_notes join students on assessment_notes.student_id = students.student_id\"\nsql[\"where\"] = \"where students.first_name = \"Fanny\"\" <s> sql = {\"select\": \"select assessment_notes.date_of_notes\", \"from\": \"from assessment_notes join students on assessment_notes.student_id = students.student_id\", \"where\": \"where students.first_name = \\\"Fanny\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the texts of assessment notes for teachers with last name \"Schuster\". | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name ( Schuster ) , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select assessment_notes.text_of_notes\"\nsql[\"from\"] = \"from assessment_notes join teachers on assessment_notes.teacher_id = teachers.teacher_id\"\nsql[\"where\"] = \"where teachers.last_name = \"Schuster\"\" <s> sql = {\"select\": \"select assessment_notes.text_of_notes\", \"from\": \"from assessment_notes join teachers on assessment_notes.teacher_id = teachers.teacher_id\", \"where\": \"where teachers.last_name = \\\"Schuster\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the start and end dates of behavior incidents of students with last name \"Fahey\". | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name ( Fahey ) , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select behavior_incident.date_incident_start, behavior_incident.date_incident_end\"\nsql[\"from\"] = \"from behavior_incident join students on behavior_incident.student_id = students.student_id\"\nsql[\"where\"] = \"where students.last_name = \"Fahey\"\" <s> sql = {\"select\": \"select behavior_incident.date_incident_start, behavior_incident.date_incident_end\", \"from\": \"from behavior_incident join students on behavior_incident.student_id = students.student_id\", \"where\": \"where students.last_name = \\\"Fahey\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the start and end dates of detentions of teachers with last name \"Schultz\". | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name ( Schultz ) , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select detention.datetime_detention_start, detention.datetime_detention_end\"\nsql[\"from\"] = \"from detention join teachers on detention.teacher_id = teachers.teacher_id\"\nsql[\"where\"] = \"where teachers.last_name = \"Schultz\"\" <s> sql = {\"select\": \"select detention.datetime_detention_start, detention.datetime_detention_end\", \"from\": \"from detention join teachers on detention.teacher_id = teachers.teacher_id\", \"where\": \"where teachers.last_name = \\\"Schultz\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What are the id and zip code of the address with the highest monthly rental? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select addresses.address_id, addresses.zip_postcode\", \"from\": \"from addresses join teachers on addresses.address_id = teachers.address_id\"}",
    "out": "sql[\"select\"] = \"select student_addresses.address_id, addresses.zip_postcode\"\nsql[\"from\"] = \"from addresses join student_addresses on addresses.address_id = student_addresses.address_id\"\nsql[\"orderBy\"] = \"order by student_addresses.monthly_rental desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select student_addresses.address_id, addresses.zip_postcode\", \"from\": \"from addresses join student_addresses on addresses.address_id = student_addresses.address_id\", \"orderBy\": \"order by student_addresses.monthly_rental desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What is the cell phone number of the student whose address has the lowest monthly rental? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select students.cell_mobile_number\", \"from\": \"from students join student_addresses on students.student_id = student_addresses.student_id\", \"groupBy\": \"group by student_addresses.monthly_rental\", \"orderBy\": \"order by student_addresses.monthly_rental asc\"}",
    "out": "sql[\"from\"] = \"from student_addresses join students on student_addresses.student_id = students.student_id\"\nsql.pop(\"groupBy\")\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select students.cell_mobile_number\", \"from\": \"from student_addresses join students on student_addresses.student_id = students.student_id\", \"orderBy\": \"order by student_addresses.monthly_rental asc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What are the monthly rentals of student addresses in Texas state? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county ( Texas ) , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select student_addresses.monthly_rental\"\nsql[\"from\"] = \"from addresses join student_addresses on addresses.address_id = student_addresses.address_id\"\nsql[\"where\"] = \"where addresses.state_province_county = \"Texas\"\" <s> sql = {\"select\": \"select student_addresses.monthly_rental\", \"from\": \"from addresses join student_addresses on addresses.address_id = student_addresses.address_id\", \"where\": \"where addresses.state_province_county = \\\"Texas\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What are the first names and last names of students with address in Wisconsin state? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county ( Wisconsin ) , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select students.first_name, students.last_name\"\nsql[\"from\"] = \"from addresses join students on addresses.address_id = students.address_id\"\nsql[\"where\"] = \"where addresses.state_province_county = \"Wisconsin\"\" <s> sql = {\"select\": \"select students.first_name, students.last_name\", \"from\": \"from addresses join students on addresses.address_id = students.address_id\", \"where\": \"where addresses.state_province_county = \\\"Wisconsin\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What are the line 1 and average monthly rentals of all student addresses? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select addresses.line_1, avg(student_addresses.monthly_rental)\"\nsql[\"from\"] = \"from addresses join student_addresses on addresses.address_id = student_addresses.address_id\"\nsql[\"groupBy\"] = \"group by student_addresses.address_id\" <s> sql = {\"select\": \"select addresses.line_1, avg(student_addresses.monthly_rental)\", \"from\": \"from addresses join student_addresses on addresses.address_id = student_addresses.address_id\", \"groupBy\": \"group by student_addresses.address_id\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What is the zip code of the address where the teacher with first name \"Lyla\" lives? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name ( Lyla ) , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select addresses.zip_postcode\"\nsql[\"from\"] = \"from addresses join teachers on addresses.address_id = teachers.address_id\"\nsql[\"where\"] = \"where teachers.first_name = \"Lyla\"\" <s> sql = {\"select\": \"select addresses.zip_postcode\", \"from\": \"from addresses join teachers on addresses.address_id = teachers.address_id\", \"where\": \"where teachers.first_name = \\\"Lyla\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What are the email addresses of teachers whose address has zip code \"918\"? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select teachers.email_address\"\nsql[\"from\"] = \"from addresses join teachers on addresses.address_id = teachers.address_id\"\nsql[\"where\"] = \"where addresses.zip_postcode = \"918\"\" <s> sql = {\"select\": \"select teachers.email_address\", \"from\": \"from addresses join teachers on addresses.address_id = teachers.address_id\", \"where\": \"where addresses.zip_postcode = \\\"918\\\"\"}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "How many students are not involved in any behavior incident? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select count(*)\", \"from\": \"from students\", \"where\": {\"clause\": \"where students.email_address in (subquery0)\", \"subquery0\": {\"select\": \"select behavior_incident.student_id\", \"from\": \"from behavior_incident\"}}}",
    "out": "sql[\"where\"][\"clause\"] = \"where students.student_id not in (subquery0)\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from students\", \"where\": {\"clause\": \"where students.student_id not in (subquery0)\", \"subquery0\": {\"select\": \"select behavior_incident.student_id\", \"from\": \"from behavior_incident\"}}}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "Find the last names of teachers who are not involved in any detention. | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select teachers.other_details, teachers.last_name\", \"from\": \"from teachers\"}",
    "out": "sql[\"select\"] = \"select teachers.last_name\"\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select teachers.last_name\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from teachers join detention on teachers.teacher_id = detention.teacher_id\" <s> sql = {\"select\": \"select teachers.last_name\", \"from\": \"from teachers\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select teachers.last_name\", \"from\": \"from teachers join detention on teachers.teacher_id = detention.teacher_id\"}}}"
  },
  {
    "db_id": "behavior_monitoring",
    "inp": "What are the line 1 of addresses shared by some students and some teachers? | ref_address_types : address_type_code , address_type_description | ref_detention_type : detention_type_code , detention_type_description | ref_incident_type : incident_type_code , incident_type_description | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | students : student_id , address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , date_first_rental , date_left_university , other_student_details | teachers : teacher_id , address_id , first_name , middle_name , last_name , gender , cell_mobile_number , email_address , other_details | assessment_notes : notes_id , student_id , teacher_id , date_of_notes , text_of_notes , other_details | behavior_incident : incident_id , incident_type_code , student_id , date_incident_start , date_incident_end , incident_summary , recommendations , other_details | detention : detention_id , detention_type_code , teacher_id , datetime_detention_start , datetime_detention_end , detention_summary , other_details | student_addresses : student_id , address_id , date_address_from , date_address_to , monthly_rental , other_details | students_in_detention : student_id , detention_id , incident_id </s> sql = {\"select\": \"select addresses.line_1\", \"from\": \"from addresses\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select addresses.line_1\", \"from\": \"from teachers join addresses on teachers.address_id = addresses.address_id\"}}}",
    "out": "sql[\"from\"] = \"from addresses join students on addresses.address_id = teachers.address_id\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from addresses join teachers on addresses.address_id = teachers.address_id\" <s> sql = {\"select\": \"select addresses.line_1\", \"from\": \"from addresses join students on addresses.address_id = teachers.address_id\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select addresses.line_1\", \"from\": \"from addresses join teachers on addresses.address_id = teachers.address_id\"}}}"
  },
  {
    "db_id": "culture_company",
    "inp": "How many book clubs are there? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from book_club\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from book_club\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Count the number of book clubs. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select count(*)\"\nsql[\"from\"] = \"from book_club\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from book_club\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "show the titles, and authors or editors for all books made after the year 1989. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {\"select\": \"select book_club.book_title, book_club.author_or_editor\", \"from\": \"from book_club join movie on book_club.book_title = movie.movie_id\", \"where\": \"where movie.year > 1989\"}",
    "out": "sql[\"from\"] = \"from book_club\"\nsql[\"where\"] = \"where book_club.year > 1989\" <s> sql = {\"select\": \"select book_club.book_title, book_club.author_or_editor\", \"from\": \"from book_club\", \"where\": \"where book_club.year > 1989\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "What are the titles and authors or editors that correspond to books made after 1989? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {\"select\": \"select movie.title, book_club.author_or_editor\", \"from\": \"from book_club join movie on book_club.book_title = movie.title\", \"where\": \"where movie.year > 1989\"}",
    "out": "sql[\"select\"] = \"select book_club.book_title, book_club.author_or_editor\"\nsql[\"from\"] = \"from book_club\"\nsql[\"where\"] = \"where book_club.year > 1989\" <s> sql = {\"select\": \"select book_club.book_title, book_club.author_or_editor\", \"from\": \"from book_club\", \"where\": \"where book_club.year > 1989\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Show all distinct publishers for books. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select distinct book_club.publisher\"\nsql[\"from\"] = \"from book_club\" <s> sql = {\"select\": \"select distinct book_club.publisher\", \"from\": \"from book_club\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "What are all the different book publishers? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {\"select\": \"select count(*)\", \"from\": \"from book_club\"}",
    "out": "sql[\"select\"] = \"select distinct book_club.publisher\" <s> sql = {\"select\": \"select distinct book_club.publisher\", \"from\": \"from book_club\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Show the years, book titles, and publishers for all books, in descending order by year. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select book_club.year, book_club.book_title, book_club.publisher\"\nsql[\"from\"] = \"from book_club\"\nsql[\"orderBy\"] = \"order by book_club.year desc\" <s> sql = {\"select\": \"select book_club.year, book_club.book_title, book_club.publisher\", \"from\": \"from book_club\", \"orderBy\": \"order by book_club.year desc\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "What are the years, titles, and publishers for all books, ordered by year descending? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select book_club.year, book_club.book_title, book_club.publisher\"\nsql[\"from\"] = \"from book_club\"\nsql[\"orderBy\"] = \"order by book_club.year desc\" <s> sql = {\"select\": \"select book_club.year, book_club.book_title, book_club.publisher\", \"from\": \"from book_club\", \"orderBy\": \"order by book_club.year desc\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Show all publishers and the number of books for each publisher. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select book_club.publisher, count(*)\"\nsql[\"from\"] = \"from book_club\"\nsql[\"groupBy\"] = \"group by book_club.publisher\" <s> sql = {\"select\": \"select book_club.publisher, count(*)\", \"from\": \"from book_club\", \"groupBy\": \"group by book_club.publisher\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "How many books are there for each publisher? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select book_club.publisher, count(*)\"\nsql[\"from\"] = \"from book_club\"\nsql[\"groupBy\"] = \"group by book_club.publisher\" <s> sql = {\"select\": \"select book_club.publisher, count(*)\", \"from\": \"from book_club\", \"groupBy\": \"group by book_club.publisher\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "What is the publisher with most number of books? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select book_club.publisher\"\nsql[\"from\"] = \"from book_club\"\nsql[\"groupBy\"] = \"group by book_club.publisher\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"groupBy\": \"group by book_club.publisher\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Return the publisher that has published the most books. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select book_club.publisher\"\nsql[\"from\"] = \"from book_club\"\nsql[\"groupBy\"] = \"group by book_club.publisher\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"groupBy\": \"group by book_club.publisher\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Show all book categories and the number of books in each category. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select book_club.category, count(*)\"\nsql[\"from\"] = \"from book_club\"\nsql[\"groupBy\"] = \"group by book_club.category\" <s> sql = {\"select\": \"select book_club.category, count(*)\", \"from\": \"from book_club\", \"groupBy\": \"group by book_club.category\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "How many books fall into each category? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select book_club.category, count(*)\"\nsql[\"from\"] = \"from book_club\"\nsql[\"groupBy\"] = \"group by book_club.category\" <s> sql = {\"select\": \"select book_club.category, count(*)\", \"from\": \"from book_club\", \"groupBy\": \"group by book_club.category\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "List categories that have at least two books after year 1989. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {\"select\": \"select book_club.category\", \"from\": \"from book_club\", \"where\": \"where book_club.year > 1989\"}",
    "out": "sql[\"groupBy\"] = \"group by book_club.category\"\nsql[\"having\"] = \"having count(*) >= 2\" <s> sql = {\"select\": \"select book_club.category\", \"from\": \"from book_club\", \"where\": \"where book_club.year > 1989\", \"groupBy\": \"group by book_club.category\", \"having\": \"having count(*) >= 2\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "What categories have two or more corresponding books that were made after 1989? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select book_club.category\"\nsql[\"from\"] = \"from book_club\"\nsql[\"where\"] = \"where book_club.year > 1989\"\nsql[\"groupBy\"] = \"group by book_club.category\"\nsql[\"having\"] = \"having count(*) >= 2\" <s> sql = {\"select\": \"select book_club.category\", \"from\": \"from book_club\", \"where\": \"where book_club.year > 1989\", \"groupBy\": \"group by book_club.category\", \"having\": \"having count(*) >= 2\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Show publishers with a book published in 1989 and a book in 1990. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select book_club.publisher\"\nsql[\"from\"] = \"from book_club\"\nsql[\"where\"] = \"where book_club.year = 1989\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select book_club.publisher\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from book_club\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where book_club.year = 1990\" <s> sql = {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"where\": \"where book_club.year = 1989\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"where\": \"where book_club.year = 1990\"}}}"
  },
  {
    "db_id": "culture_company",
    "inp": "What are the publishers who have published a book in both 1989 and 1990? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select book_club.publisher\"\nsql[\"from\"] = \"from book_club\"\nsql[\"where\"] = \"where book_club.year = 1989\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select book_club.publisher\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from book_club\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where book_club.year = 1990\" <s> sql = {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"where\": \"where book_club.year = 1989\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"where\": \"where book_club.year = 1990\"}}}"
  },
  {
    "db_id": "culture_company",
    "inp": "Show all publishers which do not have a book in 1989. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"where\": \"where book_club.year = 1989\"}}}",
    "out": "sql.pop(\"intersect\")\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select book_club.publisher\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from book_club\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where book_club.year = 1989\" <s> sql = {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"where\": \"where book_club.year = 1989\"}}}"
  },
  {
    "db_id": "culture_company",
    "inp": "Which publishers did not publish a book in 1989? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"where\": \"where book_club.year = 1989\"}}}",
    "out": "sql.pop(\"intersect\")\nsql[\"except\"] = {\"clause\": \"except subquery0\", \"subquery0\": {}}\nsql[\"except\"][\"subquery0\"][\"select\"] = \"select book_club.publisher\"\nsql[\"except\"][\"subquery0\"][\"from\"] = \"from book_club\"\nsql[\"except\"][\"subquery0\"][\"where\"] = \"where book_club.year = 1989\" <s> sql = {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select book_club.publisher\", \"from\": \"from book_club\", \"where\": \"where book_club.year = 1989\"}}}"
  },
  {
    "db_id": "culture_company",
    "inp": "Show all movie titles, years, and directors, ordered by budget. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {\"select\": \"select movie.title, movie.year, movie.director\", \"from\": \"from movie\"}",
    "out": "sql[\"orderBy\"] = \"order by movie.budget_million asc\" <s> sql = {\"select\": \"select movie.title, movie.year, movie.director\", \"from\": \"from movie\", \"orderBy\": \"order by movie.budget_million asc\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "What are the titles, years, and directors of all movies, ordered by budget in millions? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title, movie.year, movie.director\"\nsql[\"from\"] = \"from movie\"\nsql[\"orderBy\"] = \"order by movie.budget_million asc\" <s> sql = {\"select\": \"select movie.title, movie.year, movie.director\", \"from\": \"from movie\", \"orderBy\": \"order by movie.budget_million asc\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "How many movie directors are there? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {\"select\": \"select sum(movie.budget_million)\", \"from\": \"from movie\"}",
    "out": "sql[\"select\"] = \"select count(distinct movie.director)\" <s> sql = {\"select\": \"select count(distinct movie.director)\", \"from\": \"from movie\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Count the number of different directors. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {\"select\": \"select count(*)\", \"from\": \"from book_club\"}",
    "out": "sql[\"select\"] = \"select count(distinct movie.director)\"\nsql[\"from\"] = \"from movie\" <s> sql = {\"select\": \"select count(distinct movie.director)\", \"from\": \"from movie\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title, movie.director\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.year <= 2000\"\nsql[\"orderBy\"] = \"order by movie.gross_worldwide desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select movie.title, movie.director\", \"from\": \"from movie\", \"where\": \"where movie.year <= 2000\", \"orderBy\": \"order by movie.gross_worldwide desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title, movie.director\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.year <= 2000\"\nsql[\"orderBy\"] = \"order by movie.gross_worldwide desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select movie.title, movie.director\", \"from\": \"from movie\", \"where\": \"where movie.year <= 2000\", \"orderBy\": \"order by movie.gross_worldwide desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Show all director names who have a movie in both year 1999 and 2000. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.director\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.year = 2000\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select movie.director\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from movie\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where movie.year = 1999\" <s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.year = 2000\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.year = 1999\"}}}"
  },
  {
    "db_id": "culture_company",
    "inp": "Which directors had a movie both in the year 1999 and 2000? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.director\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.year = 2000\"\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select movie.director\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from movie\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where movie.year = 1999\" <s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.year = 2000\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.year = 1999\"}}}"
  },
  {
    "db_id": "culture_company",
    "inp": "Show all director names who have a movie in the year 1999 or 2000. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.director\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.year = 1999 or movie.year = 2000\" <s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.year = 1999 or movie.year = 2000\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Which directors had a movie in either 1999 or 2000? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.director\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.year = 1999 or movie.year = 2000\" <s> sql = {\"select\": \"select movie.director\", \"from\": \"from movie\", \"where\": \"where movie.year = 1999 or movie.year = 2000\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "What is the average, maximum, and minimum budget for all movies before 2000. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select avg(movie.budget_million), max(movie.budget_million), min(movie.budget_million)\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.year < 2000\" <s> sql = {\"select\": \"select avg(movie.budget_million), max(movie.budget_million), min(movie.budget_million)\", \"from\": \"from movie\", \"where\": \"where movie.year < 2000\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select avg(movie.budget_million), max(movie.budget_million), min(movie.budget_million)\"\nsql[\"from\"] = \"from movie\"\nsql[\"where\"] = \"where movie.year < 2000\" <s> sql = {\"select\": \"select avg(movie.budget_million), max(movie.budget_million), min(movie.budget_million)\", \"from\": \"from movie\", \"where\": \"where movie.year < 2000\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "List all company names with a book published by Alyson. | book_club : book_club_id , year , author_or_editor , book_title , publisher ( Alyson ) , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select culture_company.company_name\"\nsql[\"from\"] = \"from culture_company join book_club on culture_company.book_club_id = book_club.book_club_id\"\nsql[\"where\"] = \"where book_club.publisher = \"Alyson\"\" <s> sql = {\"select\": \"select culture_company.company_name\", \"from\": \"from culture_company join book_club on culture_company.book_club_id = book_club.book_club_id\", \"where\": \"where book_club.publisher = \\\"Alyson\\\"\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "What are all the company names that have a book published by Alyson? | book_club : book_club_id , year , author_or_editor , book_title , publisher ( Alyson ) , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select culture_company.company_name\"\nsql[\"from\"] = \"from culture_company join book_club on culture_company.book_club_id = book_club.book_club_id\"\nsql[\"where\"] = \"where book_club.publisher = \"Alyson\"\" <s> sql = {\"select\": \"select culture_company.company_name\", \"from\": \"from culture_company join book_club on culture_company.book_club_id = book_club.book_club_id\", \"where\": \"where book_club.publisher = \\\"Alyson\\\"\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Show the movie titles and book titles for all companies in China. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in ( China ) , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title, book_club.book_title\"\nsql[\"from\"] = \"from movie join culture_company on movie.movie_id = culture_company.movie_id join book_club on book_club.book_club_id = culture_company.book_club_id\"\nsql[\"where\"] = \"where culture_company.incorporated_in = \"China\"\" <s> sql = {\"select\": \"select movie.title, book_club.book_title\", \"from\": \"from movie join culture_company on movie.movie_id = culture_company.movie_id join book_club on book_club.book_club_id = culture_company.book_club_id\", \"where\": \"where culture_company.incorporated_in = \\\"China\\\"\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "What are the titles of movies and books corresponding to companies incorporated in China? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in ( China ) , group_equity_shareholding , book_club_id , movie_id </s> sql = {}",
    "out": "sql[\"select\"] = \"select movie.title, book_club.book_title\"\nsql[\"from\"] = \"from movie join culture_company on movie.movie_id = culture_company.movie_id join book_club on book_club.book_club_id = culture_company.book_club_id\"\nsql[\"where\"] = \"where culture_company.incorporated_in = \"China\"\" <s> sql = {\"select\": \"select movie.title, book_club.book_title\", \"from\": \"from movie join culture_company on movie.movie_id = culture_company.movie_id join book_club on book_club.book_club_id = culture_company.book_club_id\", \"where\": \"where culture_company.incorporated_in = \\\"China\\\"\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "Show all company names with a movie directed in year 1999. | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {\"select\": \"select movie.movie_id\", \"from\": \"from movie\"}",
    "out": "sql[\"select\"] = \"select culture_company.company_name\"\nsql[\"from\"] = \"from movie join culture_company on movie.movie_id = culture_company.movie_id\"\nsql[\"where\"] = \"where movie.year = 1999\" <s> sql = {\"select\": \"select culture_company.company_name\", \"from\": \"from movie join culture_company on movie.movie_id = culture_company.movie_id\", \"where\": \"where movie.year = 1999\"}"
  },
  {
    "db_id": "culture_company",
    "inp": "What are all company names that have a corresponding movie directed in the year 1999? | book_club : book_club_id , year , author_or_editor , book_title , publisher , category , result | movie : movie_id , title , year , director , budget_million , gross_worldwide | culture_company : company_name , type , incorporated_in , group_equity_shareholding , book_club_id , movie_id </s> sql = {\"select\": \"select culture_company.company_name\", \"from\": \"from culture_company join movie on culture_company.movie_id = movie.movie_id\", \"where\": \"where movie.year = 1999\", \"orderBy\": \"order by culture_company.company_name desc\"}",
    "out": "sql[\"from\"] = \"from movie join culture_company on movie.movie_id = culture_company.movie_id\"\nsql.pop(\"orderBy\") <s> sql = {\"select\": \"select culture_company.company_name\", \"from\": \"from movie join culture_company on movie.movie_id = culture_company.movie_id\", \"where\": \"where movie.year = 1999\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "How many players are there? | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select count(*), count(*)\", \"from\": \"from player\"}",
    "out": "sql[\"select\"] = \"select count(*)\" <s> sql = {\"select\": \"select count(*)\", \"from\": \"from player\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "List the names of players in ascending order of votes. | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select player.player_name\", \"from\": \"from player\", \"groupBy\": \"group by player.votes\", \"orderBy\": \"order by player.votes asc\"}",
    "out": "sql.pop(\"groupBy\") <s> sql = {\"select\": \"select player.player_name\", \"from\": \"from player\", \"orderBy\": \"order by player.votes asc\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "What are the gender and occupation of players? | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select player.gender, player.occupation\", \"from\": \"from player\", \"orderBy\": \"order by player.gender desc\"}",
    "out": "sql.pop(\"orderBy\") <s> sql = {\"select\": \"select player.gender, player.occupation\", \"from\": \"from player\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "List the name and residence for players whose occupation is not \"Researcher\". | player : player_id , sponsor_name , player_name , gender , residence , occupation ( Researcher ) , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select player.player_name, player.residence\", \"from\": \"from player\", \"where\": \"where player.occupation != \\\"Researcher\\\"\", \"orderBy\": \"order by player.player_name asc, player.residence asc\"}",
    "out": "sql.pop(\"orderBy\") <s> sql = {\"select\": \"select player.player_name, player.residence\", \"from\": \"from player\", \"where\": \"where player.occupation != \\\"Researcher\\\"\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\". | player : player_id , sponsor_name , player_name , gender , residence ( Brandon , Birtle ) , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select player.sponsor_name\", \"from\": \"from player\", \"where\": \"where player.residence = \\\"Brandon\\\" or player.residence = \\\"Birtle\\\"\", \"orderBy\": \"order by player.residence desc\"}",
    "out": "sql.pop(\"orderBy\") <s> sql = {\"select\": \"select player.sponsor_name\", \"from\": \"from player\", \"where\": \"where player.residence = \\\"Brandon\\\" or player.residence = \\\"Birtle\\\"\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "What is the name of the player with the largest number of votes? | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select player.player_name\", \"from\": \"from player\", \"orderBy\": \"order by player.votes asc\", \"limit\": \"limit 1\"}",
    "out": "sql[\"orderBy\"] = \"order by player.votes desc\" <s> sql = {\"select\": \"select player.player_name\", \"from\": \"from player\", \"orderBy\": \"order by player.votes desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "Show different occupations along with the number of players in each occupation. | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select count(*), player.occupation\", \"from\": \"from player\"}",
    "out": "sql[\"select\"] = \"select player.occupation, count(*)\"\nsql[\"groupBy\"] = \"group by player.occupation\" <s> sql = {\"select\": \"select player.occupation, count(*)\", \"from\": \"from player\", \"groupBy\": \"group by player.occupation\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "Please show the most common occupation of players. | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {}",
    "out": "sql[\"select\"] = \"select player.occupation\"\nsql[\"from\"] = \"from player\"\nsql[\"groupBy\"] = \"group by player.occupation\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select player.occupation\", \"from\": \"from player\", \"groupBy\": \"group by player.occupation\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "Show the residences that have at least two players. | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select count(*)\", \"from\": \"from player\", \"groupBy\": \"group by player.residence\", \"having\": \"having count(*) >= 2\"}",
    "out": "sql[\"select\"] = \"select player.residence\" <s> sql = {\"select\": \"select player.residence\", \"from\": \"from player\", \"groupBy\": \"group by player.residence\", \"having\": \"having count(*) >= 2\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "Show the names of players and names of their coaches. | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select player.player_name\", \"from\": \"from player\", \"union\": {\"clause\": \"union subquery0\", \"subquery0\": {\"select\": \"select player.player_name\", \"from\": \"from player\"}}}",
    "out": "sql[\"select\"] = \"select player.player_name, coach.coach_name\"\nsql[\"from\"] = \"from player_coach join coach on player_coach.coach_id = coach.coach_id join player on player_coach.player_id = player.player_id\"\nsql.pop(\"union\") <s> sql = {\"select\": \"select player.player_name, coach.coach_name\", \"from\": \"from player_coach join coach on player_coach.coach_id = coach.coach_id join player on player_coach.player_id = player.player_id\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "Show the names of players coached by the rank 1 coach. | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select player.player_name\", \"from\": \"from player_coach join coach on player_coach.coach_id = coach.coach_id join player on player_coach.player_id = player.player_id\", \"where\": \"where coach.rank = 1 and coach.rank = 1\"}",
    "out": "sql[\"where\"] = \"where coach.rank = 1\" <s> sql = {\"select\": \"select player.player_name\", \"from\": \"from player_coach join coach on player_coach.coach_id = coach.coach_id join player on player_coach.player_id = player.player_id\", \"where\": \"where coach.rank = 1\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "Show the names and genders of players with a coach starting after 2011. | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select player.player_name, player.gender\", \"from\": \"from player join player_coach on player.player_id = player_coach.player_id\", \"where\": \"where player_coach.starting_year > 2011\"}",
    "out": "sql[\"from\"] = \"from player_coach join coach on player_coach.coach_id = coach.coach_id join player on player_coach.player_id = player.player_id\" <s> sql = {\"select\": \"select player.player_name, player.gender\", \"from\": \"from player_coach join coach on player_coach.coach_id = coach.coach_id join player on player_coach.player_id = player.player_id\", \"where\": \"where player_coach.starting_year > 2011\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "Show the names of players and names of their coaches in descending order of the votes of players. | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select player.votes\", \"from\": \"from player join player_coach on player.player_id = player_coach.player_id join coach on player_coach.coach_id = coach.coach_id\"}",
    "out": "sql[\"select\"] = \"select player.player_name, coach.coach_name\"\nsql[\"from\"] = \"from player_coach join coach on player_coach.coach_id = coach.coach_id join player on player_coach.player_id = player.player_id\"\nsql[\"orderBy\"] = \"order by player.votes desc\" <s> sql = {\"select\": \"select player.player_name, coach.coach_name\", \"from\": \"from player_coach join coach on player_coach.coach_id = coach.coach_id join player on player_coach.player_id = player.player_id\", \"orderBy\": \"order by player.votes desc\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "List the names of players that do not have coaches. | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select player_coach.player_id\", \"from\": \"from player_coach\", \"except\": {\"clause\": \"except subquery0\", \"subquery0\": {\"select\": \"select player_coach.player_id\", \"from\": \"from player_coach\"}}}",
    "out": "sql[\"select\"] = \"select player.player_name\"\nsql[\"from\"] = \"from player\"\nsql[\"where\"] = {\"clause\": \"where player.player_id not in (subquery0)\", \"subquery0\": {}}\nsql[\"where\"][\"subquery0\"][\"select\"] = \"select player_coach.player_id\"\nsql[\"where\"][\"subquery0\"][\"from\"] = \"from player_coach\"\nsql.pop(\"except\") <s> sql = {\"select\": \"select player.player_name\", \"from\": \"from player\", \"where\": {\"clause\": \"where player.player_id not in (subquery0)\", \"subquery0\": {\"select\": \"select player_coach.player_id\", \"from\": \"from player_coach\"}}}"
  },
  {
    "db_id": "riding_club",
    "inp": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\". | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select player.residence\", \"from\": \"from player\", \"groupBy\": \"group by player.gender\"}",
    "out": "sql[\"where\"] = \"where player.gender = \"M\"\"\nsql.pop(\"groupBy\")\nsql[\"intersect\"] = {\"clause\": \"intersect subquery0\", \"subquery0\": {}}\nsql[\"intersect\"][\"subquery0\"][\"select\"] = \"select player.residence\"\nsql[\"intersect\"][\"subquery0\"][\"from\"] = \"from player\"\nsql[\"intersect\"][\"subquery0\"][\"where\"] = \"where player.gender = \"F\"\" <s> sql = {\"select\": \"select player.residence\", \"from\": \"from player\", \"where\": \"where player.gender = \\\"M\\\"\", \"intersect\": {\"clause\": \"intersect subquery0\", \"subquery0\": {\"select\": \"select player.residence\", \"from\": \"from player\", \"where\": \"where player.gender = \\\"F\\\"\"}}}"
  },
  {
    "db_id": "riding_club",
    "inp": "How many coaches does each club has? List the club id, name and the number of coaches. | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select club.club_id, club.club_name, club.club_name\", \"from\": \"from club join coach on club.club_id = coach.club_id\"}",
    "out": "sql[\"select\"] = \"select club.club_id, club.club_name, count(*)\"\nsql[\"groupBy\"] = \"group by club.club_id\" <s> sql = {\"select\": \"select club.club_id, club.club_name, count(*)\", \"from\": \"from club join coach on club.club_id = coach.club_id\", \"groupBy\": \"group by club.club_id\"}"
  },
  {
    "db_id": "riding_club",
    "inp": "How many gold medals has the club with the most coaches won? | player : player_id , sponsor_name , player_name , gender , residence , occupation , votes , rank | club : club_id , club_name , region , start_year | coach : coach_id , coach_name , gender , club_id , rank | player_coach : player_id , coach_id , starting_year | match_result : rank , club_id , gold , big_silver , small_silver , bronze , points </s> sql = {\"select\": \"select distinct match_result.gold\", \"from\": \"from club join match_result on club.club_id = match_result.club_id\"}",
    "out": "sql[\"select\"] = \"select match_result.club_id, match_result.gold\"\nsql[\"from\"] = \"from match_result join coach on match_result.club_id = coach.club_id\"\nsql[\"groupBy\"] = \"group by match_result.club_id\"\nsql[\"orderBy\"] = \"order by count(*) desc\"\nsql[\"limit\"] = \"limit 1\" <s> sql = {\"select\": \"select match_result.club_id, match_result.gold\", \"from\": \"from match_result join coach on match_result.club_id = coach.club_id\", \"groupBy\": \"group by match_result.club_id\", \"orderBy\": \"order by count(*) desc\", \"limit\": \"limit 1\"}"
  }
]